<?php
/**
 * RecordingApiTest
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace PureCloudPlatform\Client\V2;

use \PureCloudPlatform\Client\V2\Configuration;
use \PureCloudPlatform\Client\V2\ApiException;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * RecordingApiTest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordingApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deleteConversationRecordingAnnotation
     *
     * Delete annotation.
     *
     */
    public function testDeleteConversationRecordingAnnotation()
    {
    }

    /**
     * Test case for deleteOrphanrecording
     *
     * Deletes a single orphan recording.
     *
     */
    public function testDeleteOrphanrecording()
    {
    }

    /**
     * Test case for deleteRecordingJob
     *
     * Delete the recording bulk job.
     *
     */
    public function testDeleteRecordingJob()
    {
    }

    /**
     * Test case for deleteRecordingMediaretentionpolicies
     *
     * Delete media retention policies.
     *
     */
    public function testDeleteRecordingMediaretentionpolicies()
    {
    }

    /**
     * Test case for deleteRecordingMediaretentionpolicy
     *
     * Delete a media retention policy.
     *
     */
    public function testDeleteRecordingMediaretentionpolicy()
    {
    }

    /**
     * Test case for getConversationRecording
     *
     * Gets a specific recording..
     *
     */
    public function testGetConversationRecording()
    {
    }

    /**
     * Test case for getConversationRecordingAnnotation
     *
     * Get annotation.
     *
     */
    public function testGetConversationRecordingAnnotation()
    {
    }

    /**
     * Test case for getConversationRecordingAnnotations
     *
     * Get annotations for recording.
     *
     */
    public function testGetConversationRecordingAnnotations()
    {
    }

    /**
     * Test case for getConversationRecordingmetadata
     *
     * Get recording metadata for a conversation. Does not return playable media..
     *
     */
    public function testGetConversationRecordingmetadata()
    {
    }

    /**
     * Test case for getConversationRecordingmetadataRecordingId
     *
     * Get metadata for a specific recording. Does not return playable media..
     *
     */
    public function testGetConversationRecordingmetadataRecordingId()
    {
    }

    /**
     * Test case for getConversationRecordings
     *
     * Get all of a Conversation's Recordings..
     *
     */
    public function testGetConversationRecordings()
    {
    }

    /**
     * Test case for getOrphanrecording
     *
     * Gets a single orphan recording.
     *
     */
    public function testGetOrphanrecording()
    {
    }

    /**
     * Test case for getOrphanrecordingMedia
     *
     * Gets the media of a single orphan recording.
     *
     */
    public function testGetOrphanrecordingMedia()
    {
    }

    /**
     * Test case for getOrphanrecordings
     *
     * Gets all orphan recordings.
     *
     */
    public function testGetOrphanrecordings()
    {
    }

    /**
     * Test case for getRecordingBatchrequest
     *
     * Get the status and results for a batch request job, only the user that submitted the job may retrieve results.
     *
     */
    public function testGetRecordingBatchrequest()
    {
    }

    /**
     * Test case for getRecordingJob
     *
     * Get the status of the job associated with the job id..
     *
     */
    public function testGetRecordingJob()
    {
    }

    /**
     * Test case for getRecordingJobs
     *
     * Get the status of all jobs within the user's organization.
     *
     */
    public function testGetRecordingJobs()
    {
    }

    /**
     * Test case for getRecordingLocalkeysSetting
     *
     * Get the local encryption settings.
     *
     */
    public function testGetRecordingLocalkeysSetting()
    {
    }

    /**
     * Test case for getRecordingLocalkeysSettings
     *
     * gets a list local key settings data.
     *
     */
    public function testGetRecordingLocalkeysSettings()
    {
    }

    /**
     * Test case for getRecordingMediaretentionpolicies
     *
     * Gets media retention policy list with query options to filter on name and enabled..
     *
     */
    public function testGetRecordingMediaretentionpolicies()
    {
    }

    /**
     * Test case for getRecordingMediaretentionpolicy
     *
     * Get a media retention policy.
     *
     */
    public function testGetRecordingMediaretentionpolicy()
    {
    }

    /**
     * Test case for getRecordingRecordingkeys
     *
     * Get encryption key list.
     *
     */
    public function testGetRecordingRecordingkeys()
    {
    }

    /**
     * Test case for getRecordingRecordingkeysRotationschedule
     *
     * Get key rotation schedule.
     *
     */
    public function testGetRecordingRecordingkeysRotationschedule()
    {
    }

    /**
     * Test case for getRecordingSettings
     *
     * Get the Recording Settings for the Organization.
     *
     */
    public function testGetRecordingSettings()
    {
    }

    /**
     * Test case for getRecordingsScreensessions
     *
     * Retrieves a paged listing of screen recording sessions.
     *
     */
    public function testGetRecordingsScreensessions()
    {
    }

    /**
     * Test case for patchRecordingMediaretentionpolicy
     *
     * Patch a media retention policy.
     *
     */
    public function testPatchRecordingMediaretentionpolicy()
    {
    }

    /**
     * Test case for patchRecordingsScreensession
     *
     * Update a screen recording session.
     *
     */
    public function testPatchRecordingsScreensession()
    {
    }

    /**
     * Test case for postConversationRecordingAnnotations
     *
     * Create annotation.
     *
     */
    public function testPostConversationRecordingAnnotations()
    {
    }

    /**
     * Test case for postRecordingBatchrequests
     *
     * Submit a batch download request for recordings. Recordings in response will be in their original format/codec - configured in the Trunk configuration..
     *
     */
    public function testPostRecordingBatchrequests()
    {
    }

    /**
     * Test case for postRecordingJobs
     *
     * Create a recording bulk job.
     *
     */
    public function testPostRecordingJobs()
    {
    }

    /**
     * Test case for postRecordingLocalkeys
     *
     * create a local recording key.
     *
     */
    public function testPostRecordingLocalkeys()
    {
    }

    /**
     * Test case for postRecordingLocalkeysSettings
     *
     * create settings for local key creation.
     *
     */
    public function testPostRecordingLocalkeysSettings()
    {
    }

    /**
     * Test case for postRecordingMediaretentionpolicies
     *
     * Create media retention policy.
     *
     */
    public function testPostRecordingMediaretentionpolicies()
    {
    }

    /**
     * Test case for postRecordingRecordingkeys
     *
     * Create encryption key.
     *
     */
    public function testPostRecordingRecordingkeys()
    {
    }

    /**
     * Test case for postRecordingsDeletionprotection
     *
     * Get a list of conversations with protected recordings.
     *
     */
    public function testPostRecordingsDeletionprotection()
    {
    }

    /**
     * Test case for putConversationRecording
     *
     * Updates the retention records on a recording..
     *
     */
    public function testPutConversationRecording()
    {
    }

    /**
     * Test case for putConversationRecordingAnnotation
     *
     * Update annotation.
     *
     */
    public function testPutConversationRecordingAnnotation()
    {
    }

    /**
     * Test case for putOrphanrecording
     *
     * Updates an orphan recording to a regular recording with retention values.
     *
     */
    public function testPutOrphanrecording()
    {
    }

    /**
     * Test case for putRecordingJob
     *
     * Execute the recording bulk job.
     *
     */
    public function testPutRecordingJob()
    {
    }

    /**
     * Test case for putRecordingLocalkeysSetting
     *
     * Update the local encryption settings.
     *
     */
    public function testPutRecordingLocalkeysSetting()
    {
    }

    /**
     * Test case for putRecordingMediaretentionpolicy
     *
     * Update a media retention policy.
     *
     */
    public function testPutRecordingMediaretentionpolicy()
    {
    }

    /**
     * Test case for putRecordingRecordingkeysRotationschedule
     *
     * Update key rotation schedule.
     *
     */
    public function testPutRecordingRecordingkeysRotationschedule()
    {
    }

    /**
     * Test case for putRecordingSettings
     *
     * Update the Recording Settings for the Organization.
     *
     */
    public function testPutRecordingSettings()
    {
    }

    /**
     * Test case for putRecordingsDeletionprotection
     *
     * Apply or revoke recording protection for conversations.
     *
     */
    public function testPutRecordingsDeletionprotection()
    {
    }
}
