<?php
/**
 * ConversationsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace PureCloudPlatform\Client\V2;

use \PureCloudPlatform\Client\V2\Configuration;
use \PureCloudPlatform\Client\V2\ApiException;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ConversationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConversationsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deleteAnalyticsConversationsDetailsJob
     *
     * Delete/cancel an async request.
     *
     */
    public function testDeleteAnalyticsConversationsDetailsJob()
    {
    }

    /**
     * Test case for deleteConversationParticipantCode
     *
     * Delete a code used to add a communication to this participant.
     *
     */
    public function testDeleteConversationParticipantCode()
    {
    }

    /**
     * Test case for deleteConversationParticipantFlaggedreason
     *
     * Remove flagged reason from conversation participant..
     *
     */
    public function testDeleteConversationParticipantFlaggedreason()
    {
    }

    /**
     * Test case for deleteConversationsCallParticipantConsult
     *
     * Cancel the transfer.
     *
     */
    public function testDeleteConversationsCallParticipantConsult()
    {
    }

    /**
     * Test case for deleteConversationsEmailMessagesDraftAttachment
     *
     * Delete attachment from draft.
     *
     */
    public function testDeleteConversationsEmailMessagesDraftAttachment()
    {
    }

    /**
     * Test case for deleteConversationsMessagingIntegrationsFacebookIntegrationId
     *
     * Delete a Facebook messaging integration.
     *
     */
    public function testDeleteConversationsMessagingIntegrationsFacebookIntegrationId()
    {
    }

    /**
     * Test case for deleteConversationsMessagingIntegrationsLineIntegrationId
     *
     * Delete a LINE messenger integration.
     *
     */
    public function testDeleteConversationsMessagingIntegrationsLineIntegrationId()
    {
    }

    /**
     * Test case for deleteConversationsMessagingIntegrationsTwitterIntegrationId
     *
     * Delete a Twitter messaging integration.
     *
     */
    public function testDeleteConversationsMessagingIntegrationsTwitterIntegrationId()
    {
    }

    /**
     * Test case for getAnalyticsConversationDetails
     *
     * Get a conversation by id.
     *
     */
    public function testGetAnalyticsConversationDetails()
    {
    }

    /**
     * Test case for getAnalyticsConversationsDetails
     *
     * Gets multiple conversations by id.
     *
     */
    public function testGetAnalyticsConversationsDetails()
    {
    }

    /**
     * Test case for getAnalyticsConversationsDetailsJob
     *
     * Get status for async query for conversation details.
     *
     */
    public function testGetAnalyticsConversationsDetailsJob()
    {
    }

    /**
     * Test case for getAnalyticsConversationsDetailsJobResults
     *
     * Fetch a page of results for an async query.
     *
     */
    public function testGetAnalyticsConversationsDetailsJobResults()
    {
    }

    /**
     * Test case for getConversation
     *
     * Get conversation.
     *
     */
    public function testGetConversation()
    {
    }

    /**
     * Test case for getConversationParticipantSecureivrsession
     *
     * Fetch info on a secure session.
     *
     */
    public function testGetConversationParticipantSecureivrsession()
    {
    }

    /**
     * Test case for getConversationParticipantSecureivrsessions
     *
     * Get a list of secure sessions for this participant..
     *
     */
    public function testGetConversationParticipantSecureivrsessions()
    {
    }

    /**
     * Test case for getConversationParticipantWrapup
     *
     * Get the wrap-up for this conversation participant..
     *
     */
    public function testGetConversationParticipantWrapup()
    {
    }

    /**
     * Test case for getConversationParticipantWrapupcodes
     *
     * Get list of wrapup codes for this conversation participant.
     *
     */
    public function testGetConversationParticipantWrapupcodes()
    {
    }

    /**
     * Test case for getConversations
     *
     * Get active conversations for the logged in user.
     *
     */
    public function testGetConversations()
    {
    }

    /**
     * Test case for getConversationsCall
     *
     * Get call conversation.
     *
     */
    public function testGetConversationsCall()
    {
    }

    /**
     * Test case for getConversationsCallParticipantWrapup
     *
     * Get the wrap-up for this conversation participant..
     *
     */
    public function testGetConversationsCallParticipantWrapup()
    {
    }

    /**
     * Test case for getConversationsCallParticipantWrapupcodes
     *
     * Get list of wrapup codes for this conversation participant.
     *
     */
    public function testGetConversationsCallParticipantWrapupcodes()
    {
    }

    /**
     * Test case for getConversationsCallback
     *
     * Get callback conversation.
     *
     */
    public function testGetConversationsCallback()
    {
    }

    /**
     * Test case for getConversationsCallbackParticipantWrapup
     *
     * Get the wrap-up for this conversation participant..
     *
     */
    public function testGetConversationsCallbackParticipantWrapup()
    {
    }

    /**
     * Test case for getConversationsCallbackParticipantWrapupcodes
     *
     * Get list of wrapup codes for this conversation participant.
     *
     */
    public function testGetConversationsCallbackParticipantWrapupcodes()
    {
    }

    /**
     * Test case for getConversationsCallbacks
     *
     * Get active callback conversations for the logged in user.
     *
     */
    public function testGetConversationsCallbacks()
    {
    }

    /**
     * Test case for getConversationsCalls
     *
     * Get active call conversations for the logged in user.
     *
     */
    public function testGetConversationsCalls()
    {
    }

    /**
     * Test case for getConversationsCallsHistory
     *
     * Get call history.
     *
     */
    public function testGetConversationsCallsHistory()
    {
    }

    /**
     * Test case for getConversationsCallsMaximumconferenceparties
     *
     * Get the maximum number of participants that this user can have on a conference.
     *
     */
    public function testGetConversationsCallsMaximumconferenceparties()
    {
    }

    /**
     * Test case for getConversationsChat
     *
     * Get chat conversation.
     *
     */
    public function testGetConversationsChat()
    {
    }

    /**
     * Test case for getConversationsChatMessage
     *
     * Get a web chat conversation message.
     *
     */
    public function testGetConversationsChatMessage()
    {
    }

    /**
     * Test case for getConversationsChatMessages
     *
     * Get the messages of a chat conversation..
     *
     */
    public function testGetConversationsChatMessages()
    {
    }

    /**
     * Test case for getConversationsChatParticipantWrapup
     *
     * Get the wrap-up for this conversation participant..
     *
     */
    public function testGetConversationsChatParticipantWrapup()
    {
    }

    /**
     * Test case for getConversationsChatParticipantWrapupcodes
     *
     * Get list of wrapup codes for this conversation participant.
     *
     */
    public function testGetConversationsChatParticipantWrapupcodes()
    {
    }

    /**
     * Test case for getConversationsChats
     *
     * Get active chat conversations for the logged in user.
     *
     */
    public function testGetConversationsChats()
    {
    }

    /**
     * Test case for getConversationsCobrowsesession
     *
     * Get cobrowse conversation.
     *
     */
    public function testGetConversationsCobrowsesession()
    {
    }

    /**
     * Test case for getConversationsCobrowsesessionParticipantWrapup
     *
     * Get the wrap-up for this conversation participant..
     *
     */
    public function testGetConversationsCobrowsesessionParticipantWrapup()
    {
    }

    /**
     * Test case for getConversationsCobrowsesessionParticipantWrapupcodes
     *
     * Get list of wrapup codes for this conversation participant.
     *
     */
    public function testGetConversationsCobrowsesessionParticipantWrapupcodes()
    {
    }

    /**
     * Test case for getConversationsCobrowsesessions
     *
     * Get active cobrowse conversations for the logged in user.
     *
     */
    public function testGetConversationsCobrowsesessions()
    {
    }

    /**
     * Test case for getConversationsEmail
     *
     * Get email conversation.
     *
     */
    public function testGetConversationsEmail()
    {
    }

    /**
     * Test case for getConversationsEmailMessage
     *
     * Get conversation message.
     *
     */
    public function testGetConversationsEmailMessage()
    {
    }

    /**
     * Test case for getConversationsEmailMessages
     *
     * Get conversation messages.
     *
     */
    public function testGetConversationsEmailMessages()
    {
    }

    /**
     * Test case for getConversationsEmailMessagesDraft
     *
     * Get conversation draft reply.
     *
     */
    public function testGetConversationsEmailMessagesDraft()
    {
    }

    /**
     * Test case for getConversationsEmailParticipantWrapup
     *
     * Get the wrap-up for this conversation participant..
     *
     */
    public function testGetConversationsEmailParticipantWrapup()
    {
    }

    /**
     * Test case for getConversationsEmailParticipantWrapupcodes
     *
     * Get list of wrapup codes for this conversation participant.
     *
     */
    public function testGetConversationsEmailParticipantWrapupcodes()
    {
    }

    /**
     * Test case for getConversationsEmails
     *
     * Get active email conversations for the logged in user.
     *
     */
    public function testGetConversationsEmails()
    {
    }

    /**
     * Test case for getConversationsMessage
     *
     * Get message conversation.
     *
     */
    public function testGetConversationsMessage()
    {
    }

    /**
     * Test case for getConversationsMessageCommunicationMessagesMediaMediaId
     *
     * Get media.
     *
     */
    public function testGetConversationsMessageCommunicationMessagesMediaMediaId()
    {
    }

    /**
     * Test case for getConversationsMessageMessage
     *
     * Get message.
     *
     */
    public function testGetConversationsMessageMessage()
    {
    }

    /**
     * Test case for getConversationsMessageParticipantWrapup
     *
     * Get the wrap-up for this conversation participant..
     *
     */
    public function testGetConversationsMessageParticipantWrapup()
    {
    }

    /**
     * Test case for getConversationsMessageParticipantWrapupcodes
     *
     * Get list of wrapup codes for this conversation participant.
     *
     */
    public function testGetConversationsMessageParticipantWrapupcodes()
    {
    }

    /**
     * Test case for getConversationsMessages
     *
     * Get active message conversations for the logged in user.
     *
     */
    public function testGetConversationsMessages()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrations
     *
     * Get a list of Integrations.
     *
     */
    public function testGetConversationsMessagingIntegrations()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsFacebook
     *
     * Get a list of Facebook Integrations.
     *
     */
    public function testGetConversationsMessagingIntegrationsFacebook()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsFacebookIntegrationId
     *
     * Get a Facebook messaging integration.
     *
     */
    public function testGetConversationsMessagingIntegrationsFacebookIntegrationId()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsLine
     *
     * Get a list of LINE messenger Integrations.
     *
     */
    public function testGetConversationsMessagingIntegrationsLine()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsLineIntegrationId
     *
     * Get a LINE messenger integration.
     *
     */
    public function testGetConversationsMessagingIntegrationsLineIntegrationId()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsTwitter
     *
     * Get a list of Twitter Integrations.
     *
     */
    public function testGetConversationsMessagingIntegrationsTwitter()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsTwitterIntegrationId
     *
     * Get a Twitter messaging integration.
     *
     */
    public function testGetConversationsMessagingIntegrationsTwitterIntegrationId()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsWhatsapp
     *
     * Get a list of WhatsApp Integrations.
     *
     */
    public function testGetConversationsMessagingIntegrationsWhatsapp()
    {
    }

    /**
     * Test case for getConversationsMessagingIntegrationsWhatsappIntegrationId
     *
     * Get a WhatsApp messaging integration.
     *
     */
    public function testGetConversationsMessagingIntegrationsWhatsappIntegrationId()
    {
    }

    /**
     * Test case for getConversationsMessagingSticker
     *
     * Get a list of Messaging Stickers.
     *
     */
    public function testGetConversationsMessagingSticker()
    {
    }

    /**
     * Test case for patchConversationParticipant
     *
     * Update a participant..
     *
     */
    public function testPatchConversationParticipant()
    {
    }

    /**
     * Test case for patchConversationParticipantAttributes
     *
     * Update the attributes on a conversation participant..
     *
     */
    public function testPatchConversationParticipantAttributes()
    {
    }

    /**
     * Test case for patchConversationsCall
     *
     * Update a conversation by setting it's recording state, merging in other conversations to create a conference, or disconnecting all of the participants.
     *
     */
    public function testPatchConversationsCall()
    {
    }

    /**
     * Test case for patchConversationsCallParticipant
     *
     * Update conversation participant.
     *
     */
    public function testPatchConversationsCallParticipant()
    {
    }

    /**
     * Test case for patchConversationsCallParticipantAttributes
     *
     * Update the attributes on a conversation participant..
     *
     */
    public function testPatchConversationsCallParticipantAttributes()
    {
    }

    /**
     * Test case for patchConversationsCallParticipantCommunication
     *
     * Update conversation participant's communication by disconnecting it..
     *
     */
    public function testPatchConversationsCallParticipantCommunication()
    {
    }

    /**
     * Test case for patchConversationsCallParticipantConsult
     *
     * Change who can speak.
     *
     */
    public function testPatchConversationsCallParticipantConsult()
    {
    }

    /**
     * Test case for patchConversationsCallback
     *
     * Update a conversation by disconnecting all of the participants.
     *
     */
    public function testPatchConversationsCallback()
    {
    }

    /**
     * Test case for patchConversationsCallbackParticipant
     *
     * Update conversation participant.
     *
     */
    public function testPatchConversationsCallbackParticipant()
    {
    }

    /**
     * Test case for patchConversationsCallbackParticipantAttributes
     *
     * Update the attributes on a conversation participant..
     *
     */
    public function testPatchConversationsCallbackParticipantAttributes()
    {
    }

    /**
     * Test case for patchConversationsCallbackParticipantCommunication
     *
     * Update conversation participant's communication by disconnecting it..
     *
     */
    public function testPatchConversationsCallbackParticipantCommunication()
    {
    }

    /**
     * Test case for patchConversationsChat
     *
     * Update a conversation by disconnecting all of the participants.
     *
     */
    public function testPatchConversationsChat()
    {
    }

    /**
     * Test case for patchConversationsChatParticipant
     *
     * Update conversation participant.
     *
     */
    public function testPatchConversationsChatParticipant()
    {
    }

    /**
     * Test case for patchConversationsChatParticipantAttributes
     *
     * Update the attributes on a conversation participant..
     *
     */
    public function testPatchConversationsChatParticipantAttributes()
    {
    }

    /**
     * Test case for patchConversationsChatParticipantCommunication
     *
     * Update conversation participant's communication by disconnecting it..
     *
     */
    public function testPatchConversationsChatParticipantCommunication()
    {
    }

    /**
     * Test case for patchConversationsCobrowsesession
     *
     * Update a conversation by disconnecting all of the participants.
     *
     */
    public function testPatchConversationsCobrowsesession()
    {
    }

    /**
     * Test case for patchConversationsCobrowsesessionParticipant
     *
     * Update conversation participant.
     *
     */
    public function testPatchConversationsCobrowsesessionParticipant()
    {
    }

    /**
     * Test case for patchConversationsCobrowsesessionParticipantAttributes
     *
     * Update the attributes on a conversation participant..
     *
     */
    public function testPatchConversationsCobrowsesessionParticipantAttributes()
    {
    }

    /**
     * Test case for patchConversationsCobrowsesessionParticipantCommunication
     *
     * Update conversation participant's communication by disconnecting it..
     *
     */
    public function testPatchConversationsCobrowsesessionParticipantCommunication()
    {
    }

    /**
     * Test case for patchConversationsEmail
     *
     * Update a conversation by disconnecting all of the participants.
     *
     */
    public function testPatchConversationsEmail()
    {
    }

    /**
     * Test case for patchConversationsEmailParticipant
     *
     * Update conversation participant.
     *
     */
    public function testPatchConversationsEmailParticipant()
    {
    }

    /**
     * Test case for patchConversationsEmailParticipantAttributes
     *
     * Update the attributes on a conversation participant..
     *
     */
    public function testPatchConversationsEmailParticipantAttributes()
    {
    }

    /**
     * Test case for patchConversationsEmailParticipantCommunication
     *
     * Update conversation participant's communication by disconnecting it..
     *
     */
    public function testPatchConversationsEmailParticipantCommunication()
    {
    }

    /**
     * Test case for patchConversationsMessage
     *
     * Update a conversation by disconnecting all of the participants.
     *
     */
    public function testPatchConversationsMessage()
    {
    }

    /**
     * Test case for patchConversationsMessageParticipant
     *
     * Update conversation participant.
     *
     */
    public function testPatchConversationsMessageParticipant()
    {
    }

    /**
     * Test case for patchConversationsMessageParticipantAttributes
     *
     * Update the attributes on a conversation participant..
     *
     */
    public function testPatchConversationsMessageParticipantAttributes()
    {
    }

    /**
     * Test case for patchConversationsMessageParticipantCommunication
     *
     * Update conversation participant's communication by disconnecting it..
     *
     */
    public function testPatchConversationsMessageParticipantCommunication()
    {
    }

    /**
     * Test case for patchConversationsMessagingIntegrationsWhatsappIntegrationId
     *
     * Activate a WhatsApp messaging integration..
     *
     */
    public function testPatchConversationsMessagingIntegrationsWhatsappIntegrationId()
    {
    }

    /**
     * Test case for postAnalyticsConversationDetailsProperties
     *
     * Index conversation properties.
     *
     */
    public function testPostAnalyticsConversationDetailsProperties()
    {
    }

    /**
     * Test case for postAnalyticsConversationsAggregatesQuery
     *
     * Query for conversation aggregates.
     *
     */
    public function testPostAnalyticsConversationsAggregatesQuery()
    {
    }

    /**
     * Test case for postAnalyticsConversationsDetailsJobs
     *
     * Query for conversation details asynchronously.
     *
     */
    public function testPostAnalyticsConversationsDetailsJobs()
    {
    }

    /**
     * Test case for postAnalyticsConversationsDetailsQuery
     *
     * Query for conversation details.
     *
     */
    public function testPostAnalyticsConversationsDetailsQuery()
    {
    }

    /**
     * Test case for postConversationDisconnect
     *
     * Performs a full conversation teardown. Issues disconnect requests for any connected media. Applies a system wrap-up code to any participants that are pending wrap-up. This is not intended to be the normal way of ending interactions but is available in the event of problems with the application to allow a resyncronization of state across all components. It is recommended that users submit a support case if they are relying on this endpoint systematically as there is likely something that needs investigation..
     *
     */
    public function testPostConversationDisconnect()
    {
    }

    /**
     * Test case for postConversationParticipantCallbacks
     *
     * Create a new callback for the specified participant on the conversation..
     *
     */
    public function testPostConversationParticipantCallbacks()
    {
    }

    /**
     * Test case for postConversationParticipantDigits
     *
     * Sends DTMF to the participant.
     *
     */
    public function testPostConversationParticipantDigits()
    {
    }

    /**
     * Test case for postConversationParticipantReplace
     *
     * Replace this participant with the specified user and/or address.
     *
     */
    public function testPostConversationParticipantReplace()
    {
    }

    /**
     * Test case for postConversationParticipantSecureivrsessions
     *
     * Create secure IVR session. Only a participant in the conversation can invoke a secure IVR..
     *
     */
    public function testPostConversationParticipantSecureivrsessions()
    {
    }

    /**
     * Test case for postConversationsCall
     *
     * Place a new call as part of a callback conversation..
     *
     */
    public function testPostConversationsCall()
    {
    }

    /**
     * Test case for postConversationsCallParticipantConsult
     *
     * Initiate and update consult transfer.
     *
     */
    public function testPostConversationsCallParticipantConsult()
    {
    }

    /**
     * Test case for postConversationsCallParticipantMonitor
     *
     * Listen in on the conversation from the point of view of a given participant..
     *
     */
    public function testPostConversationsCallParticipantMonitor()
    {
    }

    /**
     * Test case for postConversationsCallParticipantReplace
     *
     * Replace this participant with the specified user and/or address.
     *
     */
    public function testPostConversationsCallParticipantReplace()
    {
    }

    /**
     * Test case for postConversationsCallParticipants
     *
     * Add participants to a conversation.
     *
     */
    public function testPostConversationsCallParticipants()
    {
    }

    /**
     * Test case for postConversationsCallbackParticipantReplace
     *
     * Replace this participant with the specified user and/or address.
     *
     */
    public function testPostConversationsCallbackParticipantReplace()
    {
    }

    /**
     * Test case for postConversationsCallbacks
     *
     * Create a Callback.
     *
     */
    public function testPostConversationsCallbacks()
    {
    }

    /**
     * Test case for postConversationsCalls
     *
     * Create a call conversation.
     *
     */
    public function testPostConversationsCalls()
    {
    }

    /**
     * Test case for postConversationsChatCommunicationMessages
     *
     * Send a message on behalf of a communication in a chat conversation..
     *
     */
    public function testPostConversationsChatCommunicationMessages()
    {
    }

    /**
     * Test case for postConversationsChatCommunicationTyping
     *
     * Send a typing-indicator on behalf of a communication in a chat conversation..
     *
     */
    public function testPostConversationsChatCommunicationTyping()
    {
    }

    /**
     * Test case for postConversationsChatParticipantReplace
     *
     * Replace this participant with the specified user and/or address.
     *
     */
    public function testPostConversationsChatParticipantReplace()
    {
    }

    /**
     * Test case for postConversationsChats
     *
     * Create a web chat conversation.
     *
     */
    public function testPostConversationsChats()
    {
    }

    /**
     * Test case for postConversationsCobrowsesessionParticipantReplace
     *
     * Replace this participant with the specified user and/or address.
     *
     */
    public function testPostConversationsCobrowsesessionParticipantReplace()
    {
    }

    /**
     * Test case for postConversationsEmailInboundmessages
     *
     * Send an email to an external conversation. An external conversation is one where the provider is not PureCloud based. This endpoint allows the sender of the external email to reply or send a new message to the existing conversation. The new message will be treated as part of the existing conversation and chained to it..
     *
     */
    public function testPostConversationsEmailInboundmessages()
    {
    }

    /**
     * Test case for postConversationsEmailMessages
     *
     * Send an email reply.
     *
     */
    public function testPostConversationsEmailMessages()
    {
    }

    /**
     * Test case for postConversationsEmailParticipantReplace
     *
     * Replace this participant with the specified user and/or address.
     *
     */
    public function testPostConversationsEmailParticipantReplace()
    {
    }

    /**
     * Test case for postConversationsEmails
     *
     * Create an email conversation.
     *
     */
    public function testPostConversationsEmails()
    {
    }

    /**
     * Test case for postConversationsFaxes
     *
     * Create Fax Conversation.
     *
     */
    public function testPostConversationsFaxes()
    {
    }

    /**
     * Test case for postConversationsMessageCommunicationMessages
     *
     * Send message.
     *
     */
    public function testPostConversationsMessageCommunicationMessages()
    {
    }

    /**
     * Test case for postConversationsMessageCommunicationMessagesMedia
     *
     * Create media.
     *
     */
    public function testPostConversationsMessageCommunicationMessagesMedia()
    {
    }

    /**
     * Test case for postConversationsMessageMessagesBulk
     *
     * Get messages in batch.
     *
     */
    public function testPostConversationsMessageMessagesBulk()
    {
    }

    /**
     * Test case for postConversationsMessageParticipantReplace
     *
     * Replace this participant with the specified user and/or address.
     *
     */
    public function testPostConversationsMessageParticipantReplace()
    {
    }

    /**
     * Test case for postConversationsMessages
     *
     * Create an outbound messaging conversation..
     *
     */
    public function testPostConversationsMessages()
    {
    }

    /**
     * Test case for postConversationsMessagingIntegrationsFacebook
     *
     * Create a Facebook Integration.
     *
     */
    public function testPostConversationsMessagingIntegrationsFacebook()
    {
    }

    /**
     * Test case for postConversationsMessagingIntegrationsLine
     *
     * Create a LINE messenger Integration.
     *
     */
    public function testPostConversationsMessagingIntegrationsLine()
    {
    }

    /**
     * Test case for postConversationsMessagingIntegrationsTwitter
     *
     * Create a Twitter Integration.
     *
     */
    public function testPostConversationsMessagingIntegrationsTwitter()
    {
    }

    /**
     * Test case for putConversationParticipantFlaggedreason
     *
     * Set flagged reason on conversation participant to indicate bad conversation quality..
     *
     */
    public function testPutConversationParticipantFlaggedreason()
    {
    }

    /**
     * Test case for putConversationsCallParticipantCommunicationUuidata
     *
     * Set uuiData to be sent on future commands..
     *
     */
    public function testPutConversationsCallParticipantCommunicationUuidata()
    {
    }

    /**
     * Test case for putConversationsEmailMessagesDraft
     *
     * Update conversation draft reply.
     *
     */
    public function testPutConversationsEmailMessagesDraft()
    {
    }

    /**
     * Test case for putConversationsMessagingIntegrationsLineIntegrationId
     *
     * Update a LINE messenger integration.
     *
     */
    public function testPutConversationsMessagingIntegrationsLineIntegrationId()
    {
    }
}
