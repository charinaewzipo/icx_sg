<?php
/**
 * AuthorizationApiTest
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace PureCloudPlatform\Client\V2;

use \PureCloudPlatform\Client\V2\Configuration;
use \PureCloudPlatform\Client\V2\ApiException;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * AuthorizationApiTest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthorizationApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deleteAuthorizationDivision
     *
     * Delete a division..
     *
     */
    public function testDeleteAuthorizationDivision()
    {
    }

    /**
     * Test case for deleteAuthorizationRole
     *
     * Delete an organization role..
     *
     */
    public function testDeleteAuthorizationRole()
    {
    }

    /**
     * Test case for deleteAuthorizationSubjectDivisionRole
     *
     * Delete a grant of a role in a division.
     *
     */
    public function testDeleteAuthorizationSubjectDivisionRole()
    {
    }

    /**
     * Test case for deleteUserRoles
     *
     * Removes all the roles from the user..
     *
     */
    public function testDeleteUserRoles()
    {
    }

    /**
     * Test case for getAuthorizationDivision
     *
     * Returns an authorization division..
     *
     */
    public function testGetAuthorizationDivision()
    {
    }

    /**
     * Test case for getAuthorizationDivisions
     *
     * Retrieve a list of all divisions defined for the organization.
     *
     */
    public function testGetAuthorizationDivisions()
    {
    }

    /**
     * Test case for getAuthorizationDivisionsHome
     *
     * Retrieve the home division for the organization..
     *
     */
    public function testGetAuthorizationDivisionsHome()
    {
    }

    /**
     * Test case for getAuthorizationDivisionsLimit
     *
     * Returns the maximum allowed number of divisions..
     *
     */
    public function testGetAuthorizationDivisionsLimit()
    {
    }

    /**
     * Test case for getAuthorizationDivisionspermittedMe
     *
     * Returns whether or not current user can perform the specified action(s)..
     *
     */
    public function testGetAuthorizationDivisionspermittedMe()
    {
    }

    /**
     * Test case for getAuthorizationDivisionspermittedSubjectId
     *
     * Returns whether or not specified user can perform the specified action(s)..
     *
     */
    public function testGetAuthorizationDivisionspermittedSubjectId()
    {
    }

    /**
     * Test case for getAuthorizationPermissions
     *
     * Get all permissions..
     *
     */
    public function testGetAuthorizationPermissions()
    {
    }

    /**
     * Test case for getAuthorizationProducts
     *
     * Get the list of enabled products.
     *
     */
    public function testGetAuthorizationProducts()
    {
    }

    /**
     * Test case for getAuthorizationRole
     *
     * Get a single organization role..
     *
     */
    public function testGetAuthorizationRole()
    {
    }

    /**
     * Test case for getAuthorizationRoleComparedefaultRightRoleId
     *
     * Get an org role to default role comparison.
     *
     */
    public function testGetAuthorizationRoleComparedefaultRightRoleId()
    {
    }

    /**
     * Test case for getAuthorizationRoleSubjectgrants
     *
     * Get the subjects' granted divisions in the specified role..
     *
     */
    public function testGetAuthorizationRoleSubjectgrants()
    {
    }

    /**
     * Test case for getAuthorizationRoleUsers
     *
     * Get a list of the users in a specified role..
     *
     */
    public function testGetAuthorizationRoleUsers()
    {
    }

    /**
     * Test case for getAuthorizationRoles
     *
     * Retrieve a list of all roles defined for the organization.
     *
     */
    public function testGetAuthorizationRoles()
    {
    }

    /**
     * Test case for getAuthorizationSubject
     *
     * Returns a listing of roles and permissions for a user..
     *
     */
    public function testGetAuthorizationSubject()
    {
    }

    /**
     * Test case for getAuthorizationSubjectsMe
     *
     * Returns a listing of roles and permissions for the currently authenticated user..
     *
     */
    public function testGetAuthorizationSubjectsMe()
    {
    }

    /**
     * Test case for getAuthorizationSubjectsRolecounts
     *
     * Get the count of roles granted to a list of subjects.
     *
     */
    public function testGetAuthorizationSubjectsRolecounts()
    {
    }

    /**
     * Test case for getUserRoles
     *
     * Returns a listing of roles and permissions for a user..
     *
     */
    public function testGetUserRoles()
    {
    }

    /**
     * Test case for patchAuthorizationRole
     *
     * Patch Organization Role for needsUpdate Field.
     *
     */
    public function testPatchAuthorizationRole()
    {
    }

    /**
     * Test case for postAuthorizationDivisionObject
     *
     * Assign a list of objects to a division.
     *
     */
    public function testPostAuthorizationDivisionObject()
    {
    }

    /**
     * Test case for postAuthorizationDivisions
     *
     * Create a division..
     *
     */
    public function testPostAuthorizationDivisions()
    {
    }

    /**
     * Test case for postAuthorizationRole
     *
     * Bulk-grant subjects and divisions with an organization role..
     *
     */
    public function testPostAuthorizationRole()
    {
    }

    /**
     * Test case for postAuthorizationRoleComparedefaultRightRoleId
     *
     * Get an unsaved org role to default role comparison.
     *
     */
    public function testPostAuthorizationRoleComparedefaultRightRoleId()
    {
    }

    /**
     * Test case for postAuthorizationRoles
     *
     * Create an organization role..
     *
     */
    public function testPostAuthorizationRoles()
    {
    }

    /**
     * Test case for postAuthorizationRolesDefault
     *
     * Restores all default roles.
     *
     */
    public function testPostAuthorizationRolesDefault()
    {
    }

    /**
     * Test case for postAuthorizationSubjectBulkadd
     *
     * Bulk-grant roles and divisions to a subject..
     *
     */
    public function testPostAuthorizationSubjectBulkadd()
    {
    }

    /**
     * Test case for postAuthorizationSubjectBulkremove
     *
     * Bulk-remove grants from a subject..
     *
     */
    public function testPostAuthorizationSubjectBulkremove()
    {
    }

    /**
     * Test case for postAuthorizationSubjectDivisionRole
     *
     * Make a grant of a role in a division.
     *
     */
    public function testPostAuthorizationSubjectDivisionRole()
    {
    }

    /**
     * Test case for putAuthorizationDivision
     *
     * Update a division..
     *
     */
    public function testPutAuthorizationDivision()
    {
    }

    /**
     * Test case for putAuthorizationRole
     *
     * Update an organization role..
     *
     */
    public function testPutAuthorizationRole()
    {
    }

    /**
     * Test case for putAuthorizationRoleUsersAdd
     *
     * Sets the users for the role.
     *
     */
    public function testPutAuthorizationRoleUsersAdd()
    {
    }

    /**
     * Test case for putAuthorizationRoleUsersRemove
     *
     * Removes the users from the role.
     *
     */
    public function testPutAuthorizationRoleUsersRemove()
    {
    }

    /**
     * Test case for putAuthorizationRolesDefault
     *
     * Restore specified default roles.
     *
     */
    public function testPutAuthorizationRolesDefault()
    {
    }

    /**
     * Test case for putUserRoles
     *
     * Sets the user's roles.
     *
     */
    public function testPutUserRoles()
    {
    }
}
