<?php
/**
 * IntegrationsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace PureCloudPlatform\Client\V2;

use \PureCloudPlatform\Client\V2\Configuration;
use \PureCloudPlatform\Client\V2\ApiException;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * IntegrationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for deleteIntegration
     *
     * Delete integration..
     *
     */
    public function testDeleteIntegration()
    {
    }

    /**
     * Test case for deleteIntegrationsAction
     *
     * Delete an Action.
     *
     */
    public function testDeleteIntegrationsAction()
    {
    }

    /**
     * Test case for deleteIntegrationsActionDraft
     *
     * Delete a Draft.
     *
     */
    public function testDeleteIntegrationsActionDraft()
    {
    }

    /**
     * Test case for deleteIntegrationsCredential
     *
     * Delete a set of credentials.
     *
     */
    public function testDeleteIntegrationsCredential()
    {
    }

    /**
     * Test case for getIntegration
     *
     * Get integration..
     *
     */
    public function testGetIntegration()
    {
    }

    /**
     * Test case for getIntegrationConfigCurrent
     *
     * Get integration configuration..
     *
     */
    public function testGetIntegrationConfigCurrent()
    {
    }

    /**
     * Test case for getIntegrations
     *
     * List integrations.
     *
     */
    public function testGetIntegrations()
    {
    }

    /**
     * Test case for getIntegrationsAction
     *
     * Retrieves a single Action matching id..
     *
     */
    public function testGetIntegrationsAction()
    {
    }

    /**
     * Test case for getIntegrationsActionDraft
     *
     * Retrieve a Draft.
     *
     */
    public function testGetIntegrationsActionDraft()
    {
    }

    /**
     * Test case for getIntegrationsActionDraftSchema
     *
     * Retrieve schema for a Draft based on filename..
     *
     */
    public function testGetIntegrationsActionDraftSchema()
    {
    }

    /**
     * Test case for getIntegrationsActionDraftTemplate
     *
     * Retrieve templates for a Draft based on filename..
     *
     */
    public function testGetIntegrationsActionDraftTemplate()
    {
    }

    /**
     * Test case for getIntegrationsActionDraftValidation
     *
     * Validate current Draft configuration..
     *
     */
    public function testGetIntegrationsActionDraftValidation()
    {
    }

    /**
     * Test case for getIntegrationsActionSchema
     *
     * Retrieve schema for an action based on filename..
     *
     */
    public function testGetIntegrationsActionSchema()
    {
    }

    /**
     * Test case for getIntegrationsActionTemplate
     *
     * Retrieve text of templates for an action based on filename..
     *
     */
    public function testGetIntegrationsActionTemplate()
    {
    }

    /**
     * Test case for getIntegrationsActions
     *
     * Retrieves all actions associated with filters passed in via query param..
     *
     */
    public function testGetIntegrationsActions()
    {
    }

    /**
     * Test case for getIntegrationsActionsCategories
     *
     * Retrieves all categories of available Actions.
     *
     */
    public function testGetIntegrationsActionsCategories()
    {
    }

    /**
     * Test case for getIntegrationsActionsDrafts
     *
     * Retrieves all action drafts associated with the filters passed in via query param..
     *
     */
    public function testGetIntegrationsActionsDrafts()
    {
    }

    /**
     * Test case for getIntegrationsClientapps
     *
     * List permitted client app integrations for the logged in user.
     *
     */
    public function testGetIntegrationsClientapps()
    {
    }

    /**
     * Test case for getIntegrationsCredential
     *
     * Get a single credential with sensitive fields redacted.
     *
     */
    public function testGetIntegrationsCredential()
    {
    }

    /**
     * Test case for getIntegrationsCredentials
     *
     * List multiple sets of credentials.
     *
     */
    public function testGetIntegrationsCredentials()
    {
    }

    /**
     * Test case for getIntegrationsCredentialsTypes
     *
     * List all credential types.
     *
     */
    public function testGetIntegrationsCredentialsTypes()
    {
    }

    /**
     * Test case for getIntegrationsEventlog
     *
     * List all events.
     *
     */
    public function testGetIntegrationsEventlog()
    {
    }

    /**
     * Test case for getIntegrationsEventlogEventId
     *
     * Get a single event.
     *
     */
    public function testGetIntegrationsEventlogEventId()
    {
    }

    /**
     * Test case for getIntegrationsSpeechDialogflowAgent
     *
     * Get details about a Dialogflow agent.
     *
     */
    public function testGetIntegrationsSpeechDialogflowAgent()
    {
    }

    /**
     * Test case for getIntegrationsSpeechDialogflowAgents
     *
     * Get a list of Dialogflow agents in the customers' Google accounts.
     *
     */
    public function testGetIntegrationsSpeechDialogflowAgents()
    {
    }

    /**
     * Test case for getIntegrationsSpeechLexBotAlias
     *
     * Get details about a Lex bot alias.
     *
     */
    public function testGetIntegrationsSpeechLexBotAlias()
    {
    }

    /**
     * Test case for getIntegrationsSpeechLexBotBotIdAliases
     *
     * Get a list of aliases for a bot in the customer's AWS accounts.
     *
     */
    public function testGetIntegrationsSpeechLexBotBotIdAliases()
    {
    }

    /**
     * Test case for getIntegrationsSpeechLexBots
     *
     * Get a list of Lex bots in the customers' AWS accounts.
     *
     */
    public function testGetIntegrationsSpeechLexBots()
    {
    }

    /**
     * Test case for getIntegrationsSpeechTtsEngine
     *
     * Get details about a TTS engine.
     *
     */
    public function testGetIntegrationsSpeechTtsEngine()
    {
    }

    /**
     * Test case for getIntegrationsSpeechTtsEngineVoice
     *
     * Get details about a specific voice for a TTS engine.
     *
     */
    public function testGetIntegrationsSpeechTtsEngineVoice()
    {
    }

    /**
     * Test case for getIntegrationsSpeechTtsEngineVoices
     *
     * Get a list of voices for a TTS engine.
     *
     */
    public function testGetIntegrationsSpeechTtsEngineVoices()
    {
    }

    /**
     * Test case for getIntegrationsSpeechTtsEngines
     *
     * Get a list of TTS engines enabled for org.
     *
     */
    public function testGetIntegrationsSpeechTtsEngines()
    {
    }

    /**
     * Test case for getIntegrationsSpeechTtsSettings
     *
     * Get TTS settings for an org.
     *
     */
    public function testGetIntegrationsSpeechTtsSettings()
    {
    }

    /**
     * Test case for getIntegrationsType
     *
     * Get integration type..
     *
     */
    public function testGetIntegrationsType()
    {
    }

    /**
     * Test case for getIntegrationsTypeConfigschema
     *
     * Get properties config schema for an integration type..
     *
     */
    public function testGetIntegrationsTypeConfigschema()
    {
    }

    /**
     * Test case for getIntegrationsTypes
     *
     * List integration types.
     *
     */
    public function testGetIntegrationsTypes()
    {
    }

    /**
     * Test case for patchIntegration
     *
     * Update an integration..
     *
     */
    public function testPatchIntegration()
    {
    }

    /**
     * Test case for patchIntegrationsAction
     *
     * Patch an Action.
     *
     */
    public function testPatchIntegrationsAction()
    {
    }

    /**
     * Test case for patchIntegrationsActionDraft
     *
     * Update an existing Draft.
     *
     */
    public function testPatchIntegrationsActionDraft()
    {
    }

    /**
     * Test case for postIntegrations
     *
     * Create an integration..
     *
     */
    public function testPostIntegrations()
    {
    }

    /**
     * Test case for postIntegrationsActionDraft
     *
     * Create a new Draft from existing Action.
     *
     */
    public function testPostIntegrationsActionDraft()
    {
    }

    /**
     * Test case for postIntegrationsActionDraftPublish
     *
     * Publish a Draft and make it the active Action configuration.
     *
     */
    public function testPostIntegrationsActionDraftPublish()
    {
    }

    /**
     * Test case for postIntegrationsActionDraftTest
     *
     * Test the execution of a draft. Responses will show execution steps broken out with intermediate results to help in debugging..
     *
     */
    public function testPostIntegrationsActionDraftTest()
    {
    }

    /**
     * Test case for postIntegrationsActionExecute
     *
     * Execute Action and return response from 3rd party.  Responses will follow the schemas defined on the Action for success and error..
     *
     */
    public function testPostIntegrationsActionExecute()
    {
    }

    /**
     * Test case for postIntegrationsActionTest
     *
     * Test the execution of an action. Responses will show execution steps broken out with intermediate results to help in debugging..
     *
     */
    public function testPostIntegrationsActionTest()
    {
    }

    /**
     * Test case for postIntegrationsActions
     *
     * Create a new Action.
     *
     */
    public function testPostIntegrationsActions()
    {
    }

    /**
     * Test case for postIntegrationsActionsDrafts
     *
     * Create a new Draft.
     *
     */
    public function testPostIntegrationsActionsDrafts()
    {
    }

    /**
     * Test case for postIntegrationsCredentials
     *
     * Create a set of credentials.
     *
     */
    public function testPostIntegrationsCredentials()
    {
    }

    /**
     * Test case for postIntegrationsWorkforcemanagementVendorconnection
     *
     * Add a vendor connection.
     *
     */
    public function testPostIntegrationsWorkforcemanagementVendorconnection()
    {
    }

    /**
     * Test case for putIntegrationConfigCurrent
     *
     * Update integration configuration..
     *
     */
    public function testPutIntegrationConfigCurrent()
    {
    }

    /**
     * Test case for putIntegrationsCredential
     *
     * Update a set of credentials.
     *
     */
    public function testPutIntegrationsCredential()
    {
    }

    /**
     * Test case for putIntegrationsSpeechTtsSettings
     *
     * Update TTS settings for an org.
     *
     */
    public function testPutIntegrationsSpeechTtsSettings()
    {
    }
}
