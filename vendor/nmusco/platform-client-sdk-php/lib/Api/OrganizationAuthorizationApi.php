<?php
/**
 * OrganizationAuthorizationApi
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PureCloudPlatform\Client\V2\ApiException;
use PureCloudPlatform\Client\V2\Configuration;
use PureCloudPlatform\Client\V2\HeaderSelector;
use PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * OrganizationAuthorizationApi Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationAuthorizationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteOrgauthorizationTrustee
     *
     * Delete Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrgauthorizationTrustee($trusteeOrgId)
    {
        $this->deleteOrgauthorizationTrusteeWithHttpInfo($trusteeOrgId);
    }

    /**
     * Operation deleteOrgauthorizationTrusteeWithHttpInfo
     *
     * Delete Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrgauthorizationTrusteeWithHttpInfo($trusteeOrgId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrusteeRequest($trusteeOrgId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrgauthorizationTrusteeAsync
     *
     * Delete Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrusteeAsync($trusteeOrgId)
    {
        return $this->deleteOrgauthorizationTrusteeAsyncWithHttpInfo($trusteeOrgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrgauthorizationTrusteeAsyncWithHttpInfo
     *
     * Delete Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrusteeAsyncWithHttpInfo($trusteeOrgId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrusteeRequest($trusteeOrgId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrgauthorizationTrustee'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrgauthorizationTrusteeRequest($trusteeOrgId)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling deleteOrgauthorizationTrustee'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUser
     *
     * Delete Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrgauthorizationTrusteeUser($trusteeOrgId, $trusteeUserId)
    {
        $this->deleteOrgauthorizationTrusteeUserWithHttpInfo($trusteeOrgId, $trusteeUserId);
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUserWithHttpInfo
     *
     * Delete Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrgauthorizationTrusteeUserWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrusteeUserRequest($trusteeOrgId, $trusteeUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUserAsync
     *
     * Delete Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrusteeUserAsync($trusteeOrgId, $trusteeUserId)
    {
        return $this->deleteOrgauthorizationTrusteeUserAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUserAsyncWithHttpInfo
     *
     * Delete Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrusteeUserAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrusteeUserRequest($trusteeOrgId, $trusteeUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrgauthorizationTrusteeUser'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrgauthorizationTrusteeUserRequest($trusteeOrgId, $trusteeUserId)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling deleteOrgauthorizationTrusteeUser'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling deleteOrgauthorizationTrusteeUser'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUserRoles
     *
     * Delete Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrgauthorizationTrusteeUserRoles($trusteeOrgId, $trusteeUserId)
    {
        $this->deleteOrgauthorizationTrusteeUserRolesWithHttpInfo($trusteeOrgId, $trusteeUserId);
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUserRolesWithHttpInfo
     *
     * Delete Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrgauthorizationTrusteeUserRolesWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUserRolesAsync
     *
     * Delete Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrusteeUserRolesAsync($trusteeOrgId, $trusteeUserId)
    {
        return $this->deleteOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo
     *
     * Delete Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrgauthorizationTrusteeUserRoles'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling deleteOrgauthorizationTrusteeUserRoles'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling deleteOrgauthorizationTrusteeUserRoles'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrgauthorizationTrustor
     *
     * Delete Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrgauthorizationTrustor($trustorOrgId)
    {
        $this->deleteOrgauthorizationTrustorWithHttpInfo($trustorOrgId);
    }

    /**
     * Operation deleteOrgauthorizationTrustorWithHttpInfo
     *
     * Delete Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrgauthorizationTrustorWithHttpInfo($trustorOrgId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrustorRequest($trustorOrgId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrgauthorizationTrustorAsync
     *
     * Delete Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrustorAsync($trustorOrgId)
    {
        return $this->deleteOrgauthorizationTrustorAsyncWithHttpInfo($trustorOrgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrgauthorizationTrustorAsyncWithHttpInfo
     *
     * Delete Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrustorAsyncWithHttpInfo($trustorOrgId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrustorRequest($trustorOrgId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrgauthorizationTrustor'
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrgauthorizationTrustorRequest($trustorOrgId)
    {
        // verify the required parameter 'trustorOrgId' is set
        if ($trustorOrgId === null || (is_array($trustorOrgId) && count($trustorOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trustorOrgId when calling deleteOrgauthorizationTrustor'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustors/{trustorOrgId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trustorOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trustorOrgId' . '}',
                ObjectSerializer::toPathValue($trustorOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteOrgauthorizationTrustorUser
     *
     * Delete Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrgauthorizationTrustorUser($trustorOrgId, $trusteeUserId)
    {
        $this->deleteOrgauthorizationTrustorUserWithHttpInfo($trustorOrgId, $trusteeUserId);
    }

    /**
     * Operation deleteOrgauthorizationTrustorUserWithHttpInfo
     *
     * Delete Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrgauthorizationTrustorUserWithHttpInfo($trustorOrgId, $trusteeUserId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrgauthorizationTrustorUserAsync
     *
     * Delete Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrustorUserAsync($trustorOrgId, $trusteeUserId)
    {
        return $this->deleteOrgauthorizationTrustorUserAsyncWithHttpInfo($trustorOrgId, $trusteeUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrgauthorizationTrustorUserAsyncWithHttpInfo
     *
     * Delete Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrgauthorizationTrustorUserAsyncWithHttpInfo($trustorOrgId, $trusteeUserId)
    {
        $returnType = '';
        $request = $this->deleteOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrgauthorizationTrustorUser'
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId)
    {
        // verify the required parameter 'trustorOrgId' is set
        if ($trustorOrgId === null || (is_array($trustorOrgId) && count($trustorOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trustorOrgId when calling deleteOrgauthorizationTrustorUser'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling deleteOrgauthorizationTrustorUser'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trustorOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trustorOrgId' . '}',
                ObjectSerializer::toPathValue($trustorOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationPairing
     *
     * Get Pairing Info
     *
     * @param  string $pairingId Pairing Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustRequest
     */
    public function getOrgauthorizationPairing($pairingId)
    {
        list($response) = $this->getOrgauthorizationPairingWithHttpInfo($pairingId);
        return $response;
    }

    /**
     * Operation getOrgauthorizationPairingWithHttpInfo
     *
     * Get Pairing Info
     *
     * @param  string $pairingId Pairing Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationPairingWithHttpInfo($pairingId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustRequest';
        $request = $this->getOrgauthorizationPairingRequest($pairingId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationPairingAsync
     *
     * Get Pairing Info
     *
     * @param  string $pairingId Pairing Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationPairingAsync($pairingId)
    {
        return $this->getOrgauthorizationPairingAsyncWithHttpInfo($pairingId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationPairingAsyncWithHttpInfo
     *
     * Get Pairing Info
     *
     * @param  string $pairingId Pairing Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationPairingAsyncWithHttpInfo($pairingId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustRequest';
        $request = $this->getOrgauthorizationPairingRequest($pairingId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationPairing'
     *
     * @param  string $pairingId Pairing Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationPairingRequest($pairingId)
    {
        // verify the required parameter 'pairingId' is set
        if ($pairingId === null || (is_array($pairingId) && count($pairingId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pairingId when calling getOrgauthorizationPairing'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/pairings/{pairingId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($pairingId !== null) {
            $resourcePath = str_replace(
                '{' . 'pairingId' . '}',
                ObjectSerializer::toPathValue($pairingId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrustee
     *
     * Get Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Trustee
     */
    public function getOrgauthorizationTrustee($trusteeOrgId)
    {
        list($response) = $this->getOrgauthorizationTrusteeWithHttpInfo($trusteeOrgId);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrusteeWithHttpInfo
     *
     * Get Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Trustee, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrusteeWithHttpInfo($trusteeOrgId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustee';
        $request = $this->getOrgauthorizationTrusteeRequest($trusteeOrgId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Trustee',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrusteeAsync
     *
     * Get Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeAsync($trusteeOrgId)
    {
        return $this->getOrgauthorizationTrusteeAsyncWithHttpInfo($trusteeOrgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrusteeAsyncWithHttpInfo
     *
     * Get Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeAsyncWithHttpInfo($trusteeOrgId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustee';
        $request = $this->getOrgauthorizationTrusteeRequest($trusteeOrgId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrustee'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrusteeRequest($trusteeOrgId)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling getOrgauthorizationTrustee'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrusteeUser
     *
     * Get Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustUser
     */
    public function getOrgauthorizationTrusteeUser($trusteeOrgId, $trusteeUserId)
    {
        list($response) = $this->getOrgauthorizationTrusteeUserWithHttpInfo($trusteeOrgId, $trusteeUserId);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrusteeUserWithHttpInfo
     *
     * Get Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrusteeUserWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->getOrgauthorizationTrusteeUserRequest($trusteeOrgId, $trusteeUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrusteeUserAsync
     *
     * Get Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeUserAsync($trusteeOrgId, $trusteeUserId)
    {
        return $this->getOrgauthorizationTrusteeUserAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrusteeUserAsyncWithHttpInfo
     *
     * Get Trustee User
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeUserAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->getOrgauthorizationTrusteeUserRequest($trusteeOrgId, $trusteeUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrusteeUser'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrusteeUserRequest($trusteeOrgId, $trusteeUserId)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling getOrgauthorizationTrusteeUser'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling getOrgauthorizationTrusteeUser'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrusteeUserRoles
     *
     * Get Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\UserAuthorization
     */
    public function getOrgauthorizationTrusteeUserRoles($trusteeOrgId, $trusteeUserId)
    {
        list($response) = $this->getOrgauthorizationTrusteeUserRolesWithHttpInfo($trusteeOrgId, $trusteeUserId);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrusteeUserRolesWithHttpInfo
     *
     * Get Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\UserAuthorization, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrusteeUserRolesWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\UserAuthorization';
        $request = $this->getOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\UserAuthorization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrusteeUserRolesAsync
     *
     * Get Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeUserRolesAsync($trusteeOrgId, $trusteeUserId)
    {
        return $this->getOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo
     *
     * Get Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\UserAuthorization';
        $request = $this->getOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrusteeUserRoles'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling getOrgauthorizationTrusteeUserRoles'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling getOrgauthorizationTrusteeUserRoles'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrusteeUsers
     *
     * The list of trustee users for this organization (i.e. users granted access to this organization).
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustUserEntityListing
     */
    public function getOrgauthorizationTrusteeUsers($trusteeOrgId, $pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getOrgauthorizationTrusteeUsersWithHttpInfo($trusteeOrgId, $pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrusteeUsersWithHttpInfo
     *
     * The list of trustee users for this organization (i.e. users granted access to this organization).
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustUserEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrusteeUsersWithHttpInfo($trusteeOrgId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUserEntityListing';
        $request = $this->getOrgauthorizationTrusteeUsersRequest($trusteeOrgId, $pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustUserEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrusteeUsersAsync
     *
     * The list of trustee users for this organization (i.e. users granted access to this organization).
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeUsersAsync($trusteeOrgId, $pageSize = '25', $pageNumber = '1')
    {
        return $this->getOrgauthorizationTrusteeUsersAsyncWithHttpInfo($trusteeOrgId, $pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrusteeUsersAsyncWithHttpInfo
     *
     * The list of trustee users for this organization (i.e. users granted access to this organization).
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteeUsersAsyncWithHttpInfo($trusteeOrgId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUserEntityListing';
        $request = $this->getOrgauthorizationTrusteeUsersRequest($trusteeOrgId, $pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrusteeUsers'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrusteeUsersRequest($trusteeOrgId, $pageSize = '25', $pageNumber = '1')
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling getOrgauthorizationTrusteeUsers'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }

        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrustees
     *
     * The list of trustees for this organization (i.e. organizations granted access to this organization).
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustEntityListing
     */
    public function getOrgauthorizationTrustees($pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getOrgauthorizationTrusteesWithHttpInfo($pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrusteesWithHttpInfo
     *
     * The list of trustees for this organization (i.e. organizations granted access to this organization).
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrusteesWithHttpInfo($pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustEntityListing';
        $request = $this->getOrgauthorizationTrusteesRequest($pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrusteesAsync
     *
     * The list of trustees for this organization (i.e. organizations granted access to this organization).
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteesAsync($pageSize = '25', $pageNumber = '1')
    {
        return $this->getOrgauthorizationTrusteesAsyncWithHttpInfo($pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrusteesAsyncWithHttpInfo
     *
     * The list of trustees for this organization (i.e. organizations granted access to this organization).
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrusteesAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustEntityListing';
        $request = $this->getOrgauthorizationTrusteesRequest($pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrustees'
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrusteesRequest($pageSize = '25', $pageNumber = '1')
    {

        $resourcePath = '/api/v2/orgauthorization/trustees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrustor
     *
     * Get Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Trustor
     */
    public function getOrgauthorizationTrustor($trustorOrgId)
    {
        list($response) = $this->getOrgauthorizationTrustorWithHttpInfo($trustorOrgId);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrustorWithHttpInfo
     *
     * Get Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Trustor, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrustorWithHttpInfo($trustorOrgId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustor';
        $request = $this->getOrgauthorizationTrustorRequest($trustorOrgId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Trustor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrustorAsync
     *
     * Get Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorAsync($trustorOrgId)
    {
        return $this->getOrgauthorizationTrustorAsyncWithHttpInfo($trustorOrgId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrustorAsyncWithHttpInfo
     *
     * Get Org Trust
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorAsyncWithHttpInfo($trustorOrgId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustor';
        $request = $this->getOrgauthorizationTrustorRequest($trustorOrgId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrustor'
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrustorRequest($trustorOrgId)
    {
        // verify the required parameter 'trustorOrgId' is set
        if ($trustorOrgId === null || (is_array($trustorOrgId) && count($trustorOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trustorOrgId when calling getOrgauthorizationTrustor'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustors/{trustorOrgId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trustorOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trustorOrgId' . '}',
                ObjectSerializer::toPathValue($trustorOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrustorUser
     *
     * Get Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustUser
     */
    public function getOrgauthorizationTrustorUser($trustorOrgId, $trusteeUserId)
    {
        list($response) = $this->getOrgauthorizationTrustorUserWithHttpInfo($trustorOrgId, $trusteeUserId);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrustorUserWithHttpInfo
     *
     * Get Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrustorUserWithHttpInfo($trustorOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->getOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrustorUserAsync
     *
     * Get Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorUserAsync($trustorOrgId, $trusteeUserId)
    {
        return $this->getOrgauthorizationTrustorUserAsyncWithHttpInfo($trustorOrgId, $trusteeUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrustorUserAsyncWithHttpInfo
     *
     * Get Trustee User
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorUserAsyncWithHttpInfo($trustorOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->getOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrustorUser'
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId)
    {
        // verify the required parameter 'trustorOrgId' is set
        if ($trustorOrgId === null || (is_array($trustorOrgId) && count($trustorOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trustorOrgId when calling getOrgauthorizationTrustorUser'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling getOrgauthorizationTrustorUser'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trustorOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trustorOrgId' . '}',
                ObjectSerializer::toPathValue($trustorOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrustorUsers
     *
     * The list of users in the trustor organization (i.e. users granted access).
     *
     * @param  string $trustorOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustUserEntityListing
     */
    public function getOrgauthorizationTrustorUsers($trustorOrgId, $pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getOrgauthorizationTrustorUsersWithHttpInfo($trustorOrgId, $pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrustorUsersWithHttpInfo
     *
     * The list of users in the trustor organization (i.e. users granted access).
     *
     * @param  string $trustorOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustUserEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrustorUsersWithHttpInfo($trustorOrgId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUserEntityListing';
        $request = $this->getOrgauthorizationTrustorUsersRequest($trustorOrgId, $pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustUserEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrustorUsersAsync
     *
     * The list of users in the trustor organization (i.e. users granted access).
     *
     * @param  string $trustorOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorUsersAsync($trustorOrgId, $pageSize = '25', $pageNumber = '1')
    {
        return $this->getOrgauthorizationTrustorUsersAsyncWithHttpInfo($trustorOrgId, $pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrustorUsersAsyncWithHttpInfo
     *
     * The list of users in the trustor organization (i.e. users granted access).
     *
     * @param  string $trustorOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorUsersAsyncWithHttpInfo($trustorOrgId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUserEntityListing';
        $request = $this->getOrgauthorizationTrustorUsersRequest($trustorOrgId, $pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrustorUsers'
     *
     * @param  string $trustorOrgId Trustee Organization Id (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrustorUsersRequest($trustorOrgId, $pageSize = '25', $pageNumber = '1')
    {
        // verify the required parameter 'trustorOrgId' is set
        if ($trustorOrgId === null || (is_array($trustorOrgId) && count($trustorOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trustorOrgId when calling getOrgauthorizationTrustorUsers'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustors/{trustorOrgId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }

        // path params
        if ($trustorOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trustorOrgId' . '}',
                ObjectSerializer::toPathValue($trustorOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrgauthorizationTrustors
     *
     * The list of organizations that have authorized/trusted your organization.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustorEntityListing
     */
    public function getOrgauthorizationTrustors($pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getOrgauthorizationTrustorsWithHttpInfo($pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getOrgauthorizationTrustorsWithHttpInfo
     *
     * The list of organizations that have authorized/trusted your organization.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustorEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrgauthorizationTrustorsWithHttpInfo($pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustorEntityListing';
        $request = $this->getOrgauthorizationTrustorsRequest($pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustorEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrgauthorizationTrustorsAsync
     *
     * The list of organizations that have authorized/trusted your organization.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorsAsync($pageSize = '25', $pageNumber = '1')
    {
        return $this->getOrgauthorizationTrustorsAsyncWithHttpInfo($pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrgauthorizationTrustorsAsyncWithHttpInfo
     *
     * The list of organizations that have authorized/trusted your organization.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrgauthorizationTrustorsAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustorEntityListing';
        $request = $this->getOrgauthorizationTrustorsRequest($pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrgauthorizationTrustors'
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrgauthorizationTrustorsRequest($pageSize = '25', $pageNumber = '1')
    {

        $resourcePath = '/api/v2/orgauthorization/trustors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrgauthorizationPairings
     *
     * A pairing id is created by the trustee and given to the trustor to create a trust.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustRequestCreate $body Pairing Info (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustRequest
     */
    public function postOrgauthorizationPairings($body)
    {
        list($response) = $this->postOrgauthorizationPairingsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postOrgauthorizationPairingsWithHttpInfo
     *
     * A pairing id is created by the trustee and given to the trustor to create a trust.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustRequestCreate $body Pairing Info (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrgauthorizationPairingsWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustRequest';
        $request = $this->postOrgauthorizationPairingsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrgauthorizationPairingsAsync
     *
     * A pairing id is created by the trustee and given to the trustor to create a trust.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustRequestCreate $body Pairing Info (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationPairingsAsync($body)
    {
        return $this->postOrgauthorizationPairingsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrgauthorizationPairingsAsyncWithHttpInfo
     *
     * A pairing id is created by the trustee and given to the trustor to create a trust.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustRequestCreate $body Pairing Info (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationPairingsAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustRequest';
        $request = $this->postOrgauthorizationPairingsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrgauthorizationPairings'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustRequestCreate $body Pairing Info (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrgauthorizationPairingsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postOrgauthorizationPairings'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/pairings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrgauthorizationTrusteeUsers
     *
     * Add a user to the trust.
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TrustMemberCreate $body Trust (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustUser
     */
    public function postOrgauthorizationTrusteeUsers($trusteeOrgId, $body)
    {
        list($response) = $this->postOrgauthorizationTrusteeUsersWithHttpInfo($trusteeOrgId, $body);
        return $response;
    }

    /**
     * Operation postOrgauthorizationTrusteeUsersWithHttpInfo
     *
     * Add a user to the trust.
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TrustMemberCreate $body Trust (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrgauthorizationTrusteeUsersWithHttpInfo($trusteeOrgId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->postOrgauthorizationTrusteeUsersRequest($trusteeOrgId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrgauthorizationTrusteeUsersAsync
     *
     * Add a user to the trust.
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TrustMemberCreate $body Trust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrusteeUsersAsync($trusteeOrgId, $body)
    {
        return $this->postOrgauthorizationTrusteeUsersAsyncWithHttpInfo($trusteeOrgId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrgauthorizationTrusteeUsersAsyncWithHttpInfo
     *
     * Add a user to the trust.
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TrustMemberCreate $body Trust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrusteeUsersAsyncWithHttpInfo($trusteeOrgId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->postOrgauthorizationTrusteeUsersRequest($trusteeOrgId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrgauthorizationTrusteeUsers'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TrustMemberCreate $body Trust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrgauthorizationTrusteeUsersRequest($trusteeOrgId, $body)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling postOrgauthorizationTrusteeUsers'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postOrgauthorizationTrusteeUsers'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrgauthorizationTrustees
     *
     * Create a new organization authorization trust. This is required to grant other organizations access to your organization.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustCreate $body Trust (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Trustee
     */
    public function postOrgauthorizationTrustees($body)
    {
        list($response) = $this->postOrgauthorizationTrusteesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postOrgauthorizationTrusteesWithHttpInfo
     *
     * Create a new organization authorization trust. This is required to grant other organizations access to your organization.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustCreate $body Trust (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Trustee, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrgauthorizationTrusteesWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustee';
        $request = $this->postOrgauthorizationTrusteesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Trustee',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrgauthorizationTrusteesAsync
     *
     * Create a new organization authorization trust. This is required to grant other organizations access to your organization.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustCreate $body Trust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrusteesAsync($body)
    {
        return $this->postOrgauthorizationTrusteesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrgauthorizationTrusteesAsyncWithHttpInfo
     *
     * Create a new organization authorization trust. This is required to grant other organizations access to your organization.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustCreate $body Trust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrusteesAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustee';
        $request = $this->postOrgauthorizationTrusteesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrgauthorizationTrustees'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustCreate $body Trust (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrgauthorizationTrusteesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postOrgauthorizationTrustees'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrgauthorizationTrusteesAudits
     *
     * Get Org Trustee Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrusteeAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\AuditQueryResponse
     */
    public function postOrgauthorizationTrusteesAudits($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        list($response) = $this->postOrgauthorizationTrusteesAuditsWithHttpInfo($body, $pageSize, $pageNumber, $sortBy, $sortOrder);
        return $response;
    }

    /**
     * Operation postOrgauthorizationTrusteesAuditsWithHttpInfo
     *
     * Get Org Trustee Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrusteeAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\AuditQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrgauthorizationTrusteesAuditsWithHttpInfo($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\AuditQueryResponse';
        $request = $this->postOrgauthorizationTrusteesAuditsRequest($body, $pageSize, $pageNumber, $sortBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\AuditQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrgauthorizationTrusteesAuditsAsync
     *
     * Get Org Trustee Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrusteeAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrusteesAuditsAsync($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        return $this->postOrgauthorizationTrusteesAuditsAsyncWithHttpInfo($body, $pageSize, $pageNumber, $sortBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrgauthorizationTrusteesAuditsAsyncWithHttpInfo
     *
     * Get Org Trustee Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrusteeAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrusteesAuditsAsyncWithHttpInfo($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\AuditQueryResponse';
        $request = $this->postOrgauthorizationTrusteesAuditsRequest($body, $pageSize, $pageNumber, $sortBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrgauthorizationTrusteesAudits'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrusteeAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrgauthorizationTrusteesAuditsRequest($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postOrgauthorizationTrusteesAudits'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/audits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrgauthorizationTrustorAudits
     *
     * Get Org Trustor Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustorAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\AuditQueryResponse
     */
    public function postOrgauthorizationTrustorAudits($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        list($response) = $this->postOrgauthorizationTrustorAuditsWithHttpInfo($body, $pageSize, $pageNumber, $sortBy, $sortOrder);
        return $response;
    }

    /**
     * Operation postOrgauthorizationTrustorAuditsWithHttpInfo
     *
     * Get Org Trustor Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustorAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\AuditQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrgauthorizationTrustorAuditsWithHttpInfo($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\AuditQueryResponse';
        $request = $this->postOrgauthorizationTrustorAuditsRequest($body, $pageSize, $pageNumber, $sortBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\AuditQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrgauthorizationTrustorAuditsAsync
     *
     * Get Org Trustor Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustorAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrustorAuditsAsync($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        return $this->postOrgauthorizationTrustorAuditsAsyncWithHttpInfo($body, $pageSize, $pageNumber, $sortBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrgauthorizationTrustorAuditsAsyncWithHttpInfo
     *
     * Get Org Trustor Audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustorAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrgauthorizationTrustorAuditsAsyncWithHttpInfo($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\AuditQueryResponse';
        $request = $this->postOrgauthorizationTrustorAuditsRequest($body, $pageSize, $pageNumber, $sortBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrgauthorizationTrustorAudits'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\TrustorAuditQueryRequest $body Values to scope the request. (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy Sort by (optional, default to timestamp)
     * @param  string $sortOrder Sort order (optional, default to descending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrgauthorizationTrustorAuditsRequest($body, $pageSize = '25', $pageNumber = '1', $sortBy = 'timestamp', $sortOrder = 'descending')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postOrgauthorizationTrustorAudits'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustor/audits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrgauthorizationTrustee
     *
     * Update Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Trustee $body Client (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Trustee
     */
    public function putOrgauthorizationTrustee($trusteeOrgId, $body)
    {
        list($response) = $this->putOrgauthorizationTrusteeWithHttpInfo($trusteeOrgId, $body);
        return $response;
    }

    /**
     * Operation putOrgauthorizationTrusteeWithHttpInfo
     *
     * Update Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Trustee $body Client (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Trustee, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrgauthorizationTrusteeWithHttpInfo($trusteeOrgId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustee';
        $request = $this->putOrgauthorizationTrusteeRequest($trusteeOrgId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Trustee',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrgauthorizationTrusteeAsync
     *
     * Update Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Trustee $body Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrgauthorizationTrusteeAsync($trusteeOrgId, $body)
    {
        return $this->putOrgauthorizationTrusteeAsyncWithHttpInfo($trusteeOrgId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrgauthorizationTrusteeAsyncWithHttpInfo
     *
     * Update Org Trust
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Trustee $body Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrgauthorizationTrusteeAsyncWithHttpInfo($trusteeOrgId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Trustee';
        $request = $this->putOrgauthorizationTrusteeRequest($trusteeOrgId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrgauthorizationTrustee'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Trustee $body Client (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOrgauthorizationTrusteeRequest($trusteeOrgId, $body)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling putOrgauthorizationTrustee'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putOrgauthorizationTrustee'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrgauthorizationTrusteeUserRoles
     *
     * Update Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     * @param  string[] $body List of roles (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\UserAuthorization
     */
    public function putOrgauthorizationTrusteeUserRoles($trusteeOrgId, $trusteeUserId, $body)
    {
        list($response) = $this->putOrgauthorizationTrusteeUserRolesWithHttpInfo($trusteeOrgId, $trusteeUserId, $body);
        return $response;
    }

    /**
     * Operation putOrgauthorizationTrusteeUserRolesWithHttpInfo
     *
     * Update Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     * @param  string[] $body List of roles (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\UserAuthorization, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrgauthorizationTrusteeUserRolesWithHttpInfo($trusteeOrgId, $trusteeUserId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\UserAuthorization';
        $request = $this->putOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\UserAuthorization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrgauthorizationTrusteeUserRolesAsync
     *
     * Update Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     * @param  string[] $body List of roles (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrgauthorizationTrusteeUserRolesAsync($trusteeOrgId, $trusteeUserId, $body)
    {
        return $this->putOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo
     *
     * Update Trustee User Roles
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     * @param  string[] $body List of roles (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrgauthorizationTrusteeUserRolesAsyncWithHttpInfo($trusteeOrgId, $trusteeUserId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\UserAuthorization';
        $request = $this->putOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrgauthorizationTrusteeUserRoles'
     *
     * @param  string $trusteeOrgId Trustee Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     * @param  string[] $body List of roles (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOrgauthorizationTrusteeUserRolesRequest($trusteeOrgId, $trusteeUserId, $body)
    {
        // verify the required parameter 'trusteeOrgId' is set
        if ($trusteeOrgId === null || (is_array($trusteeOrgId) && count($trusteeOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeOrgId when calling putOrgauthorizationTrusteeUserRoles'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling putOrgauthorizationTrusteeUserRoles'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putOrgauthorizationTrusteeUserRoles'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustees/{trusteeOrgId}/users/{trusteeUserId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trusteeOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeOrgId' . '}',
                ObjectSerializer::toPathValue($trusteeOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrgauthorizationTrustorUser
     *
     * Add a Trustee user to the trust.
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TrustUser
     */
    public function putOrgauthorizationTrustorUser($trustorOrgId, $trusteeUserId)
    {
        list($response) = $this->putOrgauthorizationTrustorUserWithHttpInfo($trustorOrgId, $trusteeUserId);
        return $response;
    }

    /**
     * Operation putOrgauthorizationTrustorUserWithHttpInfo
     *
     * Add a Trustee user to the trust.
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TrustUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrgauthorizationTrustorUserWithHttpInfo($trustorOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->putOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TrustUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrgauthorizationTrustorUserAsync
     *
     * Add a Trustee user to the trust.
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrgauthorizationTrustorUserAsync($trustorOrgId, $trusteeUserId)
    {
        return $this->putOrgauthorizationTrustorUserAsyncWithHttpInfo($trustorOrgId, $trusteeUserId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrgauthorizationTrustorUserAsyncWithHttpInfo
     *
     * Add a Trustee user to the trust.
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrgauthorizationTrustorUserAsyncWithHttpInfo($trustorOrgId, $trusteeUserId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TrustUser';
        $request = $this->putOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrgauthorizationTrustorUser'
     *
     * @param  string $trustorOrgId Trustor Organization Id (required)
     * @param  string $trusteeUserId Trustee User Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOrgauthorizationTrustorUserRequest($trustorOrgId, $trusteeUserId)
    {
        // verify the required parameter 'trustorOrgId' is set
        if ($trustorOrgId === null || (is_array($trustorOrgId) && count($trustorOrgId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trustorOrgId when calling putOrgauthorizationTrustorUser'
            );
        }
        // verify the required parameter 'trusteeUserId' is set
        if ($trusteeUserId === null || (is_array($trusteeUserId) && count($trusteeUserId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $trusteeUserId when calling putOrgauthorizationTrustorUser'
            );
        }

        $resourcePath = '/api/v2/orgauthorization/trustors/{trustorOrgId}/users/{trusteeUserId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($trustorOrgId !== null) {
            $resourcePath = str_replace(
                '{' . 'trustorOrgId' . '}',
                ObjectSerializer::toPathValue($trustorOrgId),
                $resourcePath
            );
        }
        // path params
        if ($trusteeUserId !== null) {
            $resourcePath = str_replace(
                '{' . 'trusteeUserId' . '}',
                ObjectSerializer::toPathValue($trusteeUserId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
