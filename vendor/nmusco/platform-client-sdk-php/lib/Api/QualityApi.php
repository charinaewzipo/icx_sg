<?php
/**
 * QualityApi
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PureCloudPlatform\Client\V2\ApiException;
use PureCloudPlatform\Client\V2\Configuration;
use PureCloudPlatform\Client\V2\HeaderSelector;
use PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * QualityApi Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QualityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteQualityCalibration
     *
     * Delete a calibration by id.
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Calibration
     */
    public function deleteQualityCalibration($calibrationId, $calibratorId)
    {
        list($response) = $this->deleteQualityCalibrationWithHttpInfo($calibrationId, $calibratorId);
        return $response;
    }

    /**
     * Operation deleteQualityCalibrationWithHttpInfo
     *
     * Delete a calibration by id.
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Calibration, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQualityCalibrationWithHttpInfo($calibrationId, $calibratorId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->deleteQualityCalibrationRequest($calibrationId, $calibratorId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Calibration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQualityCalibrationAsync
     *
     * Delete a calibration by id.
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityCalibrationAsync($calibrationId, $calibratorId)
    {
        return $this->deleteQualityCalibrationAsyncWithHttpInfo($calibrationId, $calibratorId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQualityCalibrationAsyncWithHttpInfo
     *
     * Delete a calibration by id.
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityCalibrationAsyncWithHttpInfo($calibrationId, $calibratorId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->deleteQualityCalibrationRequest($calibrationId, $calibratorId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQualityCalibration'
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQualityCalibrationRequest($calibrationId, $calibratorId)
    {
        // verify the required parameter 'calibrationId' is set
        if ($calibrationId === null || (is_array($calibrationId) && count($calibrationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calibrationId when calling deleteQualityCalibration'
            );
        }
        // verify the required parameter 'calibratorId' is set
        if ($calibratorId === null || (is_array($calibratorId) && count($calibratorId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calibratorId when calling deleteQualityCalibration'
            );
        }

        $resourcePath = '/api/v2/quality/calibrations/{calibrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calibratorId !== null) {
            $queryParams['calibratorId'] = ObjectSerializer::toQueryValue($calibratorId);
        }

        // path params
        if ($calibrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'calibrationId' . '}',
                ObjectSerializer::toPathValue($calibrationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQualityConversationEvaluation
     *
     * Delete an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Evaluation
     */
    public function deleteQualityConversationEvaluation($conversationId, $evaluationId, $expand = null)
    {
        list($response) = $this->deleteQualityConversationEvaluationWithHttpInfo($conversationId, $evaluationId, $expand);
        return $response;
    }

    /**
     * Operation deleteQualityConversationEvaluationWithHttpInfo
     *
     * Delete an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Evaluation, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQualityConversationEvaluationWithHttpInfo($conversationId, $evaluationId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->deleteQualityConversationEvaluationRequest($conversationId, $evaluationId, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Evaluation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQualityConversationEvaluationAsync
     *
     * Delete an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityConversationEvaluationAsync($conversationId, $evaluationId, $expand = null)
    {
        return $this->deleteQualityConversationEvaluationAsyncWithHttpInfo($conversationId, $evaluationId, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQualityConversationEvaluationAsyncWithHttpInfo
     *
     * Delete an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityConversationEvaluationAsyncWithHttpInfo($conversationId, $evaluationId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->deleteQualityConversationEvaluationRequest($conversationId, $evaluationId, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQualityConversationEvaluation'
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQualityConversationEvaluationRequest($conversationId, $evaluationId, $expand = null)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling deleteQualityConversationEvaluation'
            );
        }
        // verify the required parameter 'evaluationId' is set
        if ($evaluationId === null || (is_array($evaluationId) && count($evaluationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evaluationId when calling deleteQualityConversationEvaluation'
            );
        }

        $resourcePath = '/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationId' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }
        // path params
        if ($evaluationId !== null) {
            $resourcePath = str_replace(
                '{' . 'evaluationId' . '}',
                ObjectSerializer::toPathValue($evaluationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQualityForm
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQualityForm($formId)
    {
        $this->deleteQualityFormWithHttpInfo($formId);
    }

    /**
     * Operation deleteQualityFormWithHttpInfo
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQualityFormWithHttpInfo($formId)
    {
        $returnType = '';
        $request = $this->deleteQualityFormRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQualityFormAsync
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityFormAsync($formId)
    {
        return $this->deleteQualityFormAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQualityFormAsyncWithHttpInfo
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityFormAsyncWithHttpInfo($formId)
    {
        $returnType = '';
        $request = $this->deleteQualityFormRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQualityForm'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQualityFormRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling deleteQualityForm'
            );
        }

        $resourcePath = '/api/v2/quality/forms/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQualityFormsEvaluation
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQualityFormsEvaluation($formId)
    {
        $this->deleteQualityFormsEvaluationWithHttpInfo($formId);
    }

    /**
     * Operation deleteQualityFormsEvaluationWithHttpInfo
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQualityFormsEvaluationWithHttpInfo($formId)
    {
        $returnType = '';
        $request = $this->deleteQualityFormsEvaluationRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQualityFormsEvaluationAsync
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityFormsEvaluationAsync($formId)
    {
        return $this->deleteQualityFormsEvaluationAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQualityFormsEvaluationAsyncWithHttpInfo
     *
     * Delete an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityFormsEvaluationAsyncWithHttpInfo($formId)
    {
        $returnType = '';
        $request = $this->deleteQualityFormsEvaluationRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQualityFormsEvaluation'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQualityFormsEvaluationRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling deleteQualityFormsEvaluation'
            );
        }

        $resourcePath = '/api/v2/quality/forms/evaluations/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQualityFormsSurvey
     *
     * Delete a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQualityFormsSurvey($formId)
    {
        $this->deleteQualityFormsSurveyWithHttpInfo($formId);
    }

    /**
     * Operation deleteQualityFormsSurveyWithHttpInfo
     *
     * Delete a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQualityFormsSurveyWithHttpInfo($formId)
    {
        $returnType = '';
        $request = $this->deleteQualityFormsSurveyRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQualityFormsSurveyAsync
     *
     * Delete a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityFormsSurveyAsync($formId)
    {
        return $this->deleteQualityFormsSurveyAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQualityFormsSurveyAsyncWithHttpInfo
     *
     * Delete a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityFormsSurveyAsyncWithHttpInfo($formId)
    {
        $returnType = '';
        $request = $this->deleteQualityFormsSurveyRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQualityFormsSurvey'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQualityFormsSurveyRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling deleteQualityFormsSurvey'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQualityKeywordset
     *
     * Delete a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQualityKeywordset($keywordSetId)
    {
        $this->deleteQualityKeywordsetWithHttpInfo($keywordSetId);
    }

    /**
     * Operation deleteQualityKeywordsetWithHttpInfo
     *
     * Delete a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQualityKeywordsetWithHttpInfo($keywordSetId)
    {
        $returnType = '';
        $request = $this->deleteQualityKeywordsetRequest($keywordSetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQualityKeywordsetAsync
     *
     * Delete a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityKeywordsetAsync($keywordSetId)
    {
        return $this->deleteQualityKeywordsetAsyncWithHttpInfo($keywordSetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQualityKeywordsetAsyncWithHttpInfo
     *
     * Delete a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityKeywordsetAsyncWithHttpInfo($keywordSetId)
    {
        $returnType = '';
        $request = $this->deleteQualityKeywordsetRequest($keywordSetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQualityKeywordset'
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQualityKeywordsetRequest($keywordSetId)
    {
        // verify the required parameter 'keywordSetId' is set
        if ($keywordSetId === null || (is_array($keywordSetId) && count($keywordSetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keywordSetId when calling deleteQualityKeywordset'
            );
        }

        $resourcePath = '/api/v2/quality/keywordsets/{keywordSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($keywordSetId !== null) {
            $resourcePath = str_replace(
                '{' . 'keywordSetId' . '}',
                ObjectSerializer::toPathValue($keywordSetId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQualityKeywordsets
     *
     * Delete keyword sets
     *
     * @param  string $ids A comma-delimited list of valid KeywordSet ids (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQualityKeywordsets($ids)
    {
        $this->deleteQualityKeywordsetsWithHttpInfo($ids);
    }

    /**
     * Operation deleteQualityKeywordsetsWithHttpInfo
     *
     * Delete keyword sets
     *
     * @param  string $ids A comma-delimited list of valid KeywordSet ids (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQualityKeywordsetsWithHttpInfo($ids)
    {
        $returnType = '';
        $request = $this->deleteQualityKeywordsetsRequest($ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQualityKeywordsetsAsync
     *
     * Delete keyword sets
     *
     * @param  string $ids A comma-delimited list of valid KeywordSet ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityKeywordsetsAsync($ids)
    {
        return $this->deleteQualityKeywordsetsAsyncWithHttpInfo($ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQualityKeywordsetsAsyncWithHttpInfo
     *
     * Delete keyword sets
     *
     * @param  string $ids A comma-delimited list of valid KeywordSet ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQualityKeywordsetsAsyncWithHttpInfo($ids)
    {
        $returnType = '';
        $request = $this->deleteQualityKeywordsetsRequest($ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQualityKeywordsets'
     *
     * @param  string $ids A comma-delimited list of valid KeywordSet ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQualityKeywordsetsRequest($ids)
    {
        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling deleteQualityKeywordsets'
            );
        }

        $resourcePath = '/api/v2/quality/keywordsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($ids !== null) {
            $queryParams['ids'] = ObjectSerializer::toQueryValue($ids);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityAgentsActivity
     *
     * Gets a list of Agent Activities
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string[] $agentUserId user id of agent requested (optional)
     * @param  string $evaluatorUserId user id of the evaluator (optional)
     * @param  string $name name (optional)
     * @param  string $group group id (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\AgentActivityEntityListing
     */
    public function getQualityAgentsActivity($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $agentUserId = null, $evaluatorUserId = null, $name = null, $group = null)
    {
        list($response) = $this->getQualityAgentsActivityWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $agentUserId, $evaluatorUserId, $name, $group);
        return $response;
    }

    /**
     * Operation getQualityAgentsActivityWithHttpInfo
     *
     * Gets a list of Agent Activities
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string[] $agentUserId user id of agent requested (optional)
     * @param  string $evaluatorUserId user id of the evaluator (optional)
     * @param  string $name name (optional)
     * @param  string $group group id (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\AgentActivityEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityAgentsActivityWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $agentUserId = null, $evaluatorUserId = null, $name = null, $group = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\AgentActivityEntityListing';
        $request = $this->getQualityAgentsActivityRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $agentUserId, $evaluatorUserId, $name, $group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\AgentActivityEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityAgentsActivityAsync
     *
     * Gets a list of Agent Activities
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string[] $agentUserId user id of agent requested (optional)
     * @param  string $evaluatorUserId user id of the evaluator (optional)
     * @param  string $name name (optional)
     * @param  string $group group id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityAgentsActivityAsync($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $agentUserId = null, $evaluatorUserId = null, $name = null, $group = null)
    {
        return $this->getQualityAgentsActivityAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $agentUserId, $evaluatorUserId, $name, $group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityAgentsActivityAsyncWithHttpInfo
     *
     * Gets a list of Agent Activities
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string[] $agentUserId user id of agent requested (optional)
     * @param  string $evaluatorUserId user id of the evaluator (optional)
     * @param  string $name name (optional)
     * @param  string $group group id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityAgentsActivityAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $agentUserId = null, $evaluatorUserId = null, $name = null, $group = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\AgentActivityEntityListing';
        $request = $this->getQualityAgentsActivityRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $agentUserId, $evaluatorUserId, $name, $group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityAgentsActivity'
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string[] $agentUserId user id of agent requested (optional)
     * @param  string $evaluatorUserId user id of the evaluator (optional)
     * @param  string $name name (optional)
     * @param  string $group group id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityAgentsActivityRequest($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $agentUserId = null, $evaluatorUserId = null, $name = null, $group = null)
    {

        $resourcePath = '/api/v2/quality/agents/activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($startTime !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($startTime);
        }
        // query params
        if ($endTime !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($endTime);
        }
        // query params
        if (is_array($agentUserId)) {
            $queryParams['agentUserId'] = $agentUserId;
        } else
        if ($agentUserId !== null) {
            $queryParams['agentUserId'] = ObjectSerializer::toQueryValue($agentUserId);
        }
        // query params
        if ($evaluatorUserId !== null) {
            $queryParams['evaluatorUserId'] = ObjectSerializer::toQueryValue($evaluatorUserId);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($group !== null) {
            $queryParams['group'] = ObjectSerializer::toQueryValue($group);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityCalibration
     *
     * Get a calibration by id.  Requires either calibrator id or conversation id
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (optional)
     * @param  string $conversationId conversationId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Calibration
     */
    public function getQualityCalibration($calibrationId, $calibratorId = null, $conversationId = null)
    {
        list($response) = $this->getQualityCalibrationWithHttpInfo($calibrationId, $calibratorId, $conversationId);
        return $response;
    }

    /**
     * Operation getQualityCalibrationWithHttpInfo
     *
     * Get a calibration by id.  Requires either calibrator id or conversation id
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (optional)
     * @param  string $conversationId conversationId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Calibration, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityCalibrationWithHttpInfo($calibrationId, $calibratorId = null, $conversationId = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->getQualityCalibrationRequest($calibrationId, $calibratorId, $conversationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Calibration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityCalibrationAsync
     *
     * Get a calibration by id.  Requires either calibrator id or conversation id
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (optional)
     * @param  string $conversationId conversationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityCalibrationAsync($calibrationId, $calibratorId = null, $conversationId = null)
    {
        return $this->getQualityCalibrationAsyncWithHttpInfo($calibrationId, $calibratorId, $conversationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityCalibrationAsyncWithHttpInfo
     *
     * Get a calibration by id.  Requires either calibrator id or conversation id
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (optional)
     * @param  string $conversationId conversationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityCalibrationAsyncWithHttpInfo($calibrationId, $calibratorId = null, $conversationId = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->getQualityCalibrationRequest($calibrationId, $calibratorId, $conversationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityCalibration'
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  string $calibratorId calibratorId (optional)
     * @param  string $conversationId conversationId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityCalibrationRequest($calibrationId, $calibratorId = null, $conversationId = null)
    {
        // verify the required parameter 'calibrationId' is set
        if ($calibrationId === null || (is_array($calibrationId) && count($calibrationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calibrationId when calling getQualityCalibration'
            );
        }

        $resourcePath = '/api/v2/quality/calibrations/{calibrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($calibratorId !== null) {
            $queryParams['calibratorId'] = ObjectSerializer::toQueryValue($calibratorId);
        }
        // query params
        if ($conversationId !== null) {
            $queryParams['conversationId'] = ObjectSerializer::toQueryValue($conversationId);
        }

        // path params
        if ($calibrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'calibrationId' . '}',
                ObjectSerializer::toPathValue($calibrationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityCalibrations
     *
     * Get the list of calibrations
     *
     * @param  string $calibratorId user id of calibrator (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversation id (optional)
     * @param  \DateTime $startTime Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\CalibrationEntityListing
     */
    public function getQualityCalibrations($calibratorId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $startTime = null, $endTime = null)
    {
        list($response) = $this->getQualityCalibrationsWithHttpInfo($calibratorId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $startTime, $endTime);
        return $response;
    }

    /**
     * Operation getQualityCalibrationsWithHttpInfo
     *
     * Get the list of calibrations
     *
     * @param  string $calibratorId user id of calibrator (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversation id (optional)
     * @param  \DateTime $startTime Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\CalibrationEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityCalibrationsWithHttpInfo($calibratorId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $startTime = null, $endTime = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CalibrationEntityListing';
        $request = $this->getQualityCalibrationsRequest($calibratorId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $startTime, $endTime);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\CalibrationEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityCalibrationsAsync
     *
     * Get the list of calibrations
     *
     * @param  string $calibratorId user id of calibrator (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversation id (optional)
     * @param  \DateTime $startTime Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityCalibrationsAsync($calibratorId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $startTime = null, $endTime = null)
    {
        return $this->getQualityCalibrationsAsyncWithHttpInfo($calibratorId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $startTime, $endTime)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityCalibrationsAsyncWithHttpInfo
     *
     * Get the list of calibrations
     *
     * @param  string $calibratorId user id of calibrator (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversation id (optional)
     * @param  \DateTime $startTime Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityCalibrationsAsyncWithHttpInfo($calibratorId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $startTime = null, $endTime = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CalibrationEntityListing';
        $request = $this->getQualityCalibrationsRequest($calibratorId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $startTime, $endTime);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityCalibrations'
     *
     * @param  string $calibratorId user id of calibrator (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversation id (optional)
     * @param  \DateTime $startTime Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityCalibrationsRequest($calibratorId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $startTime = null, $endTime = null)
    {
        // verify the required parameter 'calibratorId' is set
        if ($calibratorId === null || (is_array($calibratorId) && count($calibratorId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calibratorId when calling getQualityCalibrations'
            );
        }

        $resourcePath = '/api/v2/quality/calibrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($conversationId !== null) {
            $queryParams['conversationId'] = ObjectSerializer::toQueryValue($conversationId);
        }
        // query params
        if ($startTime !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($startTime);
        }
        // query params
        if ($endTime !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($endTime);
        }
        // query params
        if ($calibratorId !== null) {
            $queryParams['calibratorId'] = ObjectSerializer::toQueryValue($calibratorId);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityConversationAudits
     *
     * Get audits for conversation or recording
     *
     * @param  string $conversationId Conversation ID (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $recordingId id of the recording (optional)
     * @param  string $entityType entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording (optional, default to RECORDING)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\QualityAuditPage
     */
    public function getQualityConversationAudits($conversationId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $recordingId = null, $entityType = 'RECORDING')
    {
        list($response) = $this->getQualityConversationAuditsWithHttpInfo($conversationId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $recordingId, $entityType);
        return $response;
    }

    /**
     * Operation getQualityConversationAuditsWithHttpInfo
     *
     * Get audits for conversation or recording
     *
     * @param  string $conversationId Conversation ID (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $recordingId id of the recording (optional)
     * @param  string $entityType entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording (optional, default to RECORDING)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\QualityAuditPage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityConversationAuditsWithHttpInfo($conversationId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $recordingId = null, $entityType = 'RECORDING')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QualityAuditPage';
        $request = $this->getQualityConversationAuditsRequest($conversationId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $recordingId, $entityType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\QualityAuditPage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityConversationAuditsAsync
     *
     * Get audits for conversation or recording
     *
     * @param  string $conversationId Conversation ID (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $recordingId id of the recording (optional)
     * @param  string $entityType entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording (optional, default to RECORDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityConversationAuditsAsync($conversationId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $recordingId = null, $entityType = 'RECORDING')
    {
        return $this->getQualityConversationAuditsAsyncWithHttpInfo($conversationId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $recordingId, $entityType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityConversationAuditsAsyncWithHttpInfo
     *
     * Get audits for conversation or recording
     *
     * @param  string $conversationId Conversation ID (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $recordingId id of the recording (optional)
     * @param  string $entityType entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording (optional, default to RECORDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityConversationAuditsAsyncWithHttpInfo($conversationId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $recordingId = null, $entityType = 'RECORDING')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QualityAuditPage';
        $request = $this->getQualityConversationAuditsRequest($conversationId, $pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $recordingId, $entityType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityConversationAudits'
     *
     * @param  string $conversationId Conversation ID (required)
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $recordingId id of the recording (optional)
     * @param  string $entityType entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording (optional, default to RECORDING)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityConversationAuditsRequest($conversationId, $pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $recordingId = null, $entityType = 'RECORDING')
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling getQualityConversationAudits'
            );
        }

        $resourcePath = '/api/v2/quality/conversations/{conversationId}/audits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($recordingId !== null) {
            $queryParams['recordingId'] = ObjectSerializer::toQueryValue($recordingId);
        }
        // query params
        if ($entityType !== null) {
            $queryParams['entityType'] = ObjectSerializer::toQueryValue($entityType);
        }

        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationId' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityConversationEvaluation
     *
     * Get an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand agent, evaluator, evaluationForm (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Evaluation
     */
    public function getQualityConversationEvaluation($conversationId, $evaluationId, $expand = null)
    {
        list($response) = $this->getQualityConversationEvaluationWithHttpInfo($conversationId, $evaluationId, $expand);
        return $response;
    }

    /**
     * Operation getQualityConversationEvaluationWithHttpInfo
     *
     * Get an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand agent, evaluator, evaluationForm (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Evaluation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityConversationEvaluationWithHttpInfo($conversationId, $evaluationId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->getQualityConversationEvaluationRequest($conversationId, $evaluationId, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Evaluation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityConversationEvaluationAsync
     *
     * Get an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand agent, evaluator, evaluationForm (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityConversationEvaluationAsync($conversationId, $evaluationId, $expand = null)
    {
        return $this->getQualityConversationEvaluationAsyncWithHttpInfo($conversationId, $evaluationId, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityConversationEvaluationAsyncWithHttpInfo
     *
     * Get an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand agent, evaluator, evaluationForm (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityConversationEvaluationAsyncWithHttpInfo($conversationId, $evaluationId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->getQualityConversationEvaluationRequest($conversationId, $evaluationId, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityConversationEvaluation'
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  string $expand agent, evaluator, evaluationForm (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityConversationEvaluationRequest($conversationId, $evaluationId, $expand = null)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling getQualityConversationEvaluation'
            );
        }
        // verify the required parameter 'evaluationId' is set
        if ($evaluationId === null || (is_array($evaluationId) && count($evaluationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evaluationId when calling getQualityConversationEvaluation'
            );
        }

        $resourcePath = '/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationId' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }
        // path params
        if ($evaluationId !== null) {
            $resourcePath = str_replace(
                '{' . 'evaluationId' . '}',
                ObjectSerializer::toPathValue($evaluationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityConversationSurveys
     *
     * Get the surveys for a conversation
     *
     * @param  string $conversationId conversationId (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Survey[]
     */
    public function getQualityConversationSurveys($conversationId)
    {
        list($response) = $this->getQualityConversationSurveysWithHttpInfo($conversationId);
        return $response;
    }

    /**
     * Operation getQualityConversationSurveysWithHttpInfo
     *
     * Get the surveys for a conversation
     *
     * @param  string $conversationId conversationId (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Survey[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityConversationSurveysWithHttpInfo($conversationId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Survey[]';
        $request = $this->getQualityConversationSurveysRequest($conversationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Survey[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityConversationSurveysAsync
     *
     * Get the surveys for a conversation
     *
     * @param  string $conversationId conversationId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityConversationSurveysAsync($conversationId)
    {
        return $this->getQualityConversationSurveysAsyncWithHttpInfo($conversationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityConversationSurveysAsyncWithHttpInfo
     *
     * Get the surveys for a conversation
     *
     * @param  string $conversationId conversationId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityConversationSurveysAsyncWithHttpInfo($conversationId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Survey[]';
        $request = $this->getQualityConversationSurveysRequest($conversationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityConversationSurveys'
     *
     * @param  string $conversationId conversationId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityConversationSurveysRequest($conversationId)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling getQualityConversationSurveys'
            );
        }

        $resourcePath = '/api/v2/quality/conversations/{conversationId}/surveys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationId' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityEvaluationsQuery
     *
     * Queries Evaluations and returns a paged list
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversationId specified (optional)
     * @param  string $agentUserId user id of the agent (optional)
     * @param  string $evaluatorUserId evaluator user id (optional)
     * @param  string $queueId queue id (optional)
     * @param  string $startTime start time of the evaluation query (optional)
     * @param  string $endTime end time of the evaluation query (optional)
     * @param  string[] $evaluationState evaluationState (optional)
     * @param  bool $isReleased the evaluation has been released (optional)
     * @param  bool $agentHasRead agent has the evaluation (optional)
     * @param  bool $expandAnswerTotalScores get the total scores for evaluations (optional)
     * @param  int $maximum maximum (optional)
     * @param  string $sortOrder sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39; (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationEntityListing
     */
    public function getQualityEvaluationsQuery($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $agentUserId = null, $evaluatorUserId = null, $queueId = null, $startTime = null, $endTime = null, $evaluationState = null, $isReleased = null, $agentHasRead = null, $expandAnswerTotalScores = null, $maximum = null, $sortOrder = null)
    {
        list($response) = $this->getQualityEvaluationsQueryWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $agentUserId, $evaluatorUserId, $queueId, $startTime, $endTime, $evaluationState, $isReleased, $agentHasRead, $expandAnswerTotalScores, $maximum, $sortOrder);
        return $response;
    }

    /**
     * Operation getQualityEvaluationsQueryWithHttpInfo
     *
     * Queries Evaluations and returns a paged list
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversationId specified (optional)
     * @param  string $agentUserId user id of the agent (optional)
     * @param  string $evaluatorUserId evaluator user id (optional)
     * @param  string $queueId queue id (optional)
     * @param  string $startTime start time of the evaluation query (optional)
     * @param  string $endTime end time of the evaluation query (optional)
     * @param  string[] $evaluationState (optional)
     * @param  bool $isReleased the evaluation has been released (optional)
     * @param  bool $agentHasRead agent has the evaluation (optional)
     * @param  bool $expandAnswerTotalScores get the total scores for evaluations (optional)
     * @param  int $maximum maximum (optional)
     * @param  string $sortOrder sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39; (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityEvaluationsQueryWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $agentUserId = null, $evaluatorUserId = null, $queueId = null, $startTime = null, $endTime = null, $evaluationState = null, $isReleased = null, $agentHasRead = null, $expandAnswerTotalScores = null, $maximum = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationEntityListing';
        $request = $this->getQualityEvaluationsQueryRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $agentUserId, $evaluatorUserId, $queueId, $startTime, $endTime, $evaluationState, $isReleased, $agentHasRead, $expandAnswerTotalScores, $maximum, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityEvaluationsQueryAsync
     *
     * Queries Evaluations and returns a paged list
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversationId specified (optional)
     * @param  string $agentUserId user id of the agent (optional)
     * @param  string $evaluatorUserId evaluator user id (optional)
     * @param  string $queueId queue id (optional)
     * @param  string $startTime start time of the evaluation query (optional)
     * @param  string $endTime end time of the evaluation query (optional)
     * @param  string[] $evaluationState (optional)
     * @param  bool $isReleased the evaluation has been released (optional)
     * @param  bool $agentHasRead agent has the evaluation (optional)
     * @param  bool $expandAnswerTotalScores get the total scores for evaluations (optional)
     * @param  int $maximum maximum (optional)
     * @param  string $sortOrder sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityEvaluationsQueryAsync($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $agentUserId = null, $evaluatorUserId = null, $queueId = null, $startTime = null, $endTime = null, $evaluationState = null, $isReleased = null, $agentHasRead = null, $expandAnswerTotalScores = null, $maximum = null, $sortOrder = null)
    {
        return $this->getQualityEvaluationsQueryAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $agentUserId, $evaluatorUserId, $queueId, $startTime, $endTime, $evaluationState, $isReleased, $agentHasRead, $expandAnswerTotalScores, $maximum, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityEvaluationsQueryAsyncWithHttpInfo
     *
     * Queries Evaluations and returns a paged list
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversationId specified (optional)
     * @param  string $agentUserId user id of the agent (optional)
     * @param  string $evaluatorUserId evaluator user id (optional)
     * @param  string $queueId queue id (optional)
     * @param  string $startTime start time of the evaluation query (optional)
     * @param  string $endTime end time of the evaluation query (optional)
     * @param  string[] $evaluationState (optional)
     * @param  bool $isReleased the evaluation has been released (optional)
     * @param  bool $agentHasRead agent has the evaluation (optional)
     * @param  bool $expandAnswerTotalScores get the total scores for evaluations (optional)
     * @param  int $maximum maximum (optional)
     * @param  string $sortOrder sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityEvaluationsQueryAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $agentUserId = null, $evaluatorUserId = null, $queueId = null, $startTime = null, $endTime = null, $evaluationState = null, $isReleased = null, $agentHasRead = null, $expandAnswerTotalScores = null, $maximum = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationEntityListing';
        $request = $this->getQualityEvaluationsQueryRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $conversationId, $agentUserId, $evaluatorUserId, $queueId, $startTime, $endTime, $evaluationState, $isReleased, $agentHasRead, $expandAnswerTotalScores, $maximum, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityEvaluationsQuery'
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $conversationId conversationId specified (optional)
     * @param  string $agentUserId user id of the agent (optional)
     * @param  string $evaluatorUserId evaluator user id (optional)
     * @param  string $queueId queue id (optional)
     * @param  string $startTime start time of the evaluation query (optional)
     * @param  string $endTime end time of the evaluation query (optional)
     * @param  string[] $evaluationState (optional)
     * @param  bool $isReleased the evaluation has been released (optional)
     * @param  bool $agentHasRead agent has the evaluation (optional)
     * @param  bool $expandAnswerTotalScores get the total scores for evaluations (optional)
     * @param  int $maximum maximum (optional)
     * @param  string $sortOrder sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityEvaluationsQueryRequest($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $conversationId = null, $agentUserId = null, $evaluatorUserId = null, $queueId = null, $startTime = null, $endTime = null, $evaluationState = null, $isReleased = null, $agentHasRead = null, $expandAnswerTotalScores = null, $maximum = null, $sortOrder = null)
    {

        $resourcePath = '/api/v2/quality/evaluations/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($conversationId !== null) {
            $queryParams['conversationId'] = ObjectSerializer::toQueryValue($conversationId);
        }
        // query params
        if ($agentUserId !== null) {
            $queryParams['agentUserId'] = ObjectSerializer::toQueryValue($agentUserId);
        }
        // query params
        if ($evaluatorUserId !== null) {
            $queryParams['evaluatorUserId'] = ObjectSerializer::toQueryValue($evaluatorUserId);
        }
        // query params
        if ($queueId !== null) {
            $queryParams['queueId'] = ObjectSerializer::toQueryValue($queueId);
        }
        // query params
        if ($startTime !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($startTime);
        }
        // query params
        if ($endTime !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($endTime);
        }
        // query params
        if (is_array($evaluationState)) {
            $queryParams['evaluationState'] = $evaluationState;
        } else
        if ($evaluationState !== null) {
            $queryParams['evaluationState'] = ObjectSerializer::toQueryValue($evaluationState);
        }
        // query params
        if ($isReleased !== null) {
            $queryParams['isReleased'] = ObjectSerializer::toQueryValue($isReleased);
        }
        // query params
        if ($agentHasRead !== null) {
            $queryParams['agentHasRead'] = ObjectSerializer::toQueryValue($agentHasRead);
        }
        // query params
        if ($expandAnswerTotalScores !== null) {
            $queryParams['expandAnswerTotalScores'] = ObjectSerializer::toQueryValue($expandAnswerTotalScores);
        }
        // query params
        if ($maximum !== null) {
            $queryParams['maximum'] = ObjectSerializer::toQueryValue($maximum);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityEvaluatorsActivity
     *
     * Get an evaluator activity
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string $name Evaluator name (optional)
     * @param  string[] $permission permission strings (optional)
     * @param  string $group group id (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluatorActivityEntityListing
     */
    public function getQualityEvaluatorsActivity($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $name = null, $permission = null, $group = null)
    {
        list($response) = $this->getQualityEvaluatorsActivityWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $name, $permission, $group);
        return $response;
    }

    /**
     * Operation getQualityEvaluatorsActivityWithHttpInfo
     *
     * Get an evaluator activity
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string $name Evaluator name (optional)
     * @param  string[] $permission permission strings (optional)
     * @param  string $group group id (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluatorActivityEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityEvaluatorsActivityWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $name = null, $permission = null, $group = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluatorActivityEntityListing';
        $request = $this->getQualityEvaluatorsActivityRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $name, $permission, $group);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluatorActivityEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityEvaluatorsActivityAsync
     *
     * Get an evaluator activity
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string $name Evaluator name (optional)
     * @param  string[] $permission permission strings (optional)
     * @param  string $group group id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityEvaluatorsActivityAsync($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $name = null, $permission = null, $group = null)
    {
        return $this->getQualityEvaluatorsActivityAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $name, $permission, $group)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityEvaluatorsActivityAsyncWithHttpInfo
     *
     * Get an evaluator activity
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string $name Evaluator name (optional)
     * @param  string[] $permission permission strings (optional)
     * @param  string $group group id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityEvaluatorsActivityAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $name = null, $permission = null, $group = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluatorActivityEntityListing';
        $request = $this->getQualityEvaluatorsActivityRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $startTime, $endTime, $name, $permission, $group);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityEvaluatorsActivity'
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  \DateTime $startTime The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  \DateTime $endTime The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ (optional)
     * @param  string $name Evaluator name (optional)
     * @param  string[] $permission permission strings (optional)
     * @param  string $group group id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityEvaluatorsActivityRequest($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $startTime = null, $endTime = null, $name = null, $permission = null, $group = null)
    {

        $resourcePath = '/api/v2/quality/evaluators/activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($startTime !== null) {
            $queryParams['startTime'] = ObjectSerializer::toQueryValue($startTime);
        }
        // query params
        if ($endTime !== null) {
            $queryParams['endTime'] = ObjectSerializer::toQueryValue($endTime);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if (is_array($permission)) {
            $queryParams['permission'] = $permission;
        } else
        if ($permission !== null) {
            $queryParams['permission'] = ObjectSerializer::toQueryValue($permission);
        }
        // query params
        if ($group !== null) {
            $queryParams['group'] = ObjectSerializer::toQueryValue($group);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityForm
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function getQualityForm($formId)
    {
        list($response) = $this->getQualityFormWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation getQualityFormWithHttpInfo
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityFormRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormAsync
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormAsync($formId)
    {
        return $this->getQualityFormAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormAsyncWithHttpInfo
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormAsyncWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityFormRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityForm'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityForm'
            );
        }

        $resourcePath = '/api/v2/quality/forms/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormVersions
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing
     */
    public function getQualityFormVersions($formId, $pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getQualityFormVersionsWithHttpInfo($formId, $pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getQualityFormVersionsWithHttpInfo
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormVersionsWithHttpInfo($formId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormVersionsRequest($formId, $pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormVersionsAsync
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormVersionsAsync($formId, $pageSize = '25', $pageNumber = '1')
    {
        return $this->getQualityFormVersionsAsyncWithHttpInfo($formId, $pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormVersionsAsyncWithHttpInfo
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormVersionsAsyncWithHttpInfo($formId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormVersionsRequest($formId, $pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormVersions'
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormVersionsRequest($formId, $pageSize = '25', $pageNumber = '1')
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityFormVersions'
            );
        }

        $resourcePath = '/api/v2/quality/forms/{formId}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }

        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityForms
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing
     */
    public function getQualityForms($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        list($response) = $this->getQualityFormsWithHttpInfo($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);
        return $response;
    }

    /**
     * Operation getQualityFormsWithHttpInfo
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormsRequest($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsAsync
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsAsync($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        return $this->getQualityFormsAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsAsyncWithHttpInfo
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormsRequest($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityForms'
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsRequest($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {

        $resourcePath = '/api/v2/quality/forms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsEvaluation
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function getQualityFormsEvaluation($formId)
    {
        list($response) = $this->getQualityFormsEvaluationWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation getQualityFormsEvaluationWithHttpInfo
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsEvaluationWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityFormsEvaluationRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsEvaluationAsync
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsEvaluationAsync($formId)
    {
        return $this->getQualityFormsEvaluationAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsEvaluationAsyncWithHttpInfo
     *
     * Get an evaluation form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsEvaluationAsyncWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityFormsEvaluationRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsEvaluation'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsEvaluationRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityFormsEvaluation'
            );
        }

        $resourcePath = '/api/v2/quality/forms/evaluations/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsEvaluationVersions
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing
     */
    public function getQualityFormsEvaluationVersions($formId, $pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getQualityFormsEvaluationVersionsWithHttpInfo($formId, $pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getQualityFormsEvaluationVersionsWithHttpInfo
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsEvaluationVersionsWithHttpInfo($formId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormsEvaluationVersionsRequest($formId, $pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsEvaluationVersionsAsync
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsEvaluationVersionsAsync($formId, $pageSize = '25', $pageNumber = '1')
    {
        return $this->getQualityFormsEvaluationVersionsAsyncWithHttpInfo($formId, $pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsEvaluationVersionsAsyncWithHttpInfo
     *
     * Gets all the revisions for a specific evaluation.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsEvaluationVersionsAsyncWithHttpInfo($formId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormsEvaluationVersionsRequest($formId, $pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsEvaluationVersions'
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsEvaluationVersionsRequest($formId, $pageSize = '25', $pageNumber = '1')
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityFormsEvaluationVersions'
            );
        }

        $resourcePath = '/api/v2/quality/forms/evaluations/{formId}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }

        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsEvaluations
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing
     */
    public function getQualityFormsEvaluations($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        list($response) = $this->getQualityFormsEvaluationsWithHttpInfo($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);
        return $response;
    }

    /**
     * Operation getQualityFormsEvaluationsWithHttpInfo
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsEvaluationsWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormsEvaluationsRequest($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsEvaluationsAsync
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsEvaluationsAsync($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        return $this->getQualityFormsEvaluationsAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsEvaluationsAsyncWithHttpInfo
     *
     * Get the list of evaluation forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsEvaluationsAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityFormsEvaluationsRequest($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsEvaluations'
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsEvaluationsRequest($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {

        $resourcePath = '/api/v2/quality/forms/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsSurvey
     *
     * Get a survey form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyForm
     */
    public function getQualityFormsSurvey($formId)
    {
        list($response) = $this->getQualityFormsSurveyWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation getQualityFormsSurveyWithHttpInfo
     *
     * Get a survey form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsSurveyWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->getQualityFormsSurveyRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsSurveyAsync
     *
     * Get a survey form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveyAsync($formId)
    {
        return $this->getQualityFormsSurveyAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsSurveyAsyncWithHttpInfo
     *
     * Get a survey form
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveyAsyncWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->getQualityFormsSurveyRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsSurvey'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsSurveyRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityFormsSurvey'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsSurveyVersions
     *
     * Gets all the revisions for a specific survey.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing
     */
    public function getQualityFormsSurveyVersions($formId, $pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getQualityFormsSurveyVersionsWithHttpInfo($formId, $pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getQualityFormsSurveyVersionsWithHttpInfo
     *
     * Gets all the revisions for a specific survey.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsSurveyVersionsWithHttpInfo($formId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveyVersionsRequest($formId, $pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsSurveyVersionsAsync
     *
     * Gets all the revisions for a specific survey.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveyVersionsAsync($formId, $pageSize = '25', $pageNumber = '1')
    {
        return $this->getQualityFormsSurveyVersionsAsyncWithHttpInfo($formId, $pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsSurveyVersionsAsyncWithHttpInfo
     *
     * Gets all the revisions for a specific survey.
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveyVersionsAsyncWithHttpInfo($formId, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveyVersionsRequest($formId, $pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsSurveyVersions'
     *
     * @param  string $formId Form ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsSurveyVersionsRequest($formId, $pageSize = '25', $pageNumber = '1')
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityFormsSurveyVersions'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys/{formId}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }

        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsSurveys
     *
     * Get the list of survey forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing
     */
    public function getQualityFormsSurveys($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        list($response) = $this->getQualityFormsSurveysWithHttpInfo($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);
        return $response;
    }

    /**
     * Operation getQualityFormsSurveysWithHttpInfo
     *
     * Get the list of survey forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsSurveysWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveysRequest($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsSurveysAsync
     *
     * Get the list of survey forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveysAsync($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        return $this->getQualityFormsSurveysAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsSurveysAsyncWithHttpInfo
     *
     * Get the list of survey forms
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveysAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveysRequest($pageSize, $pageNumber, $sortBy, $nextPage, $previousPage, $expand, $name, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsSurveys'
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $expand Expand (optional)
     * @param  string $name Name (optional)
     * @param  string $sortOrder Order to sort results, either asc or desc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsSurveysRequest($pageSize = '25', $pageNumber = '1', $sortBy = null, $nextPage = null, $previousPage = null, $expand = null, $name = null, $sortOrder = null)
    {

        $resourcePath = '/api/v2/quality/forms/surveys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsSurveysBulk
     *
     * Retrieve a list of survey forms by their ids
     *
     * @param  string[] $id A comma-delimited list of valid survey form ids (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing
     */
    public function getQualityFormsSurveysBulk($id)
    {
        list($response) = $this->getQualityFormsSurveysBulkWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getQualityFormsSurveysBulkWithHttpInfo
     *
     * Retrieve a list of survey forms by their ids
     *
     * @param  string[] $id A comma-delimited list of valid survey form ids (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsSurveysBulkWithHttpInfo($id)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveysBulkRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsSurveysBulkAsync
     *
     * Retrieve a list of survey forms by their ids
     *
     * @param  string[] $id A comma-delimited list of valid survey form ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveysBulkAsync($id)
    {
        return $this->getQualityFormsSurveysBulkAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsSurveysBulkAsyncWithHttpInfo
     *
     * Retrieve a list of survey forms by their ids
     *
     * @param  string[] $id A comma-delimited list of valid survey form ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveysBulkAsyncWithHttpInfo($id)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveysBulkRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsSurveysBulk'
     *
     * @param  string[] $id A comma-delimited list of valid survey form ids (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsSurveysBulkRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getQualityFormsSurveysBulk'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($id)) {
            $queryParams['id'] = $id;
        } else
        if ($id !== null) {
            $queryParams['id'] = ObjectSerializer::toQueryValue($id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityFormsSurveysBulkContexts
     *
     * Retrieve a list of the latest form versions by context ids
     *
     * @param  string[] $contextId A comma-delimited list of valid survey form context ids (required)
     * @param  bool $published If true, the latest published version will be included. If false, only the unpublished version will be included. (optional, default to true)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing
     */
    public function getQualityFormsSurveysBulkContexts($contextId, $published = 'true')
    {
        list($response) = $this->getQualityFormsSurveysBulkContextsWithHttpInfo($contextId, $published);
        return $response;
    }

    /**
     * Operation getQualityFormsSurveysBulkContextsWithHttpInfo
     *
     * Retrieve a list of the latest form versions by context ids
     *
     * @param  string[] $contextId A comma-delimited list of valid survey form context ids (required)
     * @param  bool $published If true, the latest published version will be included. If false, only the unpublished version will be included. (optional, default to true)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityFormsSurveysBulkContextsWithHttpInfo($contextId, $published = 'true')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveysBulkContextsRequest($contextId, $published);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityFormsSurveysBulkContextsAsync
     *
     * Retrieve a list of the latest form versions by context ids
     *
     * @param  string[] $contextId A comma-delimited list of valid survey form context ids (required)
     * @param  bool $published If true, the latest published version will be included. If false, only the unpublished version will be included. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveysBulkContextsAsync($contextId, $published = 'true')
    {
        return $this->getQualityFormsSurveysBulkContextsAsyncWithHttpInfo($contextId, $published)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityFormsSurveysBulkContextsAsyncWithHttpInfo
     *
     * Retrieve a list of the latest form versions by context ids
     *
     * @param  string[] $contextId A comma-delimited list of valid survey form context ids (required)
     * @param  bool $published If true, the latest published version will be included. If false, only the unpublished version will be included. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityFormsSurveysBulkContextsAsyncWithHttpInfo($contextId, $published = 'true')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityFormsSurveysBulkContextsRequest($contextId, $published);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityFormsSurveysBulkContexts'
     *
     * @param  string[] $contextId A comma-delimited list of valid survey form context ids (required)
     * @param  bool $published If true, the latest published version will be included. If false, only the unpublished version will be included. (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityFormsSurveysBulkContextsRequest($contextId, $published = 'true')
    {
        // verify the required parameter 'contextId' is set
        if ($contextId === null || (is_array($contextId) && count($contextId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contextId when calling getQualityFormsSurveysBulkContexts'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys/bulk/contexts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($contextId)) {
            $queryParams['contextId'] = $contextId;
        } else
        if ($contextId !== null) {
            $queryParams['contextId'] = ObjectSerializer::toQueryValue($contextId);
        }
        // query params
        if ($published !== null) {
            $queryParams['published'] = ObjectSerializer::toQueryValue($published);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityKeywordset
     *
     * Get a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\KeywordSet
     */
    public function getQualityKeywordset($keywordSetId)
    {
        list($response) = $this->getQualityKeywordsetWithHttpInfo($keywordSetId);
        return $response;
    }

    /**
     * Operation getQualityKeywordsetWithHttpInfo
     *
     * Get a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\KeywordSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityKeywordsetWithHttpInfo($keywordSetId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->getQualityKeywordsetRequest($keywordSetId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\KeywordSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityKeywordsetAsync
     *
     * Get a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityKeywordsetAsync($keywordSetId)
    {
        return $this->getQualityKeywordsetAsyncWithHttpInfo($keywordSetId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityKeywordsetAsyncWithHttpInfo
     *
     * Get a keywordSet by id.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityKeywordsetAsyncWithHttpInfo($keywordSetId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->getQualityKeywordsetRequest($keywordSetId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityKeywordset'
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityKeywordsetRequest($keywordSetId)
    {
        // verify the required parameter 'keywordSetId' is set
        if ($keywordSetId === null || (is_array($keywordSetId) && count($keywordSetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keywordSetId when calling getQualityKeywordset'
            );
        }

        $resourcePath = '/api/v2/quality/keywordsets/{keywordSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($keywordSetId !== null) {
            $resourcePath = str_replace(
                '{' . 'keywordSetId' . '}',
                ObjectSerializer::toPathValue($keywordSetId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityKeywordsets
     *
     * Get the list of keyword sets
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $name the keyword set name - used for filtering results in searches. (optional)
     * @param  string $queueId the queue id - used for filtering results in searches. (optional)
     * @param  string $agentId the agent id - used for filtering results in searches. (optional)
     * @param  string $operator If agentID and queueId are both present, this determines whether the query is an AND or OR between those parameters. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\KeywordSetEntityListing
     */
    public function getQualityKeywordsets($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $name = null, $queueId = null, $agentId = null, $operator = null)
    {
        list($response) = $this->getQualityKeywordsetsWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $name, $queueId, $agentId, $operator);
        return $response;
    }

    /**
     * Operation getQualityKeywordsetsWithHttpInfo
     *
     * Get the list of keyword sets
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $name the keyword set name - used for filtering results in searches. (optional)
     * @param  string $queueId the queue id - used for filtering results in searches. (optional)
     * @param  string $agentId the agent id - used for filtering results in searches. (optional)
     * @param  string $operator If agentID and queueId are both present, this determines whether the query is an AND or OR between those parameters. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\KeywordSetEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityKeywordsetsWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $name = null, $queueId = null, $agentId = null, $operator = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSetEntityListing';
        $request = $this->getQualityKeywordsetsRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $name, $queueId, $agentId, $operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\KeywordSetEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityKeywordsetsAsync
     *
     * Get the list of keyword sets
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $name the keyword set name - used for filtering results in searches. (optional)
     * @param  string $queueId the queue id - used for filtering results in searches. (optional)
     * @param  string $agentId the agent id - used for filtering results in searches. (optional)
     * @param  string $operator If agentID and queueId are both present, this determines whether the query is an AND or OR between those parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityKeywordsetsAsync($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $name = null, $queueId = null, $agentId = null, $operator = null)
    {
        return $this->getQualityKeywordsetsAsyncWithHttpInfo($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $name, $queueId, $agentId, $operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityKeywordsetsAsyncWithHttpInfo
     *
     * Get the list of keyword sets
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $name the keyword set name - used for filtering results in searches. (optional)
     * @param  string $queueId the queue id - used for filtering results in searches. (optional)
     * @param  string $agentId the agent id - used for filtering results in searches. (optional)
     * @param  string $operator If agentID and queueId are both present, this determines whether the query is an AND or OR between those parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityKeywordsetsAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $name = null, $queueId = null, $agentId = null, $operator = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSetEntityListing';
        $request = $this->getQualityKeywordsetsRequest($pageSize, $pageNumber, $sortBy, $expand, $nextPage, $previousPage, $name, $queueId, $agentId, $operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityKeywordsets'
     *
     * @param  int $pageSize The total page size requested (optional, default to 25)
     * @param  int $pageNumber The page number requested (optional, default to 1)
     * @param  string $sortBy variable name requested to sort by (optional)
     * @param  string[] $expand variable name requested by expand list (optional)
     * @param  string $nextPage next page token (optional)
     * @param  string $previousPage Previous page token (optional)
     * @param  string $name the keyword set name - used for filtering results in searches. (optional)
     * @param  string $queueId the queue id - used for filtering results in searches. (optional)
     * @param  string $agentId the agent id - used for filtering results in searches. (optional)
     * @param  string $operator If agentID and queueId are both present, this determines whether the query is an AND or OR between those parameters. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityKeywordsetsRequest($pageSize = '25', $pageNumber = '1', $sortBy = null, $expand = null, $nextPage = null, $previousPage = null, $name = null, $queueId = null, $agentId = null, $operator = null)
    {

        $resourcePath = '/api/v2/quality/keywordsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($nextPage !== null) {
            $queryParams['nextPage'] = ObjectSerializer::toQueryValue($nextPage);
        }
        // query params
        if ($previousPage !== null) {
            $queryParams['previousPage'] = ObjectSerializer::toQueryValue($previousPage);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($queueId !== null) {
            $queryParams['queueId'] = ObjectSerializer::toQueryValue($queueId);
        }
        // query params
        if ($agentId !== null) {
            $queryParams['agentId'] = ObjectSerializer::toQueryValue($agentId);
        }
        // query params
        if ($operator !== null) {
            $queryParams['operator'] = ObjectSerializer::toQueryValue($operator);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityPublishedform
     *
     * Get the published evaluation forms.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function getQualityPublishedform($formId)
    {
        list($response) = $this->getQualityPublishedformWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation getQualityPublishedformWithHttpInfo
     *
     * Get the published evaluation forms.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityPublishedformWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityPublishedformRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityPublishedformAsync
     *
     * Get the published evaluation forms.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformAsync($formId)
    {
        return $this->getQualityPublishedformAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityPublishedformAsyncWithHttpInfo
     *
     * Get the published evaluation forms.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformAsyncWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityPublishedformRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityPublishedform'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityPublishedformRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityPublishedform'
            );
        }

        $resourcePath = '/api/v2/quality/publishedforms/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityPublishedforms
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing
     */
    public function getQualityPublishedforms($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        list($response) = $this->getQualityPublishedformsWithHttpInfo($pageSize, $pageNumber, $name, $onlyLatestPerContext);
        return $response;
    }

    /**
     * Operation getQualityPublishedformsWithHttpInfo
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityPublishedformsWithHttpInfo($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityPublishedformsRequest($pageSize, $pageNumber, $name, $onlyLatestPerContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityPublishedformsAsync
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsAsync($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        return $this->getQualityPublishedformsAsyncWithHttpInfo($pageSize, $pageNumber, $name, $onlyLatestPerContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityPublishedformsAsyncWithHttpInfo
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityPublishedformsRequest($pageSize, $pageNumber, $name, $onlyLatestPerContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityPublishedforms'
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityPublishedformsRequest($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {

        $resourcePath = '/api/v2/quality/publishedforms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($onlyLatestPerContext !== null) {
            $queryParams['onlyLatestPerContext'] = ObjectSerializer::toQueryValue($onlyLatestPerContext);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityPublishedformsEvaluation
     *
     * Get the most recent published version of an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function getQualityPublishedformsEvaluation($formId)
    {
        list($response) = $this->getQualityPublishedformsEvaluationWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation getQualityPublishedformsEvaluationWithHttpInfo
     *
     * Get the most recent published version of an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityPublishedformsEvaluationWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityPublishedformsEvaluationRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityPublishedformsEvaluationAsync
     *
     * Get the most recent published version of an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsEvaluationAsync($formId)
    {
        return $this->getQualityPublishedformsEvaluationAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityPublishedformsEvaluationAsyncWithHttpInfo
     *
     * Get the most recent published version of an evaluation form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsEvaluationAsyncWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->getQualityPublishedformsEvaluationRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityPublishedformsEvaluation'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityPublishedformsEvaluationRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityPublishedformsEvaluation'
            );
        }

        $resourcePath = '/api/v2/quality/publishedforms/evaluations/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityPublishedformsEvaluations
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing
     */
    public function getQualityPublishedformsEvaluations($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        list($response) = $this->getQualityPublishedformsEvaluationsWithHttpInfo($pageSize, $pageNumber, $name, $onlyLatestPerContext);
        return $response;
    }

    /**
     * Operation getQualityPublishedformsEvaluationsWithHttpInfo
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityPublishedformsEvaluationsWithHttpInfo($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityPublishedformsEvaluationsRequest($pageSize, $pageNumber, $name, $onlyLatestPerContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityPublishedformsEvaluationsAsync
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsEvaluationsAsync($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        return $this->getQualityPublishedformsEvaluationsAsyncWithHttpInfo($pageSize, $pageNumber, $name, $onlyLatestPerContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityPublishedformsEvaluationsAsyncWithHttpInfo
     *
     * Get the published evaluation forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsEvaluationsAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationFormEntityListing';
        $request = $this->getQualityPublishedformsEvaluationsRequest($pageSize, $pageNumber, $name, $onlyLatestPerContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityPublishedformsEvaluations'
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestPerContext onlyLatestPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityPublishedformsEvaluationsRequest($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestPerContext = 'false')
    {

        $resourcePath = '/api/v2/quality/publishedforms/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($onlyLatestPerContext !== null) {
            $queryParams['onlyLatestPerContext'] = ObjectSerializer::toQueryValue($onlyLatestPerContext);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityPublishedformsSurvey
     *
     * Get the most recent published version of a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyForm
     */
    public function getQualityPublishedformsSurvey($formId)
    {
        list($response) = $this->getQualityPublishedformsSurveyWithHttpInfo($formId);
        return $response;
    }

    /**
     * Operation getQualityPublishedformsSurveyWithHttpInfo
     *
     * Get the most recent published version of a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityPublishedformsSurveyWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->getQualityPublishedformsSurveyRequest($formId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityPublishedformsSurveyAsync
     *
     * Get the most recent published version of a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsSurveyAsync($formId)
    {
        return $this->getQualityPublishedformsSurveyAsyncWithHttpInfo($formId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityPublishedformsSurveyAsyncWithHttpInfo
     *
     * Get the most recent published version of a survey form.
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsSurveyAsyncWithHttpInfo($formId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->getQualityPublishedformsSurveyRequest($formId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityPublishedformsSurvey'
     *
     * @param  string $formId Form ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityPublishedformsSurveyRequest($formId)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling getQualityPublishedformsSurvey'
            );
        }

        $resourcePath = '/api/v2/quality/publishedforms/surveys/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualityPublishedformsSurveys
     *
     * Get the published survey forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestEnabledPerContext onlyLatestEnabledPerContext (optional, default to false)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing
     */
    public function getQualityPublishedformsSurveys($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestEnabledPerContext = 'false')
    {
        list($response) = $this->getQualityPublishedformsSurveysWithHttpInfo($pageSize, $pageNumber, $name, $onlyLatestEnabledPerContext);
        return $response;
    }

    /**
     * Operation getQualityPublishedformsSurveysWithHttpInfo
     *
     * Get the published survey forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestEnabledPerContext onlyLatestEnabledPerContext (optional, default to false)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualityPublishedformsSurveysWithHttpInfo($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestEnabledPerContext = 'false')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityPublishedformsSurveysRequest($pageSize, $pageNumber, $name, $onlyLatestEnabledPerContext);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualityPublishedformsSurveysAsync
     *
     * Get the published survey forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestEnabledPerContext onlyLatestEnabledPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsSurveysAsync($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestEnabledPerContext = 'false')
    {
        return $this->getQualityPublishedformsSurveysAsyncWithHttpInfo($pageSize, $pageNumber, $name, $onlyLatestEnabledPerContext)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualityPublishedformsSurveysAsyncWithHttpInfo
     *
     * Get the published survey forms.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestEnabledPerContext onlyLatestEnabledPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualityPublishedformsSurveysAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestEnabledPerContext = 'false')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyFormEntityListing';
        $request = $this->getQualityPublishedformsSurveysRequest($pageSize, $pageNumber, $name, $onlyLatestEnabledPerContext);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualityPublishedformsSurveys'
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $name Name (optional)
     * @param  bool $onlyLatestEnabledPerContext onlyLatestEnabledPerContext (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualityPublishedformsSurveysRequest($pageSize = '25', $pageNumber = '1', $name = null, $onlyLatestEnabledPerContext = 'false')
    {

        $resourcePath = '/api/v2/quality/publishedforms/surveys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($onlyLatestEnabledPerContext !== null) {
            $queryParams['onlyLatestEnabledPerContext'] = ObjectSerializer::toQueryValue($onlyLatestEnabledPerContext);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualitySurvey
     *
     * Get a survey for a conversation
     *
     * @param  string $surveyId surveyId (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Survey
     */
    public function getQualitySurvey($surveyId)
    {
        list($response) = $this->getQualitySurveyWithHttpInfo($surveyId);
        return $response;
    }

    /**
     * Operation getQualitySurveyWithHttpInfo
     *
     * Get a survey for a conversation
     *
     * @param  string $surveyId surveyId (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Survey, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualitySurveyWithHttpInfo($surveyId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Survey';
        $request = $this->getQualitySurveyRequest($surveyId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Survey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualitySurveyAsync
     *
     * Get a survey for a conversation
     *
     * @param  string $surveyId surveyId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualitySurveyAsync($surveyId)
    {
        return $this->getQualitySurveyAsyncWithHttpInfo($surveyId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualitySurveyAsyncWithHttpInfo
     *
     * Get a survey for a conversation
     *
     * @param  string $surveyId surveyId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualitySurveyAsyncWithHttpInfo($surveyId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Survey';
        $request = $this->getQualitySurveyRequest($surveyId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualitySurvey'
     *
     * @param  string $surveyId surveyId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualitySurveyRequest($surveyId)
    {
        // verify the required parameter 'surveyId' is set
        if ($surveyId === null || (is_array($surveyId) && count($surveyId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $surveyId when calling getQualitySurvey'
            );
        }

        $resourcePath = '/api/v2/quality/surveys/{surveyId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($surveyId !== null) {
            $resourcePath = str_replace(
                '{' . 'surveyId' . '}',
                ObjectSerializer::toPathValue($surveyId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getQualitySurveysScorable
     *
     * Get a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\ScorableSurvey
     */
    public function getQualitySurveysScorable($customerSurveyUrl = null)
    {
        list($response) = $this->getQualitySurveysScorableWithHttpInfo($customerSurveyUrl);
        return $response;
    }

    /**
     * Operation getQualitySurveysScorableWithHttpInfo
     *
     * Get a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\ScorableSurvey, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQualitySurveysScorableWithHttpInfo($customerSurveyUrl = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ScorableSurvey';
        $request = $this->getQualitySurveysScorableRequest($customerSurveyUrl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ScorableSurvey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getQualitySurveysScorableAsync
     *
     * Get a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualitySurveysScorableAsync($customerSurveyUrl = null)
    {
        return $this->getQualitySurveysScorableAsyncWithHttpInfo($customerSurveyUrl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getQualitySurveysScorableAsyncWithHttpInfo
     *
     * Get a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getQualitySurveysScorableAsyncWithHttpInfo($customerSurveyUrl = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ScorableSurvey';
        $request = $this->getQualitySurveysScorableRequest($customerSurveyUrl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getQualitySurveysScorable'
     *
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getQualitySurveysScorableRequest($customerSurveyUrl = null)
    {

        $resourcePath = '/api/v2/quality/surveys/scorable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customerSurveyUrl !== null) {
            $queryParams['customerSurveyUrl'] = ObjectSerializer::toQueryValue($customerSurveyUrl);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchQualityFormsSurvey
     *
     * Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyForm
     */
    public function patchQualityFormsSurvey($formId, $body)
    {
        list($response) = $this->patchQualityFormsSurveyWithHttpInfo($formId, $body);
        return $response;
    }

    /**
     * Operation patchQualityFormsSurveyWithHttpInfo
     *
     * Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchQualityFormsSurveyWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->patchQualityFormsSurveyRequest($formId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchQualityFormsSurveyAsync
     *
     * Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchQualityFormsSurveyAsync($formId, $body)
    {
        return $this->patchQualityFormsSurveyAsyncWithHttpInfo($formId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchQualityFormsSurveyAsyncWithHttpInfo
     *
     * Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchQualityFormsSurveyAsyncWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->patchQualityFormsSurveyRequest($formId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchQualityFormsSurvey'
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchQualityFormsSurveyRequest($formId, $body)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling patchQualityFormsSurvey'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchQualityFormsSurvey'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAnalyticsEvaluationsAggregatesQuery
     *
     * Query for evaluation aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationAggregationQuery $body query (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationAggregateQueryResponse
     */
    public function postAnalyticsEvaluationsAggregatesQuery($body)
    {
        list($response) = $this->postAnalyticsEvaluationsAggregatesQueryWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postAnalyticsEvaluationsAggregatesQueryWithHttpInfo
     *
     * Query for evaluation aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationAggregationQuery $body query (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationAggregateQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAnalyticsEvaluationsAggregatesQueryWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationAggregateQueryResponse';
        $request = $this->postAnalyticsEvaluationsAggregatesQueryRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationAggregateQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAnalyticsEvaluationsAggregatesQueryAsync
     *
     * Query for evaluation aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationAggregationQuery $body query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAnalyticsEvaluationsAggregatesQueryAsync($body)
    {
        return $this->postAnalyticsEvaluationsAggregatesQueryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAnalyticsEvaluationsAggregatesQueryAsyncWithHttpInfo
     *
     * Query for evaluation aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationAggregationQuery $body query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAnalyticsEvaluationsAggregatesQueryAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationAggregateQueryResponse';
        $request = $this->postAnalyticsEvaluationsAggregatesQueryRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAnalyticsEvaluationsAggregatesQuery'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationAggregationQuery $body query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postAnalyticsEvaluationsAggregatesQueryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postAnalyticsEvaluationsAggregatesQuery'
            );
        }

        $resourcePath = '/api/v2/analytics/evaluations/aggregates/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postAnalyticsSurveysAggregatesQuery
     *
     * Query for survey aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyAggregationQuery $body query (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyAggregateQueryResponse
     */
    public function postAnalyticsSurveysAggregatesQuery($body)
    {
        list($response) = $this->postAnalyticsSurveysAggregatesQueryWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postAnalyticsSurveysAggregatesQueryWithHttpInfo
     *
     * Query for survey aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyAggregationQuery $body query (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyAggregateQueryResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postAnalyticsSurveysAggregatesQueryWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyAggregateQueryResponse';
        $request = $this->postAnalyticsSurveysAggregatesQueryRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyAggregateQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postAnalyticsSurveysAggregatesQueryAsync
     *
     * Query for survey aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyAggregationQuery $body query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAnalyticsSurveysAggregatesQueryAsync($body)
    {
        return $this->postAnalyticsSurveysAggregatesQueryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postAnalyticsSurveysAggregatesQueryAsyncWithHttpInfo
     *
     * Query for survey aggregates
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyAggregationQuery $body query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postAnalyticsSurveysAggregatesQueryAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyAggregateQueryResponse';
        $request = $this->postAnalyticsSurveysAggregatesQueryRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postAnalyticsSurveysAggregatesQuery'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyAggregationQuery $body query (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postAnalyticsSurveysAggregatesQueryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postAnalyticsSurveysAggregatesQuery'
            );
        }

        $resourcePath = '/api/v2/analytics/surveys/aggregates/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityCalibrations
     *
     * Create a calibration
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CalibrationCreate $body calibration (required)
     * @param  string $expand calibratorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Calibration
     */
    public function postQualityCalibrations($body, $expand = null)
    {
        list($response) = $this->postQualityCalibrationsWithHttpInfo($body, $expand);
        return $response;
    }

    /**
     * Operation postQualityCalibrationsWithHttpInfo
     *
     * Create a calibration
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CalibrationCreate $body calibration (required)
     * @param  string $expand calibratorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Calibration, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityCalibrationsWithHttpInfo($body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->postQualityCalibrationsRequest($body, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Calibration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityCalibrationsAsync
     *
     * Create a calibration
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CalibrationCreate $body calibration (required)
     * @param  string $expand calibratorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityCalibrationsAsync($body, $expand = null)
    {
        return $this->postQualityCalibrationsAsyncWithHttpInfo($body, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityCalibrationsAsyncWithHttpInfo
     *
     * Create a calibration
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CalibrationCreate $body calibration (required)
     * @param  string $expand calibratorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityCalibrationsAsyncWithHttpInfo($body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->postQualityCalibrationsRequest($body, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityCalibrations'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CalibrationCreate $body calibration (required)
     * @param  string $expand calibratorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityCalibrationsRequest($body, $expand = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityCalibrations'
            );
        }

        $resourcePath = '/api/v2/quality/calibrations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityConversationEvaluations
     *
     * Create an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Evaluation
     */
    public function postQualityConversationEvaluations($conversationId, $body, $expand = null)
    {
        list($response) = $this->postQualityConversationEvaluationsWithHttpInfo($conversationId, $body, $expand);
        return $response;
    }

    /**
     * Operation postQualityConversationEvaluationsWithHttpInfo
     *
     * Create an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Evaluation, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityConversationEvaluationsWithHttpInfo($conversationId, $body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->postQualityConversationEvaluationsRequest($conversationId, $body, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Evaluation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityConversationEvaluationsAsync
     *
     * Create an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityConversationEvaluationsAsync($conversationId, $body, $expand = null)
    {
        return $this->postQualityConversationEvaluationsAsyncWithHttpInfo($conversationId, $body, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityConversationEvaluationsAsyncWithHttpInfo
     *
     * Create an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityConversationEvaluationsAsyncWithHttpInfo($conversationId, $body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->postQualityConversationEvaluationsRequest($conversationId, $body, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityConversationEvaluations'
     *
     * @param  string $conversationId conversationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityConversationEvaluationsRequest($conversationId, $body, $expand = null)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling postQualityConversationEvaluations'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityConversationEvaluations'
            );
        }

        $resourcePath = '/api/v2/quality/conversations/{conversationId}/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationId' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityEvaluationsScoring
     *
     * Score evaluation
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationFormAndScoringSet $body evaluationAndScoringSet (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationScoringSet
     */
    public function postQualityEvaluationsScoring($body)
    {
        list($response) = $this->postQualityEvaluationsScoringWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualityEvaluationsScoringWithHttpInfo
     *
     * Score evaluation
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationFormAndScoringSet $body evaluationAndScoringSet (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationScoringSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityEvaluationsScoringWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationScoringSet';
        $request = $this->postQualityEvaluationsScoringRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationScoringSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityEvaluationsScoringAsync
     *
     * Score evaluation
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationFormAndScoringSet $body evaluationAndScoringSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityEvaluationsScoringAsync($body)
    {
        return $this->postQualityEvaluationsScoringAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityEvaluationsScoringAsyncWithHttpInfo
     *
     * Score evaluation
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationFormAndScoringSet $body evaluationAndScoringSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityEvaluationsScoringAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationScoringSet';
        $request = $this->postQualityEvaluationsScoringRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityEvaluationsScoring'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationFormAndScoringSet $body evaluationAndScoringSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityEvaluationsScoringRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityEvaluationsScoring'
            );
        }

        $resourcePath = '/api/v2/quality/evaluations/scoring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityForms
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function postQualityForms($body)
    {
        list($response) = $this->postQualityFormsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualityFormsWithHttpInfo
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityFormsWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityFormsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityFormsAsync
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityFormsAsync($body)
    {
        return $this->postQualityFormsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityFormsAsyncWithHttpInfo
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityFormsAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityFormsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityForms'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityFormsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityForms'
            );
        }

        $resourcePath = '/api/v2/quality/forms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityFormsEvaluations
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function postQualityFormsEvaluations($body)
    {
        list($response) = $this->postQualityFormsEvaluationsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualityFormsEvaluationsWithHttpInfo
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityFormsEvaluationsWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityFormsEvaluationsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityFormsEvaluationsAsync
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityFormsEvaluationsAsync($body)
    {
        return $this->postQualityFormsEvaluationsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityFormsEvaluationsAsyncWithHttpInfo
     *
     * Create an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityFormsEvaluationsAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityFormsEvaluationsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityFormsEvaluations'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityFormsEvaluationsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityFormsEvaluations'
            );
        }

        $resourcePath = '/api/v2/quality/forms/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityFormsSurveys
     *
     * Create a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyForm
     */
    public function postQualityFormsSurveys($body)
    {
        list($response) = $this->postQualityFormsSurveysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualityFormsSurveysWithHttpInfo
     *
     * Create a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityFormsSurveysWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->postQualityFormsSurveysRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityFormsSurveysAsync
     *
     * Create a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityFormsSurveysAsync($body)
    {
        return $this->postQualityFormsSurveysAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityFormsSurveysAsyncWithHttpInfo
     *
     * Create a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityFormsSurveysAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->postQualityFormsSurveysRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityFormsSurveys'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityFormsSurveysRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityFormsSurveys'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityKeywordsets
     *
     * Create a Keyword Set
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     * @param  string $expand queueId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\KeywordSet
     */
    public function postQualityKeywordsets($body, $expand = null)
    {
        list($response) = $this->postQualityKeywordsetsWithHttpInfo($body, $expand);
        return $response;
    }

    /**
     * Operation postQualityKeywordsetsWithHttpInfo
     *
     * Create a Keyword Set
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     * @param  string $expand queueId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\KeywordSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityKeywordsetsWithHttpInfo($body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->postQualityKeywordsetsRequest($body, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\KeywordSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityKeywordsetsAsync
     *
     * Create a Keyword Set
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     * @param  string $expand queueId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityKeywordsetsAsync($body, $expand = null)
    {
        return $this->postQualityKeywordsetsAsyncWithHttpInfo($body, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityKeywordsetsAsyncWithHttpInfo
     *
     * Create a Keyword Set
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     * @param  string $expand queueId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityKeywordsetsAsyncWithHttpInfo($body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->postQualityKeywordsetsRequest($body, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityKeywordsets'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     * @param  string $expand queueId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityKeywordsetsRequest($body, $expand = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityKeywordsets'
            );
        }

        $resourcePath = '/api/v2/quality/keywordsets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityPublishedforms
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function postQualityPublishedforms($body)
    {
        list($response) = $this->postQualityPublishedformsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualityPublishedformsWithHttpInfo
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityPublishedformsWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityPublishedformsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityPublishedformsAsync
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityPublishedformsAsync($body)
    {
        return $this->postQualityPublishedformsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityPublishedformsAsyncWithHttpInfo
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityPublishedformsAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityPublishedformsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityPublishedforms'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityPublishedformsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityPublishedforms'
            );
        }

        $resourcePath = '/api/v2/quality/publishedforms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityPublishedformsEvaluations
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function postQualityPublishedformsEvaluations($body)
    {
        list($response) = $this->postQualityPublishedformsEvaluationsWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualityPublishedformsEvaluationsWithHttpInfo
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityPublishedformsEvaluationsWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityPublishedformsEvaluationsRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityPublishedformsEvaluationsAsync
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityPublishedformsEvaluationsAsync($body)
    {
        return $this->postQualityPublishedformsEvaluationsAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityPublishedformsEvaluationsAsyncWithHttpInfo
     *
     * Publish an evaluation form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityPublishedformsEvaluationsAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->postQualityPublishedformsEvaluationsRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityPublishedformsEvaluations'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Publish request containing id of form to publish (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityPublishedformsEvaluationsRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityPublishedformsEvaluations'
            );
        }

        $resourcePath = '/api/v2/quality/publishedforms/evaluations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualityPublishedformsSurveys
     *
     * Publish a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyForm
     */
    public function postQualityPublishedformsSurveys($body)
    {
        list($response) = $this->postQualityPublishedformsSurveysWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualityPublishedformsSurveysWithHttpInfo
     *
     * Publish a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualityPublishedformsSurveysWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->postQualityPublishedformsSurveysRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualityPublishedformsSurveysAsync
     *
     * Publish a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityPublishedformsSurveysAsync($body)
    {
        return $this->postQualityPublishedformsSurveysAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualityPublishedformsSurveysAsyncWithHttpInfo
     *
     * Publish a survey form.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualityPublishedformsSurveysAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->postQualityPublishedformsSurveysRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualityPublishedformsSurveys'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\PublishForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualityPublishedformsSurveysRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualityPublishedformsSurveys'
            );
        }

        $resourcePath = '/api/v2/quality/publishedforms/surveys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualitySpotability
     *
     * Retrieve the spotability statistic
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body Keyword Set (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\KeywordSet
     */
    public function postQualitySpotability($body = null)
    {
        list($response) = $this->postQualitySpotabilityWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualitySpotabilityWithHttpInfo
     *
     * Retrieve the spotability statistic
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body Keyword Set (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\KeywordSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualitySpotabilityWithHttpInfo($body = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->postQualitySpotabilityRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\KeywordSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualitySpotabilityAsync
     *
     * Retrieve the spotability statistic
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body Keyword Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualitySpotabilityAsync($body = null)
    {
        return $this->postQualitySpotabilityAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualitySpotabilityAsyncWithHttpInfo
     *
     * Retrieve the spotability statistic
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body Keyword Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualitySpotabilityAsyncWithHttpInfo($body = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->postQualitySpotabilityRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualitySpotability'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body Keyword Set (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualitySpotabilityRequest($body = null)
    {

        $resourcePath = '/api/v2/quality/spotability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postQualitySurveysScoring
     *
     * Score survey
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyFormAndScoringSet $body surveyAndScoringSet (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyScoringSet
     */
    public function postQualitySurveysScoring($body)
    {
        list($response) = $this->postQualitySurveysScoringWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postQualitySurveysScoringWithHttpInfo
     *
     * Score survey
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyFormAndScoringSet $body surveyAndScoringSet (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyScoringSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function postQualitySurveysScoringWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyScoringSet';
        $request = $this->postQualitySurveysScoringRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyScoringSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postQualitySurveysScoringAsync
     *
     * Score survey
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyFormAndScoringSet $body surveyAndScoringSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualitySurveysScoringAsync($body)
    {
        return $this->postQualitySurveysScoringAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postQualitySurveysScoringAsyncWithHttpInfo
     *
     * Score survey
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyFormAndScoringSet $body surveyAndScoringSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postQualitySurveysScoringAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyScoringSet';
        $request = $this->postQualitySurveysScoringRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postQualitySurveysScoring'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyFormAndScoringSet $body surveyAndScoringSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postQualitySurveysScoringRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postQualitySurveysScoring'
            );
        }

        $resourcePath = '/api/v2/quality/surveys/scoring';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQualityCalibration
     *
     * Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Calibration $body Calibration (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Calibration
     */
    public function putQualityCalibration($calibrationId, $body)
    {
        list($response) = $this->putQualityCalibrationWithHttpInfo($calibrationId, $body);
        return $response;
    }

    /**
     * Operation putQualityCalibrationWithHttpInfo
     *
     * Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Calibration $body Calibration (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Calibration, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQualityCalibrationWithHttpInfo($calibrationId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->putQualityCalibrationRequest($calibrationId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Calibration',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQualityCalibrationAsync
     *
     * Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Calibration $body Calibration (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityCalibrationAsync($calibrationId, $body)
    {
        return $this->putQualityCalibrationAsyncWithHttpInfo($calibrationId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQualityCalibrationAsyncWithHttpInfo
     *
     * Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Calibration $body Calibration (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityCalibrationAsyncWithHttpInfo($calibrationId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Calibration';
        $request = $this->putQualityCalibrationRequest($calibrationId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQualityCalibration'
     *
     * @param  string $calibrationId Calibration ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Calibration $body Calibration (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQualityCalibrationRequest($calibrationId, $body)
    {
        // verify the required parameter 'calibrationId' is set
        if ($calibrationId === null || (is_array($calibrationId) && count($calibrationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $calibrationId when calling putQualityCalibration'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putQualityCalibration'
            );
        }

        $resourcePath = '/api/v2/quality/calibrations/{calibrationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($calibrationId !== null) {
            $resourcePath = str_replace(
                '{' . 'calibrationId' . '}',
                ObjectSerializer::toPathValue($calibrationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQualityConversationEvaluation
     *
     * Update an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Evaluation
     */
    public function putQualityConversationEvaluation($conversationId, $evaluationId, $body, $expand = null)
    {
        list($response) = $this->putQualityConversationEvaluationWithHttpInfo($conversationId, $evaluationId, $body, $expand);
        return $response;
    }

    /**
     * Operation putQualityConversationEvaluationWithHttpInfo
     *
     * Update an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Evaluation, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQualityConversationEvaluationWithHttpInfo($conversationId, $evaluationId, $body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->putQualityConversationEvaluationRequest($conversationId, $evaluationId, $body, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Evaluation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQualityConversationEvaluationAsync
     *
     * Update an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityConversationEvaluationAsync($conversationId, $evaluationId, $body, $expand = null)
    {
        return $this->putQualityConversationEvaluationAsyncWithHttpInfo($conversationId, $evaluationId, $body, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQualityConversationEvaluationAsyncWithHttpInfo
     *
     * Update an evaluation
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityConversationEvaluationAsyncWithHttpInfo($conversationId, $evaluationId, $body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Evaluation';
        $request = $this->putQualityConversationEvaluationRequest($conversationId, $evaluationId, $body, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQualityConversationEvaluation'
     *
     * @param  string $conversationId conversationId (required)
     * @param  string $evaluationId evaluationId (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Evaluation $body evaluation (required)
     * @param  string $expand evaluatorId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQualityConversationEvaluationRequest($conversationId, $evaluationId, $body, $expand = null)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling putQualityConversationEvaluation'
            );
        }
        // verify the required parameter 'evaluationId' is set
        if ($evaluationId === null || (is_array($evaluationId) && count($evaluationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evaluationId when calling putQualityConversationEvaluation'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putQualityConversationEvaluation'
            );
        }

        $resourcePath = '/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversationId' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }
        // path params
        if ($evaluationId !== null) {
            $resourcePath = str_replace(
                '{' . 'evaluationId' . '}',
                ObjectSerializer::toPathValue($evaluationId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQualityForm
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function putQualityForm($formId, $body)
    {
        list($response) = $this->putQualityFormWithHttpInfo($formId, $body);
        return $response;
    }

    /**
     * Operation putQualityFormWithHttpInfo
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQualityFormWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->putQualityFormRequest($formId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQualityFormAsync
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityFormAsync($formId, $body)
    {
        return $this->putQualityFormAsyncWithHttpInfo($formId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQualityFormAsyncWithHttpInfo
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityFormAsyncWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->putQualityFormRequest($formId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQualityForm'
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQualityFormRequest($formId, $body)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling putQualityForm'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putQualityForm'
            );
        }

        $resourcePath = '/api/v2/quality/forms/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQualityFormsEvaluation
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function putQualityFormsEvaluation($formId, $body)
    {
        list($response) = $this->putQualityFormsEvaluationWithHttpInfo($formId, $body);
        return $response;
    }

    /**
     * Operation putQualityFormsEvaluationWithHttpInfo
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\EvaluationForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQualityFormsEvaluationWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->putQualityFormsEvaluationRequest($formId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQualityFormsEvaluationAsync
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityFormsEvaluationAsync($formId, $body)
    {
        return $this->putQualityFormsEvaluationAsyncWithHttpInfo($formId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQualityFormsEvaluationAsyncWithHttpInfo
     *
     * Update an evaluation form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityFormsEvaluationAsyncWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\EvaluationForm';
        $request = $this->putQualityFormsEvaluationRequest($formId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQualityFormsEvaluation'
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\EvaluationForm $body Evaluation form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQualityFormsEvaluationRequest($formId, $body)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling putQualityFormsEvaluation'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putQualityFormsEvaluation'
            );
        }

        $resourcePath = '/api/v2/quality/forms/evaluations/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQualityFormsSurvey
     *
     * Update a survey form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SurveyForm
     */
    public function putQualityFormsSurvey($formId, $body)
    {
        list($response) = $this->putQualityFormsSurveyWithHttpInfo($formId, $body);
        return $response;
    }

    /**
     * Operation putQualityFormsSurveyWithHttpInfo
     *
     * Update a survey form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SurveyForm, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQualityFormsSurveyWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->putQualityFormsSurveyRequest($formId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SurveyForm',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQualityFormsSurveyAsync
     *
     * Update a survey form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityFormsSurveyAsync($formId, $body)
    {
        return $this->putQualityFormsSurveyAsyncWithHttpInfo($formId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQualityFormsSurveyAsyncWithHttpInfo
     *
     * Update a survey form.
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityFormsSurveyAsyncWithHttpInfo($formId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SurveyForm';
        $request = $this->putQualityFormsSurveyRequest($formId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQualityFormsSurvey'
     *
     * @param  string $formId Form ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\SurveyForm $body Survey form (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQualityFormsSurveyRequest($formId, $body)
    {
        // verify the required parameter 'formId' is set
        if ($formId === null || (is_array($formId) && count($formId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $formId when calling putQualityFormsSurvey'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putQualityFormsSurvey'
            );
        }

        $resourcePath = '/api/v2/quality/forms/surveys/{formId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($formId !== null) {
            $resourcePath = str_replace(
                '{' . 'formId' . '}',
                ObjectSerializer::toPathValue($formId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQualityKeywordset
     *
     * Update a keywordSet to the specified keywordSet via PUT.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\KeywordSet
     */
    public function putQualityKeywordset($keywordSetId, $body)
    {
        list($response) = $this->putQualityKeywordsetWithHttpInfo($keywordSetId, $body);
        return $response;
    }

    /**
     * Operation putQualityKeywordsetWithHttpInfo
     *
     * Update a keywordSet to the specified keywordSet via PUT.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\KeywordSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQualityKeywordsetWithHttpInfo($keywordSetId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->putQualityKeywordsetRequest($keywordSetId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\KeywordSet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQualityKeywordsetAsync
     *
     * Update a keywordSet to the specified keywordSet via PUT.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityKeywordsetAsync($keywordSetId, $body)
    {
        return $this->putQualityKeywordsetAsyncWithHttpInfo($keywordSetId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQualityKeywordsetAsyncWithHttpInfo
     *
     * Update a keywordSet to the specified keywordSet via PUT.
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualityKeywordsetAsyncWithHttpInfo($keywordSetId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\KeywordSet';
        $request = $this->putQualityKeywordsetRequest($keywordSetId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQualityKeywordset'
     *
     * @param  string $keywordSetId KeywordSet ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\KeywordSet $body keywordSet (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQualityKeywordsetRequest($keywordSetId, $body)
    {
        // verify the required parameter 'keywordSetId' is set
        if ($keywordSetId === null || (is_array($keywordSetId) && count($keywordSetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $keywordSetId when calling putQualityKeywordset'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putQualityKeywordset'
            );
        }

        $resourcePath = '/api/v2/quality/keywordsets/{keywordSetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($keywordSetId !== null) {
            $resourcePath = str_replace(
                '{' . 'keywordSetId' . '}',
                ObjectSerializer::toPathValue($keywordSetId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putQualitySurveysScorable
     *
     * Update a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ScorableSurvey $body survey (required)
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\ScorableSurvey
     */
    public function putQualitySurveysScorable($body, $customerSurveyUrl = null)
    {
        list($response) = $this->putQualitySurveysScorableWithHttpInfo($body, $customerSurveyUrl);
        return $response;
    }

    /**
     * Operation putQualitySurveysScorableWithHttpInfo
     *
     * Update a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ScorableSurvey $body survey (required)
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\ScorableSurvey, HTTP status code, HTTP response headers (array of strings)
     */
    public function putQualitySurveysScorableWithHttpInfo($body, $customerSurveyUrl = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ScorableSurvey';
        $request = $this->putQualitySurveysScorableRequest($body, $customerSurveyUrl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ScorableSurvey',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putQualitySurveysScorableAsync
     *
     * Update a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ScorableSurvey $body survey (required)
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualitySurveysScorableAsync($body, $customerSurveyUrl = null)
    {
        return $this->putQualitySurveysScorableAsyncWithHttpInfo($body, $customerSurveyUrl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putQualitySurveysScorableAsyncWithHttpInfo
     *
     * Update a survey as an end-customer, for the purposes of scoring it.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ScorableSurvey $body survey (required)
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putQualitySurveysScorableAsyncWithHttpInfo($body, $customerSurveyUrl = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ScorableSurvey';
        $request = $this->putQualitySurveysScorableRequest($body, $customerSurveyUrl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putQualitySurveysScorable'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ScorableSurvey $body survey (required)
     * @param  string $customerSurveyUrl customerSurveyUrl (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putQualitySurveysScorableRequest($body, $customerSurveyUrl = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putQualitySurveysScorable'
            );
        }

        $resourcePath = '/api/v2/quality/surveys/scorable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customerSurveyUrl !== null) {
            $queryParams['customerSurveyUrl'] = ObjectSerializer::toQueryValue($customerSurveyUrl);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
