<?php
/**
 * ContentManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PureCloudPlatform\Client\V2\ApiException;
use PureCloudPlatform\Client\V2\Configuration;
use PureCloudPlatform\Client\V2\HeaderSelector;
use PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ContentManagementApi Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContentManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteContentmanagementDocument
     *
     * Delete a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteContentmanagementDocument($documentId, $override = null)
    {
        $this->deleteContentmanagementDocumentWithHttpInfo($documentId, $override);
    }

    /**
     * Operation deleteContentmanagementDocumentWithHttpInfo
     *
     * Delete a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentmanagementDocumentWithHttpInfo($documentId, $override = null)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementDocumentRequest($documentId, $override);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentmanagementDocumentAsync
     *
     * Delete a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementDocumentAsync($documentId, $override = null)
    {
        return $this->deleteContentmanagementDocumentAsyncWithHttpInfo($documentId, $override)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentmanagementDocumentAsyncWithHttpInfo
     *
     * Delete a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementDocumentAsyncWithHttpInfo($documentId, $override = null)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementDocumentRequest($documentId, $override);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentmanagementDocument'
     *
     * @param  string $documentId Document ID (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContentmanagementDocumentRequest($documentId, $override = null)
    {
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling deleteContentmanagementDocument'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($override !== null) {
            $queryParams['override'] = ObjectSerializer::toQueryValue($override);
        }

        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContentmanagementShare
     *
     * Deletes an existing share.
     *
     * @param  string $shareId Share ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteContentmanagementShare($shareId)
    {
        $this->deleteContentmanagementShareWithHttpInfo($shareId);
    }

    /**
     * Operation deleteContentmanagementShareWithHttpInfo
     *
     * Deletes an existing share.
     *
     * @param  string $shareId Share ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentmanagementShareWithHttpInfo($shareId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementShareRequest($shareId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentmanagementShareAsync
     *
     * Deletes an existing share.
     *
     * @param  string $shareId Share ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementShareAsync($shareId)
    {
        return $this->deleteContentmanagementShareAsyncWithHttpInfo($shareId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentmanagementShareAsyncWithHttpInfo
     *
     * Deletes an existing share.
     *
     * @param  string $shareId Share ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementShareAsyncWithHttpInfo($shareId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementShareRequest($shareId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentmanagementShare'
     *
     * @param  string $shareId Share ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContentmanagementShareRequest($shareId)
    {
        // verify the required parameter 'shareId' is set
        if ($shareId === null || (is_array($shareId) && count($shareId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shareId when calling deleteContentmanagementShare'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/shares/{shareId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($shareId !== null) {
            $resourcePath = str_replace(
                '{' . 'shareId' . '}',
                ObjectSerializer::toPathValue($shareId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContentmanagementStatusStatusId
     *
     * Cancel the command for this status
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteContentmanagementStatusStatusId($statusId)
    {
        $this->deleteContentmanagementStatusStatusIdWithHttpInfo($statusId);
    }

    /**
     * Operation deleteContentmanagementStatusStatusIdWithHttpInfo
     *
     * Cancel the command for this status
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentmanagementStatusStatusIdWithHttpInfo($statusId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementStatusStatusIdRequest($statusId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentmanagementStatusStatusIdAsync
     *
     * Cancel the command for this status
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementStatusStatusIdAsync($statusId)
    {
        return $this->deleteContentmanagementStatusStatusIdAsyncWithHttpInfo($statusId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentmanagementStatusStatusIdAsyncWithHttpInfo
     *
     * Cancel the command for this status
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementStatusStatusIdAsyncWithHttpInfo($statusId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementStatusStatusIdRequest($statusId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentmanagementStatusStatusId'
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContentmanagementStatusStatusIdRequest($statusId)
    {
        // verify the required parameter 'statusId' is set
        if ($statusId === null || (is_array($statusId) && count($statusId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statusId when calling deleteContentmanagementStatusStatusId'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/status/{statusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($statusId !== null) {
            $resourcePath = str_replace(
                '{' . 'statusId' . '}',
                ObjectSerializer::toPathValue($statusId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContentmanagementWorkspace
     *
     * Delete a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $moveChildrenToWorkspaceId New location for objects in deleted workspace. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteContentmanagementWorkspace($workspaceId, $moveChildrenToWorkspaceId = null)
    {
        $this->deleteContentmanagementWorkspaceWithHttpInfo($workspaceId, $moveChildrenToWorkspaceId);
    }

    /**
     * Operation deleteContentmanagementWorkspaceWithHttpInfo
     *
     * Delete a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $moveChildrenToWorkspaceId New location for objects in deleted workspace. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentmanagementWorkspaceWithHttpInfo($workspaceId, $moveChildrenToWorkspaceId = null)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementWorkspaceRequest($workspaceId, $moveChildrenToWorkspaceId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentmanagementWorkspaceAsync
     *
     * Delete a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $moveChildrenToWorkspaceId New location for objects in deleted workspace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementWorkspaceAsync($workspaceId, $moveChildrenToWorkspaceId = null)
    {
        return $this->deleteContentmanagementWorkspaceAsyncWithHttpInfo($workspaceId, $moveChildrenToWorkspaceId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentmanagementWorkspaceAsyncWithHttpInfo
     *
     * Delete a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $moveChildrenToWorkspaceId New location for objects in deleted workspace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementWorkspaceAsyncWithHttpInfo($workspaceId, $moveChildrenToWorkspaceId = null)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementWorkspaceRequest($workspaceId, $moveChildrenToWorkspaceId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentmanagementWorkspace'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $moveChildrenToWorkspaceId New location for objects in deleted workspace. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContentmanagementWorkspaceRequest($workspaceId, $moveChildrenToWorkspaceId = null)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling deleteContentmanagementWorkspace'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($moveChildrenToWorkspaceId !== null) {
            $queryParams['moveChildrenToWorkspaceId'] = ObjectSerializer::toQueryValue($moveChildrenToWorkspaceId);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContentmanagementWorkspaceMember
     *
     * Delete a member from a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteContentmanagementWorkspaceMember($workspaceId, $memberId)
    {
        $this->deleteContentmanagementWorkspaceMemberWithHttpInfo($workspaceId, $memberId);
    }

    /**
     * Operation deleteContentmanagementWorkspaceMemberWithHttpInfo
     *
     * Delete a member from a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentmanagementWorkspaceMemberWithHttpInfo($workspaceId, $memberId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementWorkspaceMemberRequest($workspaceId, $memberId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentmanagementWorkspaceMemberAsync
     *
     * Delete a member from a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementWorkspaceMemberAsync($workspaceId, $memberId)
    {
        return $this->deleteContentmanagementWorkspaceMemberAsyncWithHttpInfo($workspaceId, $memberId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentmanagementWorkspaceMemberAsyncWithHttpInfo
     *
     * Delete a member from a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementWorkspaceMemberAsyncWithHttpInfo($workspaceId, $memberId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementWorkspaceMemberRequest($workspaceId, $memberId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentmanagementWorkspaceMember'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContentmanagementWorkspaceMemberRequest($workspaceId, $memberId)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling deleteContentmanagementWorkspaceMember'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling deleteContentmanagementWorkspaceMember'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteContentmanagementWorkspaceTagvalue
     *
     * Delete workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteContentmanagementWorkspaceTagvalue($workspaceId, $tagId)
    {
        $this->deleteContentmanagementWorkspaceTagvalueWithHttpInfo($workspaceId, $tagId);
    }

    /**
     * Operation deleteContentmanagementWorkspaceTagvalueWithHttpInfo
     *
     * Delete workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteContentmanagementWorkspaceTagvalueWithHttpInfo($workspaceId, $tagId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteContentmanagementWorkspaceTagvalueAsync
     *
     * Delete workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementWorkspaceTagvalueAsync($workspaceId, $tagId)
    {
        return $this->deleteContentmanagementWorkspaceTagvalueAsyncWithHttpInfo($workspaceId, $tagId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteContentmanagementWorkspaceTagvalueAsyncWithHttpInfo
     *
     * Delete workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteContentmanagementWorkspaceTagvalueAsyncWithHttpInfo($workspaceId, $tagId)
    {
        $returnType = '';
        $request = $this->deleteContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteContentmanagementWorkspaceTagvalue'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling deleteContentmanagementWorkspaceTagvalue'
            );
        }
        // verify the required parameter 'tagId' is set
        if ($tagId === null || (is_array($tagId) && count($tagId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagId when calling deleteContentmanagementWorkspaceTagvalue'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }
        // path params
        if ($tagId !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tagId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementDocument
     *
     * Get a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Document
     */
    public function getContentmanagementDocument($documentId, $expand = null)
    {
        list($response) = $this->getContentmanagementDocumentWithHttpInfo($documentId, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementDocumentWithHttpInfo
     *
     * Get a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementDocumentWithHttpInfo($documentId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Document';
        $request = $this->getContentmanagementDocumentRequest($documentId, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementDocumentAsync
     *
     * Get a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentAsync($documentId, $expand = null)
    {
        return $this->getContentmanagementDocumentAsyncWithHttpInfo($documentId, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementDocumentAsyncWithHttpInfo
     *
     * Get a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentAsyncWithHttpInfo($documentId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Document';
        $request = $this->getContentmanagementDocumentRequest($documentId, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementDocument'
     *
     * @param  string $documentId Document ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementDocumentRequest($documentId, $expand = null)
    {
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling getContentmanagementDocument'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementDocumentAudits
     *
     * Get a list of audits for a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $transactionFilter Transaction filter (optional)
     * @param  string $level level (optional, default to USER)
     * @param  string $sortBy Sort by (optional)
     * @param  string $sortOrder Sort order (optional, default to ascending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\DocumentAuditEntityListing
     */
    public function getContentmanagementDocumentAudits($documentId, $pageSize = '25', $pageNumber = '1', $transactionFilter = null, $level = 'USER', $sortBy = null, $sortOrder = 'ascending')
    {
        list($response) = $this->getContentmanagementDocumentAuditsWithHttpInfo($documentId, $pageSize, $pageNumber, $transactionFilter, $level, $sortBy, $sortOrder);
        return $response;
    }

    /**
     * Operation getContentmanagementDocumentAuditsWithHttpInfo
     *
     * Get a list of audits for a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $transactionFilter Transaction filter (optional)
     * @param  string $level level (optional, default to USER)
     * @param  string $sortBy Sort by (optional)
     * @param  string $sortOrder Sort order (optional, default to ascending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\DocumentAuditEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementDocumentAuditsWithHttpInfo($documentId, $pageSize = '25', $pageNumber = '1', $transactionFilter = null, $level = 'USER', $sortBy = null, $sortOrder = 'ascending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DocumentAuditEntityListing';
        $request = $this->getContentmanagementDocumentAuditsRequest($documentId, $pageSize, $pageNumber, $transactionFilter, $level, $sortBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\DocumentAuditEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementDocumentAuditsAsync
     *
     * Get a list of audits for a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $transactionFilter Transaction filter (optional)
     * @param  string $level level (optional, default to USER)
     * @param  string $sortBy Sort by (optional)
     * @param  string $sortOrder Sort order (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentAuditsAsync($documentId, $pageSize = '25', $pageNumber = '1', $transactionFilter = null, $level = 'USER', $sortBy = null, $sortOrder = 'ascending')
    {
        return $this->getContentmanagementDocumentAuditsAsyncWithHttpInfo($documentId, $pageSize, $pageNumber, $transactionFilter, $level, $sortBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementDocumentAuditsAsyncWithHttpInfo
     *
     * Get a list of audits for a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $transactionFilter Transaction filter (optional)
     * @param  string $level level (optional, default to USER)
     * @param  string $sortBy Sort by (optional)
     * @param  string $sortOrder Sort order (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentAuditsAsyncWithHttpInfo($documentId, $pageSize = '25', $pageNumber = '1', $transactionFilter = null, $level = 'USER', $sortBy = null, $sortOrder = 'ascending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DocumentAuditEntityListing';
        $request = $this->getContentmanagementDocumentAuditsRequest($documentId, $pageSize, $pageNumber, $transactionFilter, $level, $sortBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementDocumentAudits'
     *
     * @param  string $documentId Document ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $transactionFilter Transaction filter (optional)
     * @param  string $level level (optional, default to USER)
     * @param  string $sortBy Sort by (optional)
     * @param  string $sortOrder Sort order (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementDocumentAuditsRequest($documentId, $pageSize = '25', $pageNumber = '1', $transactionFilter = null, $level = 'USER', $sortBy = null, $sortOrder = 'ascending')
    {
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling getContentmanagementDocumentAudits'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents/{documentId}/audits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($transactionFilter !== null) {
            $queryParams['transactionFilter'] = ObjectSerializer::toQueryValue($transactionFilter);
        }
        // query params
        if ($level !== null) {
            $queryParams['level'] = ObjectSerializer::toQueryValue($level);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }

        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementDocumentContent
     *
     * Download a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string $disposition Request how the content will be downloaded: a file attachment or inline. Default is attachment. (optional)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\DownloadResponse
     */
    public function getContentmanagementDocumentContent($documentId, $disposition = null, $contentType = null)
    {
        list($response) = $this->getContentmanagementDocumentContentWithHttpInfo($documentId, $disposition, $contentType);
        return $response;
    }

    /**
     * Operation getContentmanagementDocumentContentWithHttpInfo
     *
     * Download a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string $disposition Request how the content will be downloaded: a file attachment or inline. Default is attachment. (optional)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\DownloadResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementDocumentContentWithHttpInfo($documentId, $disposition = null, $contentType = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DownloadResponse';
        $request = $this->getContentmanagementDocumentContentRequest($documentId, $disposition, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\DownloadResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementDocumentContentAsync
     *
     * Download a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string $disposition Request how the content will be downloaded: a file attachment or inline. Default is attachment. (optional)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentContentAsync($documentId, $disposition = null, $contentType = null)
    {
        return $this->getContentmanagementDocumentContentAsyncWithHttpInfo($documentId, $disposition, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementDocumentContentAsyncWithHttpInfo
     *
     * Download a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  string $disposition Request how the content will be downloaded: a file attachment or inline. Default is attachment. (optional)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentContentAsyncWithHttpInfo($documentId, $disposition = null, $contentType = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DownloadResponse';
        $request = $this->getContentmanagementDocumentContentRequest($documentId, $disposition, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementDocumentContent'
     *
     * @param  string $documentId Document ID (required)
     * @param  string $disposition Request how the content will be downloaded: a file attachment or inline. Default is attachment. (optional)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementDocumentContentRequest($documentId, $disposition = null, $contentType = null)
    {
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling getContentmanagementDocumentContent'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents/{documentId}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($disposition !== null) {
            $queryParams['disposition'] = ObjectSerializer::toQueryValue($disposition);
        }
        // query params
        if ($contentType !== null) {
            $queryParams['contentType'] = ObjectSerializer::toQueryValue($contentType);
        }

        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementDocuments
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $name Name (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\DocumentEntityListing
     */
    public function getContentmanagementDocuments($workspaceId, $name = null, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        list($response) = $this->getContentmanagementDocumentsWithHttpInfo($workspaceId, $name, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder);
        return $response;
    }

    /**
     * Operation getContentmanagementDocumentsWithHttpInfo
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $name Name (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\DocumentEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementDocumentsWithHttpInfo($workspaceId, $name = null, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DocumentEntityListing';
        $request = $this->getContentmanagementDocumentsRequest($workspaceId, $name, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\DocumentEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementDocumentsAsync
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $name Name (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentsAsync($workspaceId, $name = null, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        return $this->getContentmanagementDocumentsAsyncWithHttpInfo($workspaceId, $name, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementDocumentsAsyncWithHttpInfo
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $name Name (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementDocumentsAsyncWithHttpInfo($workspaceId, $name = null, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DocumentEntityListing';
        $request = $this->getContentmanagementDocumentsRequest($workspaceId, $name, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementDocuments'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $name Name (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementDocumentsRequest($workspaceId, $name = null, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling getContentmanagementDocuments'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($workspaceId !== null) {
            $queryParams['workspaceId'] = ObjectSerializer::toQueryValue($workspaceId);
        }
        // query params
        if ($name !== null) {
            $queryParams['name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementQuery
     *
     * Query content
     *
     * @param  string $queryPhrase Phrase tokens are ANDed together over all searchable fields (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional, default to name)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\QueryResults
     */
    public function getContentmanagementQuery($queryPhrase, $pageSize = '25', $pageNumber = '1', $sortBy = 'name', $sortOrder = 'ascending', $expand = null)
    {
        list($response) = $this->getContentmanagementQueryWithHttpInfo($queryPhrase, $pageSize, $pageNumber, $sortBy, $sortOrder, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementQueryWithHttpInfo
     *
     * Query content
     *
     * @param  string $queryPhrase Phrase tokens are ANDed together over all searchable fields (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional, default to name)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\QueryResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementQueryWithHttpInfo($queryPhrase, $pageSize = '25', $pageNumber = '1', $sortBy = 'name', $sortOrder = 'ascending', $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QueryResults';
        $request = $this->getContentmanagementQueryRequest($queryPhrase, $pageSize, $pageNumber, $sortBy, $sortOrder, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\QueryResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementQueryAsync
     *
     * Query content
     *
     * @param  string $queryPhrase Phrase tokens are ANDed together over all searchable fields (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional, default to name)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementQueryAsync($queryPhrase, $pageSize = '25', $pageNumber = '1', $sortBy = 'name', $sortOrder = 'ascending', $expand = null)
    {
        return $this->getContentmanagementQueryAsyncWithHttpInfo($queryPhrase, $pageSize, $pageNumber, $sortBy, $sortOrder, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementQueryAsyncWithHttpInfo
     *
     * Query content
     *
     * @param  string $queryPhrase Phrase tokens are ANDed together over all searchable fields (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional, default to name)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementQueryAsyncWithHttpInfo($queryPhrase, $pageSize = '25', $pageNumber = '1', $sortBy = 'name', $sortOrder = 'ascending', $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QueryResults';
        $request = $this->getContentmanagementQueryRequest($queryPhrase, $pageSize, $pageNumber, $sortBy, $sortOrder, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementQuery'
     *
     * @param  string $queryPhrase Phrase tokens are ANDed together over all searchable fields (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional, default to name)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementQueryRequest($queryPhrase, $pageSize = '25', $pageNumber = '1', $sortBy = 'name', $sortOrder = 'ascending', $expand = null)
    {
        // verify the required parameter 'queryPhrase' is set
        if ($queryPhrase === null || (is_array($queryPhrase) && count($queryPhrase) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryPhrase when calling getContentmanagementQuery'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }
        // query params
        if ($queryPhrase !== null) {
            $queryParams['queryPhrase'] = ObjectSerializer::toQueryValue($queryPhrase);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementSecurityprofile
     *
     * Get a Security Profile
     *
     * @param  string $securityProfileId Security Profile Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SecurityProfile
     */
    public function getContentmanagementSecurityprofile($securityProfileId)
    {
        list($response) = $this->getContentmanagementSecurityprofileWithHttpInfo($securityProfileId);
        return $response;
    }

    /**
     * Operation getContentmanagementSecurityprofileWithHttpInfo
     *
     * Get a Security Profile
     *
     * @param  string $securityProfileId Security Profile Id (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SecurityProfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementSecurityprofileWithHttpInfo($securityProfileId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SecurityProfile';
        $request = $this->getContentmanagementSecurityprofileRequest($securityProfileId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SecurityProfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementSecurityprofileAsync
     *
     * Get a Security Profile
     *
     * @param  string $securityProfileId Security Profile Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSecurityprofileAsync($securityProfileId)
    {
        return $this->getContentmanagementSecurityprofileAsyncWithHttpInfo($securityProfileId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementSecurityprofileAsyncWithHttpInfo
     *
     * Get a Security Profile
     *
     * @param  string $securityProfileId Security Profile Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSecurityprofileAsyncWithHttpInfo($securityProfileId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SecurityProfile';
        $request = $this->getContentmanagementSecurityprofileRequest($securityProfileId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementSecurityprofile'
     *
     * @param  string $securityProfileId Security Profile Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementSecurityprofileRequest($securityProfileId)
    {
        // verify the required parameter 'securityProfileId' is set
        if ($securityProfileId === null || (is_array($securityProfileId) && count($securityProfileId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $securityProfileId when calling getContentmanagementSecurityprofile'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/securityprofiles/{securityProfileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($securityProfileId !== null) {
            $resourcePath = str_replace(
                '{' . 'securityProfileId' . '}',
                ObjectSerializer::toPathValue($securityProfileId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementSecurityprofiles
     *
     * Get a List of Security Profiles
     *
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SecurityProfileEntityListing
     */
    public function getContentmanagementSecurityprofiles()
    {
        list($response) = $this->getContentmanagementSecurityprofilesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getContentmanagementSecurityprofilesWithHttpInfo
     *
     * Get a List of Security Profiles
     *
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SecurityProfileEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementSecurityprofilesWithHttpInfo()
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SecurityProfileEntityListing';
        $request = $this->getContentmanagementSecurityprofilesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SecurityProfileEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementSecurityprofilesAsync
     *
     * Get a List of Security Profiles
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSecurityprofilesAsync()
    {
        return $this->getContentmanagementSecurityprofilesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementSecurityprofilesAsyncWithHttpInfo
     *
     * Get a List of Security Profiles
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSecurityprofilesAsyncWithHttpInfo()
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SecurityProfileEntityListing';
        $request = $this->getContentmanagementSecurityprofilesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementSecurityprofiles'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementSecurityprofilesRequest()
    {

        $resourcePath = '/api/v2/contentmanagement/securityprofiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementShare
     *
     * Retrieve details about an existing share.
     *
     * @param  string $shareId Share ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Share
     */
    public function getContentmanagementShare($shareId, $expand = null)
    {
        list($response) = $this->getContentmanagementShareWithHttpInfo($shareId, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementShareWithHttpInfo
     *
     * Retrieve details about an existing share.
     *
     * @param  string $shareId Share ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Share, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementShareWithHttpInfo($shareId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Share';
        $request = $this->getContentmanagementShareRequest($shareId, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Share',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementShareAsync
     *
     * Retrieve details about an existing share.
     *
     * @param  string $shareId Share ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementShareAsync($shareId, $expand = null)
    {
        return $this->getContentmanagementShareAsyncWithHttpInfo($shareId, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementShareAsyncWithHttpInfo
     *
     * Retrieve details about an existing share.
     *
     * @param  string $shareId Share ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementShareAsyncWithHttpInfo($shareId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Share';
        $request = $this->getContentmanagementShareRequest($shareId, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementShare'
     *
     * @param  string $shareId Share ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementShareRequest($shareId, $expand = null)
    {
        // verify the required parameter 'shareId' is set
        if ($shareId === null || (is_array($shareId) && count($shareId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shareId when calling getContentmanagementShare'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/shares/{shareId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($shareId !== null) {
            $resourcePath = str_replace(
                '{' . 'shareId' . '}',
                ObjectSerializer::toPathValue($shareId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementSharedSharedId
     *
     * Get shared documents. Securely download a shared document.
     *
     * @param  string $sharedId Shared ID (required)
     * @param  bool $redirect Turn on or off redirect (optional, default to true)
     * @param  string $disposition Request how the share content will be downloaded: attached as a file or inline. Default is attachment. (optional, default to attachment)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\SharedResponse
     */
    public function getContentmanagementSharedSharedId($sharedId, $redirect = 'true', $disposition = 'attachment', $contentType = null, $expand = null)
    {
        list($response) = $this->getContentmanagementSharedSharedIdWithHttpInfo($sharedId, $redirect, $disposition, $contentType, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementSharedSharedIdWithHttpInfo
     *
     * Get shared documents. Securely download a shared document.
     *
     * @param  string $sharedId Shared ID (required)
     * @param  bool $redirect Turn on or off redirect (optional, default to true)
     * @param  string $disposition Request how the share content will be downloaded: attached as a file or inline. Default is attachment. (optional, default to attachment)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\SharedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementSharedSharedIdWithHttpInfo($sharedId, $redirect = 'true', $disposition = 'attachment', $contentType = null, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SharedResponse';
        $request = $this->getContentmanagementSharedSharedIdRequest($sharedId, $redirect, $disposition, $contentType, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\SharedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementSharedSharedIdAsync
     *
     * Get shared documents. Securely download a shared document.
     *
     * @param  string $sharedId Shared ID (required)
     * @param  bool $redirect Turn on or off redirect (optional, default to true)
     * @param  string $disposition Request how the share content will be downloaded: attached as a file or inline. Default is attachment. (optional, default to attachment)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSharedSharedIdAsync($sharedId, $redirect = 'true', $disposition = 'attachment', $contentType = null, $expand = null)
    {
        return $this->getContentmanagementSharedSharedIdAsyncWithHttpInfo($sharedId, $redirect, $disposition, $contentType, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementSharedSharedIdAsyncWithHttpInfo
     *
     * Get shared documents. Securely download a shared document.
     *
     * @param  string $sharedId Shared ID (required)
     * @param  bool $redirect Turn on or off redirect (optional, default to true)
     * @param  string $disposition Request how the share content will be downloaded: attached as a file or inline. Default is attachment. (optional, default to attachment)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSharedSharedIdAsyncWithHttpInfo($sharedId, $redirect = 'true', $disposition = 'attachment', $contentType = null, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\SharedResponse';
        $request = $this->getContentmanagementSharedSharedIdRequest($sharedId, $redirect, $disposition, $contentType, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementSharedSharedId'
     *
     * @param  string $sharedId Shared ID (required)
     * @param  bool $redirect Turn on or off redirect (optional, default to true)
     * @param  string $disposition Request how the share content will be downloaded: attached as a file or inline. Default is attachment. (optional, default to attachment)
     * @param  string $contentType The requested format for the specified document. If supported, the document will be returned in that format. Example contentType&#x3D;audio/wav (optional)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementSharedSharedIdRequest($sharedId, $redirect = 'true', $disposition = 'attachment', $contentType = null, $expand = null)
    {
        // verify the required parameter 'sharedId' is set
        if ($sharedId === null || (is_array($sharedId) && count($sharedId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sharedId when calling getContentmanagementSharedSharedId'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/shared/{sharedId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($redirect !== null) {
            $queryParams['redirect'] = ObjectSerializer::toQueryValue($redirect);
        }
        // query params
        if ($disposition !== null) {
            $queryParams['disposition'] = ObjectSerializer::toQueryValue($disposition);
        }
        // query params
        if ($contentType !== null) {
            $queryParams['contentType'] = ObjectSerializer::toQueryValue($contentType);
        }
        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($sharedId !== null) {
            $resourcePath = str_replace(
                '{' . 'sharedId' . '}',
                ObjectSerializer::toPathValue($sharedId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementShares
     *
     * Gets a list of shares.  You must specify at least one filter (e.g. entityId).
     *
     * @param  string $entityId Filters the shares returned to only the entity specified by the value of this parameter. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\ShareEntityListing
     */
    public function getContentmanagementShares($entityId = null, $expand = null, $pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getContentmanagementSharesWithHttpInfo($entityId, $expand, $pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getContentmanagementSharesWithHttpInfo
     *
     * Gets a list of shares.  You must specify at least one filter (e.g. entityId).
     *
     * @param  string $entityId Filters the shares returned to only the entity specified by the value of this parameter. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\ShareEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementSharesWithHttpInfo($entityId = null, $expand = null, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ShareEntityListing';
        $request = $this->getContentmanagementSharesRequest($entityId, $expand, $pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ShareEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementSharesAsync
     *
     * Gets a list of shares.  You must specify at least one filter (e.g. entityId).
     *
     * @param  string $entityId Filters the shares returned to only the entity specified by the value of this parameter. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSharesAsync($entityId = null, $expand = null, $pageSize = '25', $pageNumber = '1')
    {
        return $this->getContentmanagementSharesAsyncWithHttpInfo($entityId, $expand, $pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementSharesAsyncWithHttpInfo
     *
     * Gets a list of shares.  You must specify at least one filter (e.g. entityId).
     *
     * @param  string $entityId Filters the shares returned to only the entity specified by the value of this parameter. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementSharesAsyncWithHttpInfo($entityId = null, $expand = null, $pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ShareEntityListing';
        $request = $this->getContentmanagementSharesRequest($entityId, $expand, $pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementShares'
     *
     * @param  string $entityId Filters the shares returned to only the entity specified by the value of this parameter. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementSharesRequest($entityId = null, $expand = null, $pageSize = '25', $pageNumber = '1')
    {

        $resourcePath = '/api/v2/contentmanagement/shares';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($entityId !== null) {
            $queryParams['entityId'] = ObjectSerializer::toQueryValue($entityId);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementStatus
     *
     * Get a list of statuses for pending operations
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\CommandStatusEntityListing
     */
    public function getContentmanagementStatus($pageSize = '25', $pageNumber = '1')
    {
        list($response) = $this->getContentmanagementStatusWithHttpInfo($pageSize, $pageNumber);
        return $response;
    }

    /**
     * Operation getContentmanagementStatusWithHttpInfo
     *
     * Get a list of statuses for pending operations
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\CommandStatusEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementStatusWithHttpInfo($pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CommandStatusEntityListing';
        $request = $this->getContentmanagementStatusRequest($pageSize, $pageNumber);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\CommandStatusEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementStatusAsync
     *
     * Get a list of statuses for pending operations
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementStatusAsync($pageSize = '25', $pageNumber = '1')
    {
        return $this->getContentmanagementStatusAsyncWithHttpInfo($pageSize, $pageNumber)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementStatusAsyncWithHttpInfo
     *
     * Get a list of statuses for pending operations
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementStatusAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CommandStatusEntityListing';
        $request = $this->getContentmanagementStatusRequest($pageSize, $pageNumber);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementStatus'
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementStatusRequest($pageSize = '25', $pageNumber = '1')
    {

        $resourcePath = '/api/v2/contentmanagement/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementStatusStatusId
     *
     * Get a status.
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\CommandStatus
     */
    public function getContentmanagementStatusStatusId($statusId)
    {
        list($response) = $this->getContentmanagementStatusStatusIdWithHttpInfo($statusId);
        return $response;
    }

    /**
     * Operation getContentmanagementStatusStatusIdWithHttpInfo
     *
     * Get a status.
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\CommandStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementStatusStatusIdWithHttpInfo($statusId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CommandStatus';
        $request = $this->getContentmanagementStatusStatusIdRequest($statusId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\CommandStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementStatusStatusIdAsync
     *
     * Get a status.
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementStatusStatusIdAsync($statusId)
    {
        return $this->getContentmanagementStatusStatusIdAsyncWithHttpInfo($statusId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementStatusStatusIdAsyncWithHttpInfo
     *
     * Get a status.
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementStatusStatusIdAsyncWithHttpInfo($statusId)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CommandStatus';
        $request = $this->getContentmanagementStatusStatusIdRequest($statusId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementStatusStatusId'
     *
     * @param  string $statusId Status ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementStatusStatusIdRequest($statusId)
    {
        // verify the required parameter 'statusId' is set
        if ($statusId === null || (is_array($statusId) && count($statusId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $statusId when calling getContentmanagementStatusStatusId'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/status/{statusId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($statusId !== null) {
            $resourcePath = str_replace(
                '{' . 'statusId' . '}',
                ObjectSerializer::toPathValue($statusId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementUsage
     *
     * Get usage details.
     *
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Usage
     */
    public function getContentmanagementUsage()
    {
        list($response) = $this->getContentmanagementUsageWithHttpInfo();
        return $response;
    }

    /**
     * Operation getContentmanagementUsageWithHttpInfo
     *
     * Get usage details.
     *
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Usage, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementUsageWithHttpInfo()
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Usage';
        $request = $this->getContentmanagementUsageRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Usage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementUsageAsync
     *
     * Get usage details.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementUsageAsync()
    {
        return $this->getContentmanagementUsageAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementUsageAsyncWithHttpInfo
     *
     * Get usage details.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementUsageAsyncWithHttpInfo()
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Usage';
        $request = $this->getContentmanagementUsageRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementUsage'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementUsageRequest()
    {

        $resourcePath = '/api/v2/contentmanagement/usage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementWorkspace
     *
     * Get a workspace.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Workspace
     */
    public function getContentmanagementWorkspace($workspaceId, $expand = null)
    {
        list($response) = $this->getContentmanagementWorkspaceWithHttpInfo($workspaceId, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementWorkspaceWithHttpInfo
     *
     * Get a workspace.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Workspace, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementWorkspaceWithHttpInfo($workspaceId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Workspace';
        $request = $this->getContentmanagementWorkspaceRequest($workspaceId, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Workspace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementWorkspaceAsync
     *
     * Get a workspace.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceAsync($workspaceId, $expand = null)
    {
        return $this->getContentmanagementWorkspaceAsyncWithHttpInfo($workspaceId, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementWorkspaceAsyncWithHttpInfo
     *
     * Get a workspace.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceAsyncWithHttpInfo($workspaceId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Workspace';
        $request = $this->getContentmanagementWorkspaceRequest($workspaceId, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementWorkspace'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementWorkspaceRequest($workspaceId, $expand = null)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling getContentmanagementWorkspace'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementWorkspaceDocuments
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\DocumentEntityListing
     */
    public function getContentmanagementWorkspaceDocuments($workspaceId, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        list($response) = $this->getContentmanagementWorkspaceDocumentsWithHttpInfo($workspaceId, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder);
        return $response;
    }

    /**
     * Operation getContentmanagementWorkspaceDocumentsWithHttpInfo
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\DocumentEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementWorkspaceDocumentsWithHttpInfo($workspaceId, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DocumentEntityListing';
        $request = $this->getContentmanagementWorkspaceDocumentsRequest($workspaceId, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\DocumentEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementWorkspaceDocumentsAsync
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceDocumentsAsync($workspaceId, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        return $this->getContentmanagementWorkspaceDocumentsAsyncWithHttpInfo($workspaceId, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementWorkspaceDocumentsAsyncWithHttpInfo
     *
     * Get a list of documents.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceDocumentsAsyncWithHttpInfo($workspaceId, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\DocumentEntityListing';
        $request = $this->getContentmanagementWorkspaceDocumentsRequest($workspaceId, $expand, $pageSize, $pageNumber, $sortBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementWorkspaceDocuments'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string $sortBy name or dateCreated (optional)
     * @param  string $sortOrder ascending or descending (optional, default to ascending)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementWorkspaceDocumentsRequest($workspaceId, $expand = null, $pageSize = '25', $pageNumber = '1', $sortBy = null, $sortOrder = 'ascending')
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling getContentmanagementWorkspaceDocuments'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if ($sortBy !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sortBy);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementWorkspaceMember
     *
     * Get a workspace member
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\WorkspaceMember
     */
    public function getContentmanagementWorkspaceMember($workspaceId, $memberId, $expand = null)
    {
        list($response) = $this->getContentmanagementWorkspaceMemberWithHttpInfo($workspaceId, $memberId, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementWorkspaceMemberWithHttpInfo
     *
     * Get a workspace member
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\WorkspaceMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementWorkspaceMemberWithHttpInfo($workspaceId, $memberId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceMember';
        $request = $this->getContentmanagementWorkspaceMemberRequest($workspaceId, $memberId, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\WorkspaceMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementWorkspaceMemberAsync
     *
     * Get a workspace member
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceMemberAsync($workspaceId, $memberId, $expand = null)
    {
        return $this->getContentmanagementWorkspaceMemberAsyncWithHttpInfo($workspaceId, $memberId, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementWorkspaceMemberAsyncWithHttpInfo
     *
     * Get a workspace member
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceMemberAsyncWithHttpInfo($workspaceId, $memberId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceMember';
        $request = $this->getContentmanagementWorkspaceMemberRequest($workspaceId, $memberId, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementWorkspaceMember'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementWorkspaceMemberRequest($workspaceId, $memberId, $expand = null)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling getContentmanagementWorkspaceMember'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling getContentmanagementWorkspaceMember'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementWorkspaceMembers
     *
     * Get a list workspace members
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\WorkspaceMemberEntityListing
     */
    public function getContentmanagementWorkspaceMembers($workspaceId, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        list($response) = $this->getContentmanagementWorkspaceMembersWithHttpInfo($workspaceId, $pageSize, $pageNumber, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementWorkspaceMembersWithHttpInfo
     *
     * Get a list workspace members
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\WorkspaceMemberEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementWorkspaceMembersWithHttpInfo($workspaceId, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceMemberEntityListing';
        $request = $this->getContentmanagementWorkspaceMembersRequest($workspaceId, $pageSize, $pageNumber, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\WorkspaceMemberEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementWorkspaceMembersAsync
     *
     * Get a list workspace members
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceMembersAsync($workspaceId, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        return $this->getContentmanagementWorkspaceMembersAsyncWithHttpInfo($workspaceId, $pageSize, $pageNumber, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementWorkspaceMembersAsyncWithHttpInfo
     *
     * Get a list workspace members
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceMembersAsyncWithHttpInfo($workspaceId, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceMemberEntityListing';
        $request = $this->getContentmanagementWorkspaceMembersRequest($workspaceId, $pageSize, $pageNumber, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementWorkspaceMembers'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementWorkspaceMembersRequest($workspaceId, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling getContentmanagementWorkspaceMembers'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementWorkspaceTagvalue
     *
     * Get a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TagValue
     */
    public function getContentmanagementWorkspaceTagvalue($workspaceId, $tagId, $expand = null)
    {
        list($response) = $this->getContentmanagementWorkspaceTagvalueWithHttpInfo($workspaceId, $tagId, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementWorkspaceTagvalueWithHttpInfo
     *
     * Get a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TagValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementWorkspaceTagvalueWithHttpInfo($workspaceId, $tagId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValue';
        $request = $this->getContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TagValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementWorkspaceTagvalueAsync
     *
     * Get a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceTagvalueAsync($workspaceId, $tagId, $expand = null)
    {
        return $this->getContentmanagementWorkspaceTagvalueAsyncWithHttpInfo($workspaceId, $tagId, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementWorkspaceTagvalueAsyncWithHttpInfo
     *
     * Get a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceTagvalueAsyncWithHttpInfo($workspaceId, $tagId, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValue';
        $request = $this->getContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementWorkspaceTagvalue'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId, $expand = null)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling getContentmanagementWorkspaceTagvalue'
            );
        }
        // verify the required parameter 'tagId' is set
        if ($tagId === null || (is_array($tagId) && count($tagId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagId when calling getContentmanagementWorkspaceTagvalue'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }
        // path params
        if ($tagId !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tagId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementWorkspaceTagvalues
     *
     * Get a list of workspace tags
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $value filter the list of tags returned (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TagValueEntityListing
     */
    public function getContentmanagementWorkspaceTagvalues($workspaceId, $value = null, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        list($response) = $this->getContentmanagementWorkspaceTagvaluesWithHttpInfo($workspaceId, $value, $pageSize, $pageNumber, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementWorkspaceTagvaluesWithHttpInfo
     *
     * Get a list of workspace tags
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $value filter the list of tags returned (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TagValueEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementWorkspaceTagvaluesWithHttpInfo($workspaceId, $value = null, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValueEntityListing';
        $request = $this->getContentmanagementWorkspaceTagvaluesRequest($workspaceId, $value, $pageSize, $pageNumber, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TagValueEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementWorkspaceTagvaluesAsync
     *
     * Get a list of workspace tags
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $value filter the list of tags returned (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceTagvaluesAsync($workspaceId, $value = null, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        return $this->getContentmanagementWorkspaceTagvaluesAsyncWithHttpInfo($workspaceId, $value, $pageSize, $pageNumber, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementWorkspaceTagvaluesAsyncWithHttpInfo
     *
     * Get a list of workspace tags
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $value filter the list of tags returned (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspaceTagvaluesAsyncWithHttpInfo($workspaceId, $value = null, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValueEntityListing';
        $request = $this->getContentmanagementWorkspaceTagvaluesRequest($workspaceId, $value, $pageSize, $pageNumber, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementWorkspaceTagvalues'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $value filter the list of tags returned (optional)
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementWorkspaceTagvaluesRequest($workspaceId, $value = null, $pageSize = '25', $pageNumber = '1', $expand = null)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling getContentmanagementWorkspaceTagvalues'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value);
        }
        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getContentmanagementWorkspaces
     *
     * Get a list of workspaces.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $access Requested access level. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\WorkspaceEntityListing
     */
    public function getContentmanagementWorkspaces($pageSize = '25', $pageNumber = '1', $access = null, $expand = null)
    {
        list($response) = $this->getContentmanagementWorkspacesWithHttpInfo($pageSize, $pageNumber, $access, $expand);
        return $response;
    }

    /**
     * Operation getContentmanagementWorkspacesWithHttpInfo
     *
     * Get a list of workspaces.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $access Requested access level. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\WorkspaceEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function getContentmanagementWorkspacesWithHttpInfo($pageSize = '25', $pageNumber = '1', $access = null, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceEntityListing';
        $request = $this->getContentmanagementWorkspacesRequest($pageSize, $pageNumber, $access, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\WorkspaceEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getContentmanagementWorkspacesAsync
     *
     * Get a list of workspaces.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $access Requested access level. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspacesAsync($pageSize = '25', $pageNumber = '1', $access = null, $expand = null)
    {
        return $this->getContentmanagementWorkspacesAsyncWithHttpInfo($pageSize, $pageNumber, $access, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getContentmanagementWorkspacesAsyncWithHttpInfo
     *
     * Get a list of workspaces.
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $access Requested access level. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getContentmanagementWorkspacesAsyncWithHttpInfo($pageSize = '25', $pageNumber = '1', $access = null, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceEntityListing';
        $request = $this->getContentmanagementWorkspacesRequest($pageSize, $pageNumber, $access, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getContentmanagementWorkspaces'
     *
     * @param  int $pageSize Page size (optional, default to 25)
     * @param  int $pageNumber Page number (optional, default to 1)
     * @param  string[] $access Requested access level. (optional)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getContentmanagementWorkspacesRequest($pageSize = '25', $pageNumber = '1', $access = null, $expand = null)
    {

        $resourcePath = '/api/v2/contentmanagement/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pageSize !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($pageSize);
        }
        // query params
        if ($pageNumber !== null) {
            $queryParams['pageNumber'] = ObjectSerializer::toQueryValue($pageNumber);
        }
        // query params
        if (is_array($access)) {
            $queryParams['access'] = $access;
        } else
        if ($access !== null) {
            $queryParams['access'] = ObjectSerializer::toQueryValue($access);
        }
        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementAuditquery
     *
     * Query audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ContentQueryRequest $body Allows for a filtered query returning facet information (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\QueryResults
     */
    public function postContentmanagementAuditquery($body)
    {
        list($response) = $this->postContentmanagementAuditqueryWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postContentmanagementAuditqueryWithHttpInfo
     *
     * Query audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ContentQueryRequest $body Allows for a filtered query returning facet information (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\QueryResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementAuditqueryWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QueryResults';
        $request = $this->postContentmanagementAuditqueryRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\QueryResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementAuditqueryAsync
     *
     * Query audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ContentQueryRequest $body Allows for a filtered query returning facet information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementAuditqueryAsync($body)
    {
        return $this->postContentmanagementAuditqueryAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementAuditqueryAsyncWithHttpInfo
     *
     * Query audits
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ContentQueryRequest $body Allows for a filtered query returning facet information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementAuditqueryAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QueryResults';
        $request = $this->postContentmanagementAuditqueryRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementAuditquery'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\ContentQueryRequest $body Allows for a filtered query returning facet information (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementAuditqueryRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementAuditquery'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/auditquery';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementDocument
     *
     * Update a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpdate $body Document (required)
     * @param  string $expand Expand some document fields (optional)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Document
     */
    public function postContentmanagementDocument($documentId, $body, $expand = null, $override = null)
    {
        list($response) = $this->postContentmanagementDocumentWithHttpInfo($documentId, $body, $expand, $override);
        return $response;
    }

    /**
     * Operation postContentmanagementDocumentWithHttpInfo
     *
     * Update a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpdate $body Document (required)
     * @param  string $expand Expand some document fields (optional)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementDocumentWithHttpInfo($documentId, $body, $expand = null, $override = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Document';
        $request = $this->postContentmanagementDocumentRequest($documentId, $body, $expand, $override);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementDocumentAsync
     *
     * Update a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpdate $body Document (required)
     * @param  string $expand Expand some document fields (optional)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementDocumentAsync($documentId, $body, $expand = null, $override = null)
    {
        return $this->postContentmanagementDocumentAsyncWithHttpInfo($documentId, $body, $expand, $override)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementDocumentAsyncWithHttpInfo
     *
     * Update a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpdate $body Document (required)
     * @param  string $expand Expand some document fields (optional)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementDocumentAsyncWithHttpInfo($documentId, $body, $expand = null, $override = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Document';
        $request = $this->postContentmanagementDocumentRequest($documentId, $body, $expand, $override);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementDocument'
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpdate $body Document (required)
     * @param  string $expand Expand some document fields (optional)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementDocumentRequest($documentId, $body, $expand = null, $override = null)
    {
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling postContentmanagementDocument'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementDocument'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }
        // query params
        if ($override !== null) {
            $queryParams['override'] = ObjectSerializer::toQueryValue($override);
        }

        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementDocumentContent
     *
     * Replace the contents of a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\ReplaceRequest $body Replace Request (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\ReplaceResponse
     */
    public function postContentmanagementDocumentContent($documentId, $body, $override = null)
    {
        list($response) = $this->postContentmanagementDocumentContentWithHttpInfo($documentId, $body, $override);
        return $response;
    }

    /**
     * Operation postContentmanagementDocumentContentWithHttpInfo
     *
     * Replace the contents of a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\ReplaceRequest $body Replace Request (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\ReplaceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementDocumentContentWithHttpInfo($documentId, $body, $override = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ReplaceResponse';
        $request = $this->postContentmanagementDocumentContentRequest($documentId, $body, $override);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ReplaceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementDocumentContentAsync
     *
     * Replace the contents of a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\ReplaceRequest $body Replace Request (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementDocumentContentAsync($documentId, $body, $override = null)
    {
        return $this->postContentmanagementDocumentContentAsyncWithHttpInfo($documentId, $body, $override)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementDocumentContentAsyncWithHttpInfo
     *
     * Replace the contents of a document.
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\ReplaceRequest $body Replace Request (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementDocumentContentAsyncWithHttpInfo($documentId, $body, $override = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\ReplaceResponse';
        $request = $this->postContentmanagementDocumentContentRequest($documentId, $body, $override);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementDocumentContent'
     *
     * @param  string $documentId Document ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\ReplaceRequest $body Replace Request (required)
     * @param  bool $override Override any lock on the document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementDocumentContentRequest($documentId, $body, $override = null)
    {
        // verify the required parameter 'documentId' is set
        if ($documentId === null || (is_array($documentId) && count($documentId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $documentId when calling postContentmanagementDocumentContent'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementDocumentContent'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents/{documentId}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($override !== null) {
            $queryParams['override'] = ObjectSerializer::toQueryValue($override);
        }

        // path params
        if ($documentId !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($documentId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementDocuments
     *
     * Add a document.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpload $body Document (required)
     * @param  string $copySource Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source. (optional)
     * @param  string $moveSource Move a document to a new workspace. Provide a document ID as the move source. (optional)
     * @param  bool $override Override any lock on the source document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Document
     */
    public function postContentmanagementDocuments($body, $copySource = null, $moveSource = null, $override = null)
    {
        list($response) = $this->postContentmanagementDocumentsWithHttpInfo($body, $copySource, $moveSource, $override);
        return $response;
    }

    /**
     * Operation postContentmanagementDocumentsWithHttpInfo
     *
     * Add a document.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpload $body Document (required)
     * @param  string $copySource Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source. (optional)
     * @param  string $moveSource Move a document to a new workspace. Provide a document ID as the move source. (optional)
     * @param  bool $override Override any lock on the source document (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementDocumentsWithHttpInfo($body, $copySource = null, $moveSource = null, $override = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Document';
        $request = $this->postContentmanagementDocumentsRequest($body, $copySource, $moveSource, $override);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementDocumentsAsync
     *
     * Add a document.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpload $body Document (required)
     * @param  string $copySource Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source. (optional)
     * @param  string $moveSource Move a document to a new workspace. Provide a document ID as the move source. (optional)
     * @param  bool $override Override any lock on the source document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementDocumentsAsync($body, $copySource = null, $moveSource = null, $override = null)
    {
        return $this->postContentmanagementDocumentsAsyncWithHttpInfo($body, $copySource, $moveSource, $override)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementDocumentsAsyncWithHttpInfo
     *
     * Add a document.
     *
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpload $body Document (required)
     * @param  string $copySource Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source. (optional)
     * @param  string $moveSource Move a document to a new workspace. Provide a document ID as the move source. (optional)
     * @param  bool $override Override any lock on the source document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementDocumentsAsyncWithHttpInfo($body, $copySource = null, $moveSource = null, $override = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Document';
        $request = $this->postContentmanagementDocumentsRequest($body, $copySource, $moveSource, $override);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementDocuments'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\DocumentUpload $body Document (required)
     * @param  string $copySource Copy a document within a workspace or to a new workspace. Provide a document ID as the copy source. (optional)
     * @param  string $moveSource Move a document to a new workspace. Provide a document ID as the move source. (optional)
     * @param  bool $override Override any lock on the source document (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementDocumentsRequest($body, $copySource = null, $moveSource = null, $override = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementDocuments'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($copySource !== null) {
            $queryParams['copySource'] = ObjectSerializer::toQueryValue($copySource);
        }
        // query params
        if ($moveSource !== null) {
            $queryParams['moveSource'] = ObjectSerializer::toQueryValue($moveSource);
        }
        // query params
        if ($override !== null) {
            $queryParams['override'] = ObjectSerializer::toQueryValue($override);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementQuery
     *
     * Query content
     *
     * @param  \PureCloudPlatform\Client\V2\Model\QueryRequest $body Allows for a filtered query returning facet information (required)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\QueryResults
     */
    public function postContentmanagementQuery($body, $expand = null)
    {
        list($response) = $this->postContentmanagementQueryWithHttpInfo($body, $expand);
        return $response;
    }

    /**
     * Operation postContentmanagementQueryWithHttpInfo
     *
     * Query content
     *
     * @param  \PureCloudPlatform\Client\V2\Model\QueryRequest $body Allows for a filtered query returning facet information (required)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\QueryResults, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementQueryWithHttpInfo($body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QueryResults';
        $request = $this->postContentmanagementQueryRequest($body, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\QueryResults',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementQueryAsync
     *
     * Query content
     *
     * @param  \PureCloudPlatform\Client\V2\Model\QueryRequest $body Allows for a filtered query returning facet information (required)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementQueryAsync($body, $expand = null)
    {
        return $this->postContentmanagementQueryAsyncWithHttpInfo($body, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementQueryAsyncWithHttpInfo
     *
     * Query content
     *
     * @param  \PureCloudPlatform\Client\V2\Model\QueryRequest $body Allows for a filtered query returning facet information (required)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementQueryAsyncWithHttpInfo($body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\QueryResults';
        $request = $this->postContentmanagementQueryRequest($body, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementQuery'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\QueryRequest $body Allows for a filtered query returning facet information (required)
     * @param  string $expand Expand some document fields (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementQueryRequest($body, $expand = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementQuery'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementShares
     *
     * Creates a new share or updates an existing share if the entity has already been shared
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CreateShareRequest $body CreateShareRequest - entity id and type and a single member or list of members are required (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\CreateShareResponse
     */
    public function postContentmanagementShares($body)
    {
        list($response) = $this->postContentmanagementSharesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postContentmanagementSharesWithHttpInfo
     *
     * Creates a new share or updates an existing share if the entity has already been shared
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CreateShareRequest $body CreateShareRequest - entity id and type and a single member or list of members are required (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\CreateShareResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementSharesWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CreateShareResponse';
        $request = $this->postContentmanagementSharesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\CreateShareResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementSharesAsync
     *
     * Creates a new share or updates an existing share if the entity has already been shared
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CreateShareRequest $body CreateShareRequest - entity id and type and a single member or list of members are required (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementSharesAsync($body)
    {
        return $this->postContentmanagementSharesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementSharesAsyncWithHttpInfo
     *
     * Creates a new share or updates an existing share if the entity has already been shared
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CreateShareRequest $body CreateShareRequest - entity id and type and a single member or list of members are required (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementSharesAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\CreateShareResponse';
        $request = $this->postContentmanagementSharesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementShares'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\CreateShareRequest $body CreateShareRequest - entity id and type and a single member or list of members are required (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementSharesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementShares'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/shares';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementWorkspaceTagvalues
     *
     * Create a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body tag (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TagValue
     */
    public function postContentmanagementWorkspaceTagvalues($workspaceId, $body)
    {
        list($response) = $this->postContentmanagementWorkspaceTagvaluesWithHttpInfo($workspaceId, $body);
        return $response;
    }

    /**
     * Operation postContentmanagementWorkspaceTagvaluesWithHttpInfo
     *
     * Create a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body tag (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TagValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementWorkspaceTagvaluesWithHttpInfo($workspaceId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValue';
        $request = $this->postContentmanagementWorkspaceTagvaluesRequest($workspaceId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TagValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementWorkspaceTagvaluesAsync
     *
     * Create a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementWorkspaceTagvaluesAsync($workspaceId, $body)
    {
        return $this->postContentmanagementWorkspaceTagvaluesAsyncWithHttpInfo($workspaceId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementWorkspaceTagvaluesAsyncWithHttpInfo
     *
     * Create a workspace tag
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementWorkspaceTagvaluesAsyncWithHttpInfo($workspaceId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValue';
        $request = $this->postContentmanagementWorkspaceTagvaluesRequest($workspaceId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementWorkspaceTagvalues'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body tag (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementWorkspaceTagvaluesRequest($workspaceId, $body)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling postContentmanagementWorkspaceTagvalues'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementWorkspaceTagvalues'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementWorkspaceTagvaluesQuery
     *
     * Perform a prefix query on tags in the workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagQueryRequest $body query (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TagValueEntityListing
     */
    public function postContentmanagementWorkspaceTagvaluesQuery($workspaceId, $body, $expand = null)
    {
        list($response) = $this->postContentmanagementWorkspaceTagvaluesQueryWithHttpInfo($workspaceId, $body, $expand);
        return $response;
    }

    /**
     * Operation postContentmanagementWorkspaceTagvaluesQueryWithHttpInfo
     *
     * Perform a prefix query on tags in the workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagQueryRequest $body query (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TagValueEntityListing, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementWorkspaceTagvaluesQueryWithHttpInfo($workspaceId, $body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValueEntityListing';
        $request = $this->postContentmanagementWorkspaceTagvaluesQueryRequest($workspaceId, $body, $expand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TagValueEntityListing',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementWorkspaceTagvaluesQueryAsync
     *
     * Perform a prefix query on tags in the workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagQueryRequest $body query (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementWorkspaceTagvaluesQueryAsync($workspaceId, $body, $expand = null)
    {
        return $this->postContentmanagementWorkspaceTagvaluesQueryAsyncWithHttpInfo($workspaceId, $body, $expand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementWorkspaceTagvaluesQueryAsyncWithHttpInfo
     *
     * Perform a prefix query on tags in the workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagQueryRequest $body query (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementWorkspaceTagvaluesQueryAsyncWithHttpInfo($workspaceId, $body, $expand = null)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValueEntityListing';
        $request = $this->postContentmanagementWorkspaceTagvaluesQueryRequest($workspaceId, $body, $expand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementWorkspaceTagvaluesQuery'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagQueryRequest $body query (required)
     * @param  string[] $expand Which fields, if any, to expand. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementWorkspaceTagvaluesQueryRequest($workspaceId, $body, $expand = null)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling postContentmanagementWorkspaceTagvaluesQuery'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementWorkspaceTagvaluesQuery'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($expand)) {
            $queryParams['expand'] = $expand;
        } else
        if ($expand !== null) {
            $queryParams['expand'] = ObjectSerializer::toQueryValue($expand);
        }

        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postContentmanagementWorkspaces
     *
     * Create a group workspace
     *
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceCreate $body Workspace (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Workspace
     */
    public function postContentmanagementWorkspaces($body)
    {
        list($response) = $this->postContentmanagementWorkspacesWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postContentmanagementWorkspacesWithHttpInfo
     *
     * Create a group workspace
     *
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceCreate $body Workspace (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Workspace, HTTP status code, HTTP response headers (array of strings)
     */
    public function postContentmanagementWorkspacesWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Workspace';
        $request = $this->postContentmanagementWorkspacesRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Workspace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postContentmanagementWorkspacesAsync
     *
     * Create a group workspace
     *
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceCreate $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementWorkspacesAsync($body)
    {
        return $this->postContentmanagementWorkspacesAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postContentmanagementWorkspacesAsyncWithHttpInfo
     *
     * Create a group workspace
     *
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceCreate $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postContentmanagementWorkspacesAsyncWithHttpInfo($body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Workspace';
        $request = $this->postContentmanagementWorkspacesRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postContentmanagementWorkspaces'
     *
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceCreate $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postContentmanagementWorkspacesRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postContentmanagementWorkspaces'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putContentmanagementWorkspace
     *
     * Update a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Workspace $body Workspace (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\Workspace
     */
    public function putContentmanagementWorkspace($workspaceId, $body)
    {
        list($response) = $this->putContentmanagementWorkspaceWithHttpInfo($workspaceId, $body);
        return $response;
    }

    /**
     * Operation putContentmanagementWorkspaceWithHttpInfo
     *
     * Update a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Workspace $body Workspace (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\Workspace, HTTP status code, HTTP response headers (array of strings)
     */
    public function putContentmanagementWorkspaceWithHttpInfo($workspaceId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Workspace';
        $request = $this->putContentmanagementWorkspaceRequest($workspaceId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\Workspace',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putContentmanagementWorkspaceAsync
     *
     * Update a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Workspace $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentmanagementWorkspaceAsync($workspaceId, $body)
    {
        return $this->putContentmanagementWorkspaceAsyncWithHttpInfo($workspaceId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putContentmanagementWorkspaceAsyncWithHttpInfo
     *
     * Update a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Workspace $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentmanagementWorkspaceAsyncWithHttpInfo($workspaceId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\Workspace';
        $request = $this->putContentmanagementWorkspaceRequest($workspaceId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putContentmanagementWorkspace'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\Workspace $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putContentmanagementWorkspaceRequest($workspaceId, $body)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling putContentmanagementWorkspace'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putContentmanagementWorkspace'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putContentmanagementWorkspaceMember
     *
     * Add a member to a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceMember $body Workspace Member (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\WorkspaceMember
     */
    public function putContentmanagementWorkspaceMember($workspaceId, $memberId, $body)
    {
        list($response) = $this->putContentmanagementWorkspaceMemberWithHttpInfo($workspaceId, $memberId, $body);
        return $response;
    }

    /**
     * Operation putContentmanagementWorkspaceMemberWithHttpInfo
     *
     * Add a member to a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceMember $body Workspace Member (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\WorkspaceMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function putContentmanagementWorkspaceMemberWithHttpInfo($workspaceId, $memberId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceMember';
        $request = $this->putContentmanagementWorkspaceMemberRequest($workspaceId, $memberId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\WorkspaceMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putContentmanagementWorkspaceMemberAsync
     *
     * Add a member to a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceMember $body Workspace Member (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentmanagementWorkspaceMemberAsync($workspaceId, $memberId, $body)
    {
        return $this->putContentmanagementWorkspaceMemberAsyncWithHttpInfo($workspaceId, $memberId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putContentmanagementWorkspaceMemberAsyncWithHttpInfo
     *
     * Add a member to a workspace
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceMember $body Workspace Member (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentmanagementWorkspaceMemberAsyncWithHttpInfo($workspaceId, $memberId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\WorkspaceMember';
        $request = $this->putContentmanagementWorkspaceMemberRequest($workspaceId, $memberId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putContentmanagementWorkspaceMember'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $memberId Member ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\WorkspaceMember $body Workspace Member (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putContentmanagementWorkspaceMemberRequest($workspaceId, $memberId, $body)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling putContentmanagementWorkspaceMember'
            );
        }
        // verify the required parameter 'memberId' is set
        if ($memberId === null || (is_array($memberId) && count($memberId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $memberId when calling putContentmanagementWorkspaceMember'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putContentmanagementWorkspaceMember'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/members/{memberId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }
        // path params
        if ($memberId !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($memberId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putContentmanagementWorkspaceTagvalue
     *
     * Update a workspace tag. Will update all documents with the new tag value.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body Workspace (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PureCloudPlatform\Client\V2\Model\TagValue
     */
    public function putContentmanagementWorkspaceTagvalue($workspaceId, $tagId, $body)
    {
        list($response) = $this->putContentmanagementWorkspaceTagvalueWithHttpInfo($workspaceId, $tagId, $body);
        return $response;
    }

    /**
     * Operation putContentmanagementWorkspaceTagvalueWithHttpInfo
     *
     * Update a workspace tag. Will update all documents with the new tag value.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body Workspace (required)
     *
     * @throws \PureCloudPlatform\Client\V2\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PureCloudPlatform\Client\V2\Model\TagValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function putContentmanagementWorkspaceTagvalueWithHttpInfo($workspaceId, $tagId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValue';
        $request = $this->putContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\TagValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 413:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 415:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 504:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PureCloudPlatform\Client\V2\Model\ErrorBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putContentmanagementWorkspaceTagvalueAsync
     *
     * Update a workspace tag. Will update all documents with the new tag value.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentmanagementWorkspaceTagvalueAsync($workspaceId, $tagId, $body)
    {
        return $this->putContentmanagementWorkspaceTagvalueAsyncWithHttpInfo($workspaceId, $tagId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putContentmanagementWorkspaceTagvalueAsyncWithHttpInfo
     *
     * Update a workspace tag. Will update all documents with the new tag value.
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putContentmanagementWorkspaceTagvalueAsyncWithHttpInfo($workspaceId, $tagId, $body)
    {
        $returnType = '\PureCloudPlatform\Client\V2\Model\TagValue';
        $request = $this->putContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putContentmanagementWorkspaceTagvalue'
     *
     * @param  string $workspaceId Workspace ID (required)
     * @param  string $tagId Tag ID (required)
     * @param  \PureCloudPlatform\Client\V2\Model\TagValue $body Workspace (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putContentmanagementWorkspaceTagvalueRequest($workspaceId, $tagId, $body)
    {
        // verify the required parameter 'workspaceId' is set
        if ($workspaceId === null || (is_array($workspaceId) && count($workspaceId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $workspaceId when calling putContentmanagementWorkspaceTagvalue'
            );
        }
        // verify the required parameter 'tagId' is set
        if ($tagId === null || (is_array($tagId) && count($tagId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tagId when calling putContentmanagementWorkspaceTagvalue'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putContentmanagementWorkspaceTagvalue'
            );
        }

        $resourcePath = '/api/v2/contentmanagement/workspaces/{workspaceId}/tagvalues/{tagId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($workspaceId !== null) {
            $resourcePath = str_replace(
                '{' . 'workspaceId' . '}',
                ObjectSerializer::toPathValue($workspaceId),
                $resourcePath
            );
        }
        // path params
        if ($tagId !== null) {
            $resourcePath = str_replace(
                '{' . 'tagId' . '}',
                ObjectSerializer::toPathValue($tagId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
