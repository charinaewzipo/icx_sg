<?php
/**
 * ChatMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ChatMessage Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChatMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChatMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'body' => 'string',
        'id' => 'string',
        'to' => 'string',
        'from' => 'string',
        'utc' => 'string',
        'chat' => 'string',
        'message' => 'string',
        'type' => 'string',
        'bodyType' => 'string',
        'senderCommunicationId' => 'string',
        'participantPurpose' => 'string',
        'user' => '\PureCloudPlatform\Client\V2\Model\ChatMessageUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'body' => null,
        'id' => null,
        'to' => null,
        'from' => null,
        'utc' => null,
        'chat' => null,
        'message' => null,
        'type' => null,
        'bodyType' => null,
        'senderCommunicationId' => null,
        'participantPurpose' => null,
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'body' => 'body',
        'id' => 'id',
        'to' => 'to',
        'from' => 'from',
        'utc' => 'utc',
        'chat' => 'chat',
        'message' => 'message',
        'type' => 'type',
        'bodyType' => 'bodyType',
        'senderCommunicationId' => 'senderCommunicationId',
        'participantPurpose' => 'participantPurpose',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'body' => 'setBody',
        'id' => 'setId',
        'to' => 'setTo',
        'from' => 'setFrom',
        'utc' => 'setUtc',
        'chat' => 'setChat',
        'message' => 'setMessage',
        'type' => 'setType',
        'bodyType' => 'setBodyType',
        'senderCommunicationId' => 'setSenderCommunicationId',
        'participantPurpose' => 'setParticipantPurpose',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'body' => 'getBody',
        'id' => 'getId',
        'to' => 'getTo',
        'from' => 'getFrom',
        'utc' => 'getUtc',
        'chat' => 'getChat',
        'message' => 'getMessage',
        'type' => 'getType',
        'bodyType' => 'getBodyType',
        'senderCommunicationId' => 'getSenderCommunicationId',
        'participantPurpose' => 'getParticipantPurpose',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BODY_TYPE_STANDARD = 'STANDARD';
    const BODY_TYPE_ACTIVITY = 'ACTIVITY';
    const BODY_TYPE_TYPING = 'TYPING';
    const BODY_TYPE_NOTICE = 'NOTICE';
    const BODY_TYPE_MEMBERJOIN = 'MEMBERJOIN';
    const BODY_TYPE_MEMBERLEAVE = 'MEMBERLEAVE';
    const BODY_TYPE_MEDIAREQUEST = 'MEDIAREQUEST';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBodyTypeAllowableValues()
    {
        return [
            self::BODY_TYPE_STANDARD,
            self::BODY_TYPE_ACTIVITY,
            self::BODY_TYPE_TYPING,
            self::BODY_TYPE_NOTICE,
            self::BODY_TYPE_MEMBERJOIN,
            self::BODY_TYPE_MEMBERLEAVE,
            self::BODY_TYPE_MEDIAREQUEST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['utc'] = isset($data['utc']) ? $data['utc'] : null;
        $this->container['chat'] = isset($data['chat']) ? $data['chat'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['bodyType'] = isset($data['bodyType']) ? $data['bodyType'] : null;
        $this->container['senderCommunicationId'] = isset($data['senderCommunicationId']) ? $data['senderCommunicationId'] : null;
        $this->container['participantPurpose'] = isset($data['participantPurpose']) ? $data['participantPurpose'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBodyTypeAllowableValues();
        if (!is_null($this->container['bodyType']) && !in_array($this->container['bodyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bodyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body The message body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to The message recipient
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from The message sender
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets utc
     *
     * @return string
     */
    public function getUtc()
    {
        return $this->container['utc'];
    }

    /**
     * Sets utc
     *
     * @param string $utc utc
     *
     * @return $this
     */
    public function setUtc($utc)
    {
        $this->container['utc'] = $utc;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return string
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param string $chat The interaction id (if available)
     *
     * @return $this
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message The message id
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets bodyType
     *
     * @return string
     */
    public function getBodyType()
    {
        return $this->container['bodyType'];
    }

    /**
     * Sets bodyType
     *
     * @param string $bodyType Type of the message body (v2 chats only)
     *
     * @return $this
     */
    public function setBodyType($bodyType)
    {
        $allowedValues = $this->getBodyTypeAllowableValues();
        if (!is_null($bodyType) && !in_array($bodyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bodyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bodyType'] = $bodyType;

        return $this;
    }

    /**
     * Gets senderCommunicationId
     *
     * @return string
     */
    public function getSenderCommunicationId()
    {
        return $this->container['senderCommunicationId'];
    }

    /**
     * Sets senderCommunicationId
     *
     * @param string $senderCommunicationId Communication of sender (v2 chats only)
     *
     * @return $this
     */
    public function setSenderCommunicationId($senderCommunicationId)
    {
        $this->container['senderCommunicationId'] = $senderCommunicationId;

        return $this;
    }

    /**
     * Gets participantPurpose
     *
     * @return string
     */
    public function getParticipantPurpose()
    {
        return $this->container['participantPurpose'];
    }

    /**
     * Sets participantPurpose
     *
     * @param string $participantPurpose Participant purpose of sender (v2 chats only)
     *
     * @return $this
     */
    public function setParticipantPurpose($participantPurpose)
    {
        $this->container['participantPurpose'] = $participantPurpose;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \PureCloudPlatform\Client\V2\Model\ChatMessageUser
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \PureCloudPlatform\Client\V2\Model\ChatMessageUser $user The user information for the sender (if available)
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


