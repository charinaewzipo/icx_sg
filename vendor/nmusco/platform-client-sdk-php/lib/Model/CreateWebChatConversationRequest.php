<?php
/**
 * CreateWebChatConversationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CreateWebChatConversationRequest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateWebChatConversationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateWebChatConversationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organizationId' => 'string',
        'deploymentId' => 'string',
        'routingTarget' => '\PureCloudPlatform\Client\V2\Model\WebChatRoutingTarget',
        'memberInfo' => '\PureCloudPlatform\Client\V2\Model\GuestMemberInfo',
        'memberAuthToken' => 'string',
        'journeyContext' => '\PureCloudPlatform\Client\V2\Model\JourneyContext'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organizationId' => null,
        'deploymentId' => null,
        'routingTarget' => null,
        'memberInfo' => null,
        'memberAuthToken' => null,
        'journeyContext' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organizationId' => 'organizationId',
        'deploymentId' => 'deploymentId',
        'routingTarget' => 'routingTarget',
        'memberInfo' => 'memberInfo',
        'memberAuthToken' => 'memberAuthToken',
        'journeyContext' => 'journeyContext'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organizationId' => 'setOrganizationId',
        'deploymentId' => 'setDeploymentId',
        'routingTarget' => 'setRoutingTarget',
        'memberInfo' => 'setMemberInfo',
        'memberAuthToken' => 'setMemberAuthToken',
        'journeyContext' => 'setJourneyContext'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organizationId' => 'getOrganizationId',
        'deploymentId' => 'getDeploymentId',
        'routingTarget' => 'getRoutingTarget',
        'memberInfo' => 'getMemberInfo',
        'memberAuthToken' => 'getMemberAuthToken',
        'journeyContext' => 'getJourneyContext'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organizationId'] = isset($data['organizationId']) ? $data['organizationId'] : null;
        $this->container['deploymentId'] = isset($data['deploymentId']) ? $data['deploymentId'] : null;
        $this->container['routingTarget'] = isset($data['routingTarget']) ? $data['routingTarget'] : null;
        $this->container['memberInfo'] = isset($data['memberInfo']) ? $data['memberInfo'] : null;
        $this->container['memberAuthToken'] = isset($data['memberAuthToken']) ? $data['memberAuthToken'] : null;
        $this->container['journeyContext'] = isset($data['journeyContext']) ? $data['journeyContext'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organizationId'] === null) {
            $invalidProperties[] = "'organizationId' can't be null";
        }
        if ($this->container['deploymentId'] === null) {
            $invalidProperties[] = "'deploymentId' can't be null";
        }
        if ($this->container['routingTarget'] === null) {
            $invalidProperties[] = "'routingTarget' can't be null";
        }
        if ($this->container['memberInfo'] === null) {
            $invalidProperties[] = "'memberInfo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organizationId
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organizationId'];
    }

    /**
     * Sets organizationId
     *
     * @param string $organizationId The organization identifier.
     *
     * @return $this
     */
    public function setOrganizationId($organizationId)
    {
        $this->container['organizationId'] = $organizationId;

        return $this;
    }

    /**
     * Gets deploymentId
     *
     * @return string
     */
    public function getDeploymentId()
    {
        return $this->container['deploymentId'];
    }

    /**
     * Sets deploymentId
     *
     * @param string $deploymentId The web chat Deployment ID which contains the appropriate settings for this chat conversation.
     *
     * @return $this
     */
    public function setDeploymentId($deploymentId)
    {
        $this->container['deploymentId'] = $deploymentId;

        return $this;
    }

    /**
     * Gets routingTarget
     *
     * @return \PureCloudPlatform\Client\V2\Model\WebChatRoutingTarget
     */
    public function getRoutingTarget()
    {
        return $this->container['routingTarget'];
    }

    /**
     * Sets routingTarget
     *
     * @param \PureCloudPlatform\Client\V2\Model\WebChatRoutingTarget $routingTarget The routing information to use for the new chat conversation.
     *
     * @return $this
     */
    public function setRoutingTarget($routingTarget)
    {
        $this->container['routingTarget'] = $routingTarget;

        return $this;
    }

    /**
     * Gets memberInfo
     *
     * @return \PureCloudPlatform\Client\V2\Model\GuestMemberInfo
     */
    public function getMemberInfo()
    {
        return $this->container['memberInfo'];
    }

    /**
     * Sets memberInfo
     *
     * @param \PureCloudPlatform\Client\V2\Model\GuestMemberInfo $memberInfo The guest member info to use for the new chat conversation.
     *
     * @return $this
     */
    public function setMemberInfo($memberInfo)
    {
        $this->container['memberInfo'] = $memberInfo;

        return $this;
    }

    /**
     * Gets memberAuthToken
     *
     * @return string
     */
    public function getMemberAuthToken()
    {
        return $this->container['memberAuthToken'];
    }

    /**
     * Sets memberAuthToken
     *
     * @param string $memberAuthToken If the guest member is an authenticated member (ie, not anonymous) his JWT is provided here. The token will have been previously generated with the \"POST /api/v2/signeddata\" resource.
     *
     * @return $this
     */
    public function setMemberAuthToken($memberAuthToken)
    {
        $this->container['memberAuthToken'] = $memberAuthToken;

        return $this;
    }

    /**
     * Gets journeyContext
     *
     * @return \PureCloudPlatform\Client\V2\Model\JourneyContext
     */
    public function getJourneyContext()
    {
        return $this->container['journeyContext'];
    }

    /**
     * Sets journeyContext
     *
     * @param \PureCloudPlatform\Client\V2\Model\JourneyContext $journeyContext A subset of the Journey System's data relevant to this conversation/session request (for external linkage and internal usage/context).
     *
     * @return $this
     */
    public function setJourneyContext($journeyContext)
    {
        $this->container['journeyContext'] = $journeyContext;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


