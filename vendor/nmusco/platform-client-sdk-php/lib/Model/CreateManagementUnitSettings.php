<?php
/**
 * CreateManagementUnitSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CreateManagementUnitSettings Class Doc Comment
 *
 * @category Class
 * @description Management Unit Settings
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateManagementUnitSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateManagementUnitSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'adherence' => '\PureCloudPlatform\Client\V2\Model\AdherenceSettings',
        'shortTermForecasting' => '\PureCloudPlatform\Client\V2\Model\ShortTermForecastingSettings',
        'timeOff' => '\PureCloudPlatform\Client\V2\Model\TimeOffRequestSettings',
        'scheduling' => '\PureCloudPlatform\Client\V2\Model\SchedulingSettings',
        'shiftTrading' => '\PureCloudPlatform\Client\V2\Model\ShiftTradeSettings'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'adherence' => null,
        'shortTermForecasting' => null,
        'timeOff' => null,
        'scheduling' => null,
        'shiftTrading' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adherence' => 'adherence',
        'shortTermForecasting' => 'shortTermForecasting',
        'timeOff' => 'timeOff',
        'scheduling' => 'scheduling',
        'shiftTrading' => 'shiftTrading'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adherence' => 'setAdherence',
        'shortTermForecasting' => 'setShortTermForecasting',
        'timeOff' => 'setTimeOff',
        'scheduling' => 'setScheduling',
        'shiftTrading' => 'setShiftTrading'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adherence' => 'getAdherence',
        'shortTermForecasting' => 'getShortTermForecasting',
        'timeOff' => 'getTimeOff',
        'scheduling' => 'getScheduling',
        'shiftTrading' => 'getShiftTrading'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adherence'] = isset($data['adherence']) ? $data['adherence'] : null;
        $this->container['shortTermForecasting'] = isset($data['shortTermForecasting']) ? $data['shortTermForecasting'] : null;
        $this->container['timeOff'] = isset($data['timeOff']) ? $data['timeOff'] : null;
        $this->container['scheduling'] = isset($data['scheduling']) ? $data['scheduling'] : null;
        $this->container['shiftTrading'] = isset($data['shiftTrading']) ? $data['shiftTrading'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adherence
     *
     * @return \PureCloudPlatform\Client\V2\Model\AdherenceSettings
     */
    public function getAdherence()
    {
        return $this->container['adherence'];
    }

    /**
     * Sets adherence
     *
     * @param \PureCloudPlatform\Client\V2\Model\AdherenceSettings $adherence Adherence settings for this management unit
     *
     * @return $this
     */
    public function setAdherence($adherence)
    {
        $this->container['adherence'] = $adherence;

        return $this;
    }

    /**
     * Gets shortTermForecasting
     *
     * @return \PureCloudPlatform\Client\V2\Model\ShortTermForecastingSettings
     */
    public function getShortTermForecasting()
    {
        return $this->container['shortTermForecasting'];
    }

    /**
     * Sets shortTermForecasting
     *
     * @param \PureCloudPlatform\Client\V2\Model\ShortTermForecastingSettings $shortTermForecasting Short term forecasting settings for this management unit
     *
     * @return $this
     */
    public function setShortTermForecasting($shortTermForecasting)
    {
        $this->container['shortTermForecasting'] = $shortTermForecasting;

        return $this;
    }

    /**
     * Gets timeOff
     *
     * @return \PureCloudPlatform\Client\V2\Model\TimeOffRequestSettings
     */
    public function getTimeOff()
    {
        return $this->container['timeOff'];
    }

    /**
     * Sets timeOff
     *
     * @param \PureCloudPlatform\Client\V2\Model\TimeOffRequestSettings $timeOff Time off request settings for this management unit
     *
     * @return $this
     */
    public function setTimeOff($timeOff)
    {
        $this->container['timeOff'] = $timeOff;

        return $this;
    }

    /**
     * Gets scheduling
     *
     * @return \PureCloudPlatform\Client\V2\Model\SchedulingSettings
     */
    public function getScheduling()
    {
        return $this->container['scheduling'];
    }

    /**
     * Sets scheduling
     *
     * @param \PureCloudPlatform\Client\V2\Model\SchedulingSettings $scheduling Scheduling settings for this management unit
     *
     * @return $this
     */
    public function setScheduling($scheduling)
    {
        $this->container['scheduling'] = $scheduling;

        return $this;
    }

    /**
     * Gets shiftTrading
     *
     * @return \PureCloudPlatform\Client\V2\Model\ShiftTradeSettings
     */
    public function getShiftTrading()
    {
        return $this->container['shiftTrading'];
    }

    /**
     * Sets shiftTrading
     *
     * @param \PureCloudPlatform\Client\V2\Model\ShiftTradeSettings $shiftTrading Shift trade settings for this management unit
     *
     * @return $this
     */
    public function setShiftTrading($shiftTrading)
    {
        $this->container['shiftTrading'] = $shiftTrading;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


