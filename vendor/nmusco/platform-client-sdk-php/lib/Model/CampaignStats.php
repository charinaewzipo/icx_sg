<?php
/**
 * CampaignStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CampaignStats Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignStats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contactRate' => '\PureCloudPlatform\Client\V2\Model\ConnectRate',
        'idleAgents' => 'int',
        'effectiveIdleAgents' => 'double',
        'adjustedCallsPerAgent' => 'double',
        'outstandingCalls' => 'int',
        'scheduledCalls' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contactRate' => null,
        'idleAgents' => 'int32',
        'effectiveIdleAgents' => 'double',
        'adjustedCallsPerAgent' => 'double',
        'outstandingCalls' => 'int32',
        'scheduledCalls' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contactRate' => 'contactRate',
        'idleAgents' => 'idleAgents',
        'effectiveIdleAgents' => 'effectiveIdleAgents',
        'adjustedCallsPerAgent' => 'adjustedCallsPerAgent',
        'outstandingCalls' => 'outstandingCalls',
        'scheduledCalls' => 'scheduledCalls'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contactRate' => 'setContactRate',
        'idleAgents' => 'setIdleAgents',
        'effectiveIdleAgents' => 'setEffectiveIdleAgents',
        'adjustedCallsPerAgent' => 'setAdjustedCallsPerAgent',
        'outstandingCalls' => 'setOutstandingCalls',
        'scheduledCalls' => 'setScheduledCalls'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contactRate' => 'getContactRate',
        'idleAgents' => 'getIdleAgents',
        'effectiveIdleAgents' => 'getEffectiveIdleAgents',
        'adjustedCallsPerAgent' => 'getAdjustedCallsPerAgent',
        'outstandingCalls' => 'getOutstandingCalls',
        'scheduledCalls' => 'getScheduledCalls'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contactRate'] = isset($data['contactRate']) ? $data['contactRate'] : null;
        $this->container['idleAgents'] = isset($data['idleAgents']) ? $data['idleAgents'] : null;
        $this->container['effectiveIdleAgents'] = isset($data['effectiveIdleAgents']) ? $data['effectiveIdleAgents'] : null;
        $this->container['adjustedCallsPerAgent'] = isset($data['adjustedCallsPerAgent']) ? $data['adjustedCallsPerAgent'] : null;
        $this->container['outstandingCalls'] = isset($data['outstandingCalls']) ? $data['outstandingCalls'] : null;
        $this->container['scheduledCalls'] = isset($data['scheduledCalls']) ? $data['scheduledCalls'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contactRate
     *
     * @return \PureCloudPlatform\Client\V2\Model\ConnectRate
     */
    public function getContactRate()
    {
        return $this->container['contactRate'];
    }

    /**
     * Sets contactRate
     *
     * @param \PureCloudPlatform\Client\V2\Model\ConnectRate $contactRate Information regarding the campaign's connect rate
     *
     * @return $this
     */
    public function setContactRate($contactRate)
    {
        $this->container['contactRate'] = $contactRate;

        return $this;
    }

    /**
     * Gets idleAgents
     *
     * @return int
     */
    public function getIdleAgents()
    {
        return $this->container['idleAgents'];
    }

    /**
     * Sets idleAgents
     *
     * @param int $idleAgents Number of available agents not currently being utilized
     *
     * @return $this
     */
    public function setIdleAgents($idleAgents)
    {
        $this->container['idleAgents'] = $idleAgents;

        return $this;
    }

    /**
     * Gets effectiveIdleAgents
     *
     * @return double
     */
    public function getEffectiveIdleAgents()
    {
        return $this->container['effectiveIdleAgents'];
    }

    /**
     * Sets effectiveIdleAgents
     *
     * @param double $effectiveIdleAgents Number of effective available agents not currently being utilized
     *
     * @return $this
     */
    public function setEffectiveIdleAgents($effectiveIdleAgents)
    {
        $this->container['effectiveIdleAgents'] = $effectiveIdleAgents;

        return $this;
    }

    /**
     * Gets adjustedCallsPerAgent
     *
     * @return double
     */
    public function getAdjustedCallsPerAgent()
    {
        return $this->container['adjustedCallsPerAgent'];
    }

    /**
     * Sets adjustedCallsPerAgent
     *
     * @param double $adjustedCallsPerAgent Calls per agent adjusted by pace
     *
     * @return $this
     */
    public function setAdjustedCallsPerAgent($adjustedCallsPerAgent)
    {
        $this->container['adjustedCallsPerAgent'] = $adjustedCallsPerAgent;

        return $this;
    }

    /**
     * Gets outstandingCalls
     *
     * @return int
     */
    public function getOutstandingCalls()
    {
        return $this->container['outstandingCalls'];
    }

    /**
     * Sets outstandingCalls
     *
     * @param int $outstandingCalls Number of campaign calls currently ongoing
     *
     * @return $this
     */
    public function setOutstandingCalls($outstandingCalls)
    {
        $this->container['outstandingCalls'] = $outstandingCalls;

        return $this;
    }

    /**
     * Gets scheduledCalls
     *
     * @return int
     */
    public function getScheduledCalls()
    {
        return $this->container['scheduledCalls'];
    }

    /**
     * Sets scheduledCalls
     *
     * @param int $scheduledCalls Number of campaign calls currently scheduled
     *
     * @return $this
     */
    public function setScheduledCalls($scheduledCalls)
    {
        $this->container['scheduledCalls'] = $scheduledCalls;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


