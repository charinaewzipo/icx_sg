<?php
/**
 * IntegrationType
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * IntegrationType Class Doc Comment
 *
 * @category Class
 * @description Descriptor for a type of Integration.
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntegrationType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IntegrationType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'provider' => 'string',
        'category' => 'string',
        'images' => '\PureCloudPlatform\Client\V2\Model\UserImage[]',
        'configPropertiesSchemaUri' => 'string',
        'configAdvancedSchemaUri' => 'string',
        'helpUri' => 'string',
        'termsOfServiceUri' => 'string',
        'vendorName' => 'string',
        'vendorWebsiteUri' => 'string',
        'marketplaceUri' => 'string',
        'faqUri' => 'string',
        'privacyPolicyUri' => 'string',
        'supportContactUri' => 'string',
        'salesContactUri' => 'string',
        'helpLinks' => '\PureCloudPlatform\Client\V2\Model\HelpLink[]',
        'credentials' => 'map[string,\PureCloudPlatform\Client\V2\Model\CredentialSpecification]',
        'nonInstallable' => 'bool',
        'maxInstances' => 'int',
        'userPermissions' => 'string[]',
        'vendorOAuthClientIds' => 'string[]',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'provider' => null,
        'category' => null,
        'images' => null,
        'configPropertiesSchemaUri' => null,
        'configAdvancedSchemaUri' => null,
        'helpUri' => null,
        'termsOfServiceUri' => null,
        'vendorName' => null,
        'vendorWebsiteUri' => null,
        'marketplaceUri' => null,
        'faqUri' => null,
        'privacyPolicyUri' => null,
        'supportContactUri' => null,
        'salesContactUri' => null,
        'helpLinks' => null,
        'credentials' => null,
        'nonInstallable' => null,
        'maxInstances' => 'int32',
        'userPermissions' => null,
        'vendorOAuthClientIds' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'provider' => 'provider',
        'category' => 'category',
        'images' => 'images',
        'configPropertiesSchemaUri' => 'configPropertiesSchemaUri',
        'configAdvancedSchemaUri' => 'configAdvancedSchemaUri',
        'helpUri' => 'helpUri',
        'termsOfServiceUri' => 'termsOfServiceUri',
        'vendorName' => 'vendorName',
        'vendorWebsiteUri' => 'vendorWebsiteUri',
        'marketplaceUri' => 'marketplaceUri',
        'faqUri' => 'faqUri',
        'privacyPolicyUri' => 'privacyPolicyUri',
        'supportContactUri' => 'supportContactUri',
        'salesContactUri' => 'salesContactUri',
        'helpLinks' => 'helpLinks',
        'credentials' => 'credentials',
        'nonInstallable' => 'nonInstallable',
        'maxInstances' => 'maxInstances',
        'userPermissions' => 'userPermissions',
        'vendorOAuthClientIds' => 'vendorOAuthClientIds',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'provider' => 'setProvider',
        'category' => 'setCategory',
        'images' => 'setImages',
        'configPropertiesSchemaUri' => 'setConfigPropertiesSchemaUri',
        'configAdvancedSchemaUri' => 'setConfigAdvancedSchemaUri',
        'helpUri' => 'setHelpUri',
        'termsOfServiceUri' => 'setTermsOfServiceUri',
        'vendorName' => 'setVendorName',
        'vendorWebsiteUri' => 'setVendorWebsiteUri',
        'marketplaceUri' => 'setMarketplaceUri',
        'faqUri' => 'setFaqUri',
        'privacyPolicyUri' => 'setPrivacyPolicyUri',
        'supportContactUri' => 'setSupportContactUri',
        'salesContactUri' => 'setSalesContactUri',
        'helpLinks' => 'setHelpLinks',
        'credentials' => 'setCredentials',
        'nonInstallable' => 'setNonInstallable',
        'maxInstances' => 'setMaxInstances',
        'userPermissions' => 'setUserPermissions',
        'vendorOAuthClientIds' => 'setVendorOAuthClientIds',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'provider' => 'getProvider',
        'category' => 'getCategory',
        'images' => 'getImages',
        'configPropertiesSchemaUri' => 'getConfigPropertiesSchemaUri',
        'configAdvancedSchemaUri' => 'getConfigAdvancedSchemaUri',
        'helpUri' => 'getHelpUri',
        'termsOfServiceUri' => 'getTermsOfServiceUri',
        'vendorName' => 'getVendorName',
        'vendorWebsiteUri' => 'getVendorWebsiteUri',
        'marketplaceUri' => 'getMarketplaceUri',
        'faqUri' => 'getFaqUri',
        'privacyPolicyUri' => 'getPrivacyPolicyUri',
        'supportContactUri' => 'getSupportContactUri',
        'salesContactUri' => 'getSalesContactUri',
        'helpLinks' => 'getHelpLinks',
        'credentials' => 'getCredentials',
        'nonInstallable' => 'getNonInstallable',
        'maxInstances' => 'getMaxInstances',
        'userPermissions' => 'getUserPermissions',
        'vendorOAuthClientIds' => 'getVendorOAuthClientIds',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['configPropertiesSchemaUri'] = isset($data['configPropertiesSchemaUri']) ? $data['configPropertiesSchemaUri'] : null;
        $this->container['configAdvancedSchemaUri'] = isset($data['configAdvancedSchemaUri']) ? $data['configAdvancedSchemaUri'] : null;
        $this->container['helpUri'] = isset($data['helpUri']) ? $data['helpUri'] : null;
        $this->container['termsOfServiceUri'] = isset($data['termsOfServiceUri']) ? $data['termsOfServiceUri'] : null;
        $this->container['vendorName'] = isset($data['vendorName']) ? $data['vendorName'] : null;
        $this->container['vendorWebsiteUri'] = isset($data['vendorWebsiteUri']) ? $data['vendorWebsiteUri'] : null;
        $this->container['marketplaceUri'] = isset($data['marketplaceUri']) ? $data['marketplaceUri'] : null;
        $this->container['faqUri'] = isset($data['faqUri']) ? $data['faqUri'] : null;
        $this->container['privacyPolicyUri'] = isset($data['privacyPolicyUri']) ? $data['privacyPolicyUri'] : null;
        $this->container['supportContactUri'] = isset($data['supportContactUri']) ? $data['supportContactUri'] : null;
        $this->container['salesContactUri'] = isset($data['salesContactUri']) ? $data['salesContactUri'] : null;
        $this->container['helpLinks'] = isset($data['helpLinks']) ? $data['helpLinks'] : null;
        $this->container['credentials'] = isset($data['credentials']) ? $data['credentials'] : null;
        $this->container['nonInstallable'] = isset($data['nonInstallable']) ? $data['nonInstallable'] : null;
        $this->container['maxInstances'] = isset($data['maxInstances']) ? $data['maxInstances'] : null;
        $this->container['userPermissions'] = isset($data['userPermissions']) ? $data['userPermissions'] : null;
        $this->container['vendorOAuthClientIds'] = isset($data['vendorOAuthClientIds']) ? $data['vendorOAuthClientIds'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the integration type.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the integration type.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     *
     * @param string $provider PureCloud provider of the integration type.
     *
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Category describing the integration type.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserImage[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserImage[] $images Collection of logos.
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets configPropertiesSchemaUri
     *
     * @return string
     */
    public function getConfigPropertiesSchemaUri()
    {
        return $this->container['configPropertiesSchemaUri'];
    }

    /**
     * Sets configPropertiesSchemaUri
     *
     * @param string $configPropertiesSchemaUri URI of the schema describing the key-value properties needed to configure an integration of this type.
     *
     * @return $this
     */
    public function setConfigPropertiesSchemaUri($configPropertiesSchemaUri)
    {
        $this->container['configPropertiesSchemaUri'] = $configPropertiesSchemaUri;

        return $this;
    }

    /**
     * Gets configAdvancedSchemaUri
     *
     * @return string
     */
    public function getConfigAdvancedSchemaUri()
    {
        return $this->container['configAdvancedSchemaUri'];
    }

    /**
     * Sets configAdvancedSchemaUri
     *
     * @param string $configAdvancedSchemaUri URI of the schema describing the advanced JSON document needed to configure an integration of this type.
     *
     * @return $this
     */
    public function setConfigAdvancedSchemaUri($configAdvancedSchemaUri)
    {
        $this->container['configAdvancedSchemaUri'] = $configAdvancedSchemaUri;

        return $this;
    }

    /**
     * Gets helpUri
     *
     * @return string
     */
    public function getHelpUri()
    {
        return $this->container['helpUri'];
    }

    /**
     * Sets helpUri
     *
     * @param string $helpUri URI of a page with more information about the integration type
     *
     * @return $this
     */
    public function setHelpUri($helpUri)
    {
        $this->container['helpUri'] = $helpUri;

        return $this;
    }

    /**
     * Gets termsOfServiceUri
     *
     * @return string
     */
    public function getTermsOfServiceUri()
    {
        return $this->container['termsOfServiceUri'];
    }

    /**
     * Sets termsOfServiceUri
     *
     * @param string $termsOfServiceUri URI of a page with terms and conditions for the integration type
     *
     * @return $this
     */
    public function setTermsOfServiceUri($termsOfServiceUri)
    {
        $this->container['termsOfServiceUri'] = $termsOfServiceUri;

        return $this;
    }

    /**
     * Gets vendorName
     *
     * @return string
     */
    public function getVendorName()
    {
        return $this->container['vendorName'];
    }

    /**
     * Sets vendorName
     *
     * @param string $vendorName Name of the vendor of this integration type
     *
     * @return $this
     */
    public function setVendorName($vendorName)
    {
        $this->container['vendorName'] = $vendorName;

        return $this;
    }

    /**
     * Gets vendorWebsiteUri
     *
     * @return string
     */
    public function getVendorWebsiteUri()
    {
        return $this->container['vendorWebsiteUri'];
    }

    /**
     * Sets vendorWebsiteUri
     *
     * @param string $vendorWebsiteUri URI of the vendor's website
     *
     * @return $this
     */
    public function setVendorWebsiteUri($vendorWebsiteUri)
    {
        $this->container['vendorWebsiteUri'] = $vendorWebsiteUri;

        return $this;
    }

    /**
     * Gets marketplaceUri
     *
     * @return string
     */
    public function getMarketplaceUri()
    {
        return $this->container['marketplaceUri'];
    }

    /**
     * Sets marketplaceUri
     *
     * @param string $marketplaceUri URI of the marketplace listing for this integration type
     *
     * @return $this
     */
    public function setMarketplaceUri($marketplaceUri)
    {
        $this->container['marketplaceUri'] = $marketplaceUri;

        return $this;
    }

    /**
     * Gets faqUri
     *
     * @return string
     */
    public function getFaqUri()
    {
        return $this->container['faqUri'];
    }

    /**
     * Sets faqUri
     *
     * @param string $faqUri URI of frequently asked questions about the integration type
     *
     * @return $this
     */
    public function setFaqUri($faqUri)
    {
        $this->container['faqUri'] = $faqUri;

        return $this;
    }

    /**
     * Gets privacyPolicyUri
     *
     * @return string
     */
    public function getPrivacyPolicyUri()
    {
        return $this->container['privacyPolicyUri'];
    }

    /**
     * Sets privacyPolicyUri
     *
     * @param string $privacyPolicyUri URI of a privacy policy for users of the integration type
     *
     * @return $this
     */
    public function setPrivacyPolicyUri($privacyPolicyUri)
    {
        $this->container['privacyPolicyUri'] = $privacyPolicyUri;

        return $this;
    }

    /**
     * Gets supportContactUri
     *
     * @return string
     */
    public function getSupportContactUri()
    {
        return $this->container['supportContactUri'];
    }

    /**
     * Sets supportContactUri
     *
     * @param string $supportContactUri URI for vendor support
     *
     * @return $this
     */
    public function setSupportContactUri($supportContactUri)
    {
        $this->container['supportContactUri'] = $supportContactUri;

        return $this;
    }

    /**
     * Gets salesContactUri
     *
     * @return string
     */
    public function getSalesContactUri()
    {
        return $this->container['salesContactUri'];
    }

    /**
     * Sets salesContactUri
     *
     * @param string $salesContactUri URI for vendor sales information
     *
     * @return $this
     */
    public function setSalesContactUri($salesContactUri)
    {
        $this->container['salesContactUri'] = $salesContactUri;

        return $this;
    }

    /**
     * Gets helpLinks
     *
     * @return \PureCloudPlatform\Client\V2\Model\HelpLink[]
     */
    public function getHelpLinks()
    {
        return $this->container['helpLinks'];
    }

    /**
     * Sets helpLinks
     *
     * @param \PureCloudPlatform\Client\V2\Model\HelpLink[] $helpLinks List of links to additional help resources
     *
     * @return $this
     */
    public function setHelpLinks($helpLinks)
    {
        $this->container['helpLinks'] = $helpLinks;

        return $this;
    }

    /**
     * Gets credentials
     *
     * @return map[string,\PureCloudPlatform\Client\V2\Model\CredentialSpecification]
     */
    public function getCredentials()
    {
        return $this->container['credentials'];
    }

    /**
     * Sets credentials
     *
     * @param map[string,\PureCloudPlatform\Client\V2\Model\CredentialSpecification] $credentials Map of credentials for integrations of this type. The key is the name of a credential that can be provided in the credentials property of the integration configuration.
     *
     * @return $this
     */
    public function setCredentials($credentials)
    {
        $this->container['credentials'] = $credentials;

        return $this;
    }

    /**
     * Gets nonInstallable
     *
     * @return bool
     */
    public function getNonInstallable()
    {
        return $this->container['nonInstallable'];
    }

    /**
     * Sets nonInstallable
     *
     * @param bool $nonInstallable Indicates if the integration type is installable or not.
     *
     * @return $this
     */
    public function setNonInstallable($nonInstallable)
    {
        $this->container['nonInstallable'] = $nonInstallable;

        return $this;
    }

    /**
     * Gets maxInstances
     *
     * @return int
     */
    public function getMaxInstances()
    {
        return $this->container['maxInstances'];
    }

    /**
     * Sets maxInstances
     *
     * @param int $maxInstances The maximum number of integration instances allowable for this integration type
     *
     * @return $this
     */
    public function setMaxInstances($maxInstances)
    {
        $this->container['maxInstances'] = $maxInstances;

        return $this;
    }

    /**
     * Gets userPermissions
     *
     * @return string[]
     */
    public function getUserPermissions()
    {
        return $this->container['userPermissions'];
    }

    /**
     * Sets userPermissions
     *
     * @param string[] $userPermissions List of permissions required to permit user access to the integration type.
     *
     * @return $this
     */
    public function setUserPermissions($userPermissions)
    {
        $this->container['userPermissions'] = $userPermissions;

        return $this;
    }

    /**
     * Gets vendorOAuthClientIds
     *
     * @return string[]
     */
    public function getVendorOAuthClientIds()
    {
        return $this->container['vendorOAuthClientIds'];
    }

    /**
     * Sets vendorOAuthClientIds
     *
     * @param string[] $vendorOAuthClientIds List of OAuth Client IDs that must be authorized when the integration is created.
     *
     * @return $this
     */
    public function setVendorOAuthClientIds($vendorOAuthClientIds)
    {
        $this->container['vendorOAuthClientIds'] = $vendorOAuthClientIds;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


