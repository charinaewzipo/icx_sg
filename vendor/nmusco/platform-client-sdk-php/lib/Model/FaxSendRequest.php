<?php
/**
 * FaxSendRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * FaxSendRequest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FaxSendRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FaxSendRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'addresses' => 'string[]',
        'documentId' => 'string',
        'contentType' => 'string',
        'workspace' => '\PureCloudPlatform\Client\V2\Model\Workspace',
        'coverSheet' => '\PureCloudPlatform\Client\V2\Model\CoverSheet',
        'timeZoneOffsetMinutes' => 'int',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'addresses' => null,
        'documentId' => null,
        'contentType' => null,
        'workspace' => null,
        'coverSheet' => null,
        'timeZoneOffsetMinutes' => 'int32',
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'addresses' => 'addresses',
        'documentId' => 'documentId',
        'contentType' => 'contentType',
        'workspace' => 'workspace',
        'coverSheet' => 'coverSheet',
        'timeZoneOffsetMinutes' => 'timeZoneOffsetMinutes',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'addresses' => 'setAddresses',
        'documentId' => 'setDocumentId',
        'contentType' => 'setContentType',
        'workspace' => 'setWorkspace',
        'coverSheet' => 'setCoverSheet',
        'timeZoneOffsetMinutes' => 'setTimeZoneOffsetMinutes',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'addresses' => 'getAddresses',
        'documentId' => 'getDocumentId',
        'contentType' => 'getContentType',
        'workspace' => 'getWorkspace',
        'coverSheet' => 'getCoverSheet',
        'timeZoneOffsetMinutes' => 'getTimeZoneOffsetMinutes',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CONTENT_TYPE_APPLICATIONPDF = 'application/pdf';
    const CONTENT_TYPE_IMAGETIFF = 'image/tiff';
    const CONTENT_TYPE_APPLICATIONMSWORD = 'application/msword';
    const CONTENT_TYPE_APPLICATIONVNDOASISOPENDOCUMENTTEXT = 'application/vnd.oasis.opendocument.text';
    const CONTENT_TYPE_APPLICATIONVNDOPENXMLFORMATS_OFFICEDOCUMENTWORDPROCESSINGMLDOCUMENT = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getContentTypeAllowableValues()
    {
        return [
            self::CONTENT_TYPE_APPLICATIONPDF,
            self::CONTENT_TYPE_IMAGETIFF,
            self::CONTENT_TYPE_APPLICATIONMSWORD,
            self::CONTENT_TYPE_APPLICATIONVNDOASISOPENDOCUMENTTEXT,
            self::CONTENT_TYPE_APPLICATIONVNDOPENXMLFORMATS_OFFICEDOCUMENTWORDPROCESSINGMLDOCUMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['documentId'] = isset($data['documentId']) ? $data['documentId'] : null;
        $this->container['contentType'] = isset($data['contentType']) ? $data['contentType'] : null;
        $this->container['workspace'] = isset($data['workspace']) ? $data['workspace'] : null;
        $this->container['coverSheet'] = isset($data['coverSheet']) ? $data['coverSheet'] : null;
        $this->container['timeZoneOffsetMinutes'] = isset($data['timeZoneOffsetMinutes']) ? $data['timeZoneOffsetMinutes'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        $allowedValues = $this->getContentTypeAllowableValues();
        if (!is_null($this->container['contentType']) && !in_array($this->container['contentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'contentType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return string[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param string[] $addresses A list of outbound fax dialing addresses. E.g. +13175555555 or 3175555555
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets documentId
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['documentId'];
    }

    /**
     * Sets documentId
     *
     * @param string $documentId DocumentId of Content Management artifact. If Content Management document is not used for faxing, documentId should be null
     *
     * @return $this
     */
    public function setDocumentId($documentId)
    {
        $this->container['documentId'] = $documentId;

        return $this;
    }

    /**
     * Gets contentType
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['contentType'];
    }

    /**
     * Sets contentType
     *
     * @param string $contentType The content type that is going to be uploaded. If Content Management document is used for faxing, contentType will be ignored
     *
     * @return $this
     */
    public function setContentType($contentType)
    {
        $allowedValues = $this->getContentTypeAllowableValues();
        if (!is_null($contentType) && !in_array($contentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'contentType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['contentType'] = $contentType;

        return $this;
    }

    /**
     * Gets workspace
     *
     * @return \PureCloudPlatform\Client\V2\Model\Workspace
     */
    public function getWorkspace()
    {
        return $this->container['workspace'];
    }

    /**
     * Sets workspace
     *
     * @param \PureCloudPlatform\Client\V2\Model\Workspace $workspace Workspace in which the document should be stored. If Content Management document is used for faxing, workspace will be ignored
     *
     * @return $this
     */
    public function setWorkspace($workspace)
    {
        $this->container['workspace'] = $workspace;

        return $this;
    }

    /**
     * Gets coverSheet
     *
     * @return \PureCloudPlatform\Client\V2\Model\CoverSheet
     */
    public function getCoverSheet()
    {
        return $this->container['coverSheet'];
    }

    /**
     * Sets coverSheet
     *
     * @param \PureCloudPlatform\Client\V2\Model\CoverSheet $coverSheet Data for coversheet generation.
     *
     * @return $this
     */
    public function setCoverSheet($coverSheet)
    {
        $this->container['coverSheet'] = $coverSheet;

        return $this;
    }

    /**
     * Gets timeZoneOffsetMinutes
     *
     * @return int
     */
    public function getTimeZoneOffsetMinutes()
    {
        return $this->container['timeZoneOffsetMinutes'];
    }

    /**
     * Sets timeZoneOffsetMinutes
     *
     * @param int $timeZoneOffsetMinutes Time zone offset minutes from GMT
     *
     * @return $this
     */
    public function setTimeZoneOffsetMinutes($timeZoneOffsetMinutes)
    {
        $this->container['timeZoneOffsetMinutes'] = $timeZoneOffsetMinutes;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


