<?php
/**
 * TokenInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * TokenInfo Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TokenInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TokenInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'organization' => '\PureCloudPlatform\Client\V2\Model\NamedEntity',
        'homeOrganization' => '\PureCloudPlatform\Client\V2\Model\NamedEntity',
        'authorizedScope' => 'string[]',
        'oAuthClient' => '\PureCloudPlatform\Client\V2\Model\OrgOAuthClient'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'organization' => null,
        'homeOrganization' => null,
        'authorizedScope' => null,
        'oAuthClient' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'organization' => 'organization',
        'homeOrganization' => 'homeOrganization',
        'authorizedScope' => 'authorizedScope',
        'oAuthClient' => 'OAuthClient'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'organization' => 'setOrganization',
        'homeOrganization' => 'setHomeOrganization',
        'authorizedScope' => 'setAuthorizedScope',
        'oAuthClient' => 'setOAuthClient'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'organization' => 'getOrganization',
        'homeOrganization' => 'getHomeOrganization',
        'authorizedScope' => 'getAuthorizedScope',
        'oAuthClient' => 'getOAuthClient'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['homeOrganization'] = isset($data['homeOrganization']) ? $data['homeOrganization'] : null;
        $this->container['authorizedScope'] = isset($data['authorizedScope']) ? $data['authorizedScope'] : null;
        $this->container['oAuthClient'] = isset($data['oAuthClient']) ? $data['oAuthClient'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets organization
     *
     * @return \PureCloudPlatform\Client\V2\Model\NamedEntity
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \PureCloudPlatform\Client\V2\Model\NamedEntity $organization The current organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets homeOrganization
     *
     * @return \PureCloudPlatform\Client\V2\Model\NamedEntity
     */
    public function getHomeOrganization()
    {
        return $this->container['homeOrganization'];
    }

    /**
     * Sets homeOrganization
     *
     * @param \PureCloudPlatform\Client\V2\Model\NamedEntity $homeOrganization The token's home organization
     *
     * @return $this
     */
    public function setHomeOrganization($homeOrganization)
    {
        $this->container['homeOrganization'] = $homeOrganization;

        return $this;
    }

    /**
     * Gets authorizedScope
     *
     * @return string[]
     */
    public function getAuthorizedScope()
    {
        return $this->container['authorizedScope'];
    }

    /**
     * Sets authorizedScope
     *
     * @param string[] $authorizedScope The list of scopes authorized for the OAuth client
     *
     * @return $this
     */
    public function setAuthorizedScope($authorizedScope)
    {
        $this->container['authorizedScope'] = $authorizedScope;

        return $this;
    }

    /**
     * Gets oAuthClient
     *
     * @return \PureCloudPlatform\Client\V2\Model\OrgOAuthClient
     */
    public function getOAuthClient()
    {
        return $this->container['oAuthClient'];
    }

    /**
     * Sets oAuthClient
     *
     * @param \PureCloudPlatform\Client\V2\Model\OrgOAuthClient $oAuthClient oAuthClient
     *
     * @return $this
     */
    public function setOAuthClient($oAuthClient)
    {
        $this->container['oAuthClient'] = $oAuthClient;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


