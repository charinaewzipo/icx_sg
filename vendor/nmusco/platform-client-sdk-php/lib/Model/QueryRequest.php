<?php
/**
 * QueryRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * QueryRequest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QueryRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QueryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'queryPhrase' => 'string',
        'pageNumber' => 'int',
        'pageSize' => 'int',
        'facetNameRequests' => 'string[]',
        'sort' => '\PureCloudPlatform\Client\V2\Model\SortItem[]',
        'filters' => '\PureCloudPlatform\Client\V2\Model\ContentFilterItem[]',
        'attributeFilters' => '\PureCloudPlatform\Client\V2\Model\AttributeFilterItem[]',
        'includeShares' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'queryPhrase' => null,
        'pageNumber' => 'int32',
        'pageSize' => 'int32',
        'facetNameRequests' => null,
        'sort' => null,
        'filters' => null,
        'attributeFilters' => null,
        'includeShares' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'queryPhrase' => 'queryPhrase',
        'pageNumber' => 'pageNumber',
        'pageSize' => 'pageSize',
        'facetNameRequests' => 'facetNameRequests',
        'sort' => 'sort',
        'filters' => 'filters',
        'attributeFilters' => 'attributeFilters',
        'includeShares' => 'includeShares'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'queryPhrase' => 'setQueryPhrase',
        'pageNumber' => 'setPageNumber',
        'pageSize' => 'setPageSize',
        'facetNameRequests' => 'setFacetNameRequests',
        'sort' => 'setSort',
        'filters' => 'setFilters',
        'attributeFilters' => 'setAttributeFilters',
        'includeShares' => 'setIncludeShares'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'queryPhrase' => 'getQueryPhrase',
        'pageNumber' => 'getPageNumber',
        'pageSize' => 'getPageSize',
        'facetNameRequests' => 'getFacetNameRequests',
        'sort' => 'getSort',
        'filters' => 'getFilters',
        'attributeFilters' => 'getAttributeFilters',
        'includeShares' => 'getIncludeShares'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['queryPhrase'] = isset($data['queryPhrase']) ? $data['queryPhrase'] : null;
        $this->container['pageNumber'] = isset($data['pageNumber']) ? $data['pageNumber'] : null;
        $this->container['pageSize'] = isset($data['pageSize']) ? $data['pageSize'] : null;
        $this->container['facetNameRequests'] = isset($data['facetNameRequests']) ? $data['facetNameRequests'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['attributeFilters'] = isset($data['attributeFilters']) ? $data['attributeFilters'] : null;
        $this->container['includeShares'] = isset($data['includeShares']) ? $data['includeShares'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets queryPhrase
     *
     * @return string
     */
    public function getQueryPhrase()
    {
        return $this->container['queryPhrase'];
    }

    /**
     * Sets queryPhrase
     *
     * @param string $queryPhrase queryPhrase
     *
     * @return $this
     */
    public function setQueryPhrase($queryPhrase)
    {
        $this->container['queryPhrase'] = $queryPhrase;

        return $this;
    }

    /**
     * Gets pageNumber
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['pageNumber'];
    }

    /**
     * Sets pageNumber
     *
     * @param int $pageNumber pageNumber
     *
     * @return $this
     */
    public function setPageNumber($pageNumber)
    {
        $this->container['pageNumber'] = $pageNumber;

        return $this;
    }

    /**
     * Gets pageSize
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['pageSize'];
    }

    /**
     * Sets pageSize
     *
     * @param int $pageSize pageSize
     *
     * @return $this
     */
    public function setPageSize($pageSize)
    {
        $this->container['pageSize'] = $pageSize;

        return $this;
    }

    /**
     * Gets facetNameRequests
     *
     * @return string[]
     */
    public function getFacetNameRequests()
    {
        return $this->container['facetNameRequests'];
    }

    /**
     * Sets facetNameRequests
     *
     * @param string[] $facetNameRequests facetNameRequests
     *
     * @return $this
     */
    public function setFacetNameRequests($facetNameRequests)
    {
        $this->container['facetNameRequests'] = $facetNameRequests;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return \PureCloudPlatform\Client\V2\Model\SortItem[]
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param \PureCloudPlatform\Client\V2\Model\SortItem[] $sort sort
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \PureCloudPlatform\Client\V2\Model\ContentFilterItem[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \PureCloudPlatform\Client\V2\Model\ContentFilterItem[] $filters filters
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets attributeFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\AttributeFilterItem[]
     */
    public function getAttributeFilters()
    {
        return $this->container['attributeFilters'];
    }

    /**
     * Sets attributeFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\AttributeFilterItem[] $attributeFilters attributeFilters
     *
     * @return $this
     */
    public function setAttributeFilters($attributeFilters)
    {
        $this->container['attributeFilters'] = $attributeFilters;

        return $this;
    }

    /**
     * Gets includeShares
     *
     * @return bool
     */
    public function getIncludeShares()
    {
        return $this->container['includeShares'];
    }

    /**
     * Sets includeShares
     *
     * @param bool $includeShares includeShares
     *
     * @return $this
     */
    public function setIncludeShares($includeShares)
    {
        $this->container['includeShares'] = $includeShares;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


