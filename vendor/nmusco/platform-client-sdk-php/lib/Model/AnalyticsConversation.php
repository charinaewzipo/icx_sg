<?php
/**
 * AnalyticsConversation
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * AnalyticsConversation Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsConversation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsConversation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conversationId' => 'string',
        'conversationStart' => '\DateTime',
        'conversationEnd' => '\DateTime',
        'mediaStatsMinConversationMos' => 'double',
        'mediaStatsMinConversationRFactor' => 'double',
        'originatingDirection' => 'string',
        'participants' => '\PureCloudPlatform\Client\V2\Model\AnalyticsParticipant[]',
        'evaluations' => '\PureCloudPlatform\Client\V2\Model\AnalyticsEvaluation[]',
        'surveys' => '\PureCloudPlatform\Client\V2\Model\AnalyticsSurvey[]',
        'divisionIds' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conversationId' => null,
        'conversationStart' => 'date-time',
        'conversationEnd' => 'date-time',
        'mediaStatsMinConversationMos' => 'double',
        'mediaStatsMinConversationRFactor' => 'double',
        'originatingDirection' => null,
        'participants' => null,
        'evaluations' => null,
        'surveys' => null,
        'divisionIds' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversationId' => 'conversationId',
        'conversationStart' => 'conversationStart',
        'conversationEnd' => 'conversationEnd',
        'mediaStatsMinConversationMos' => 'mediaStatsMinConversationMos',
        'mediaStatsMinConversationRFactor' => 'mediaStatsMinConversationRFactor',
        'originatingDirection' => 'originatingDirection',
        'participants' => 'participants',
        'evaluations' => 'evaluations',
        'surveys' => 'surveys',
        'divisionIds' => 'divisionIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversationId' => 'setConversationId',
        'conversationStart' => 'setConversationStart',
        'conversationEnd' => 'setConversationEnd',
        'mediaStatsMinConversationMos' => 'setMediaStatsMinConversationMos',
        'mediaStatsMinConversationRFactor' => 'setMediaStatsMinConversationRFactor',
        'originatingDirection' => 'setOriginatingDirection',
        'participants' => 'setParticipants',
        'evaluations' => 'setEvaluations',
        'surveys' => 'setSurveys',
        'divisionIds' => 'setDivisionIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversationId' => 'getConversationId',
        'conversationStart' => 'getConversationStart',
        'conversationEnd' => 'getConversationEnd',
        'mediaStatsMinConversationMos' => 'getMediaStatsMinConversationMos',
        'mediaStatsMinConversationRFactor' => 'getMediaStatsMinConversationRFactor',
        'originatingDirection' => 'getOriginatingDirection',
        'participants' => 'getParticipants',
        'evaluations' => 'getEvaluations',
        'surveys' => 'getSurveys',
        'divisionIds' => 'getDivisionIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORIGINATING_DIRECTION_INBOUND = 'inbound';
    const ORIGINATING_DIRECTION_OUTBOUND = 'outbound';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOriginatingDirectionAllowableValues()
    {
        return [
            self::ORIGINATING_DIRECTION_INBOUND,
            self::ORIGINATING_DIRECTION_OUTBOUND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversationId'] = isset($data['conversationId']) ? $data['conversationId'] : null;
        $this->container['conversationStart'] = isset($data['conversationStart']) ? $data['conversationStart'] : null;
        $this->container['conversationEnd'] = isset($data['conversationEnd']) ? $data['conversationEnd'] : null;
        $this->container['mediaStatsMinConversationMos'] = isset($data['mediaStatsMinConversationMos']) ? $data['mediaStatsMinConversationMos'] : null;
        $this->container['mediaStatsMinConversationRFactor'] = isset($data['mediaStatsMinConversationRFactor']) ? $data['mediaStatsMinConversationRFactor'] : null;
        $this->container['originatingDirection'] = isset($data['originatingDirection']) ? $data['originatingDirection'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['evaluations'] = isset($data['evaluations']) ? $data['evaluations'] : null;
        $this->container['surveys'] = isset($data['surveys']) ? $data['surveys'] : null;
        $this->container['divisionIds'] = isset($data['divisionIds']) ? $data['divisionIds'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOriginatingDirectionAllowableValues();
        if (!is_null($this->container['originatingDirection']) && !in_array($this->container['originatingDirection'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'originatingDirection', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversationId
     *
     * @return string
     */
    public function getConversationId()
    {
        return $this->container['conversationId'];
    }

    /**
     * Sets conversationId
     *
     * @param string $conversationId Unique identifier for the conversation
     *
     * @return $this
     */
    public function setConversationId($conversationId)
    {
        $this->container['conversationId'] = $conversationId;

        return $this;
    }

    /**
     * Gets conversationStart
     *
     * @return \DateTime
     */
    public function getConversationStart()
    {
        return $this->container['conversationStart'];
    }

    /**
     * Sets conversationStart
     *
     * @param \DateTime $conversationStart Date/time the conversation started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setConversationStart($conversationStart)
    {
        $this->container['conversationStart'] = $conversationStart;

        return $this;
    }

    /**
     * Gets conversationEnd
     *
     * @return \DateTime
     */
    public function getConversationEnd()
    {
        return $this->container['conversationEnd'];
    }

    /**
     * Sets conversationEnd
     *
     * @param \DateTime $conversationEnd Date/time the conversation ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setConversationEnd($conversationEnd)
    {
        $this->container['conversationEnd'] = $conversationEnd;

        return $this;
    }

    /**
     * Gets mediaStatsMinConversationMos
     *
     * @return double
     */
    public function getMediaStatsMinConversationMos()
    {
        return $this->container['mediaStatsMinConversationMos'];
    }

    /**
     * Sets mediaStatsMinConversationMos
     *
     * @param double $mediaStatsMinConversationMos The lowest estimated average MOS among all the audio streams belonging to this conversation
     *
     * @return $this
     */
    public function setMediaStatsMinConversationMos($mediaStatsMinConversationMos)
    {
        $this->container['mediaStatsMinConversationMos'] = $mediaStatsMinConversationMos;

        return $this;
    }

    /**
     * Gets mediaStatsMinConversationRFactor
     *
     * @return double
     */
    public function getMediaStatsMinConversationRFactor()
    {
        return $this->container['mediaStatsMinConversationRFactor'];
    }

    /**
     * Sets mediaStatsMinConversationRFactor
     *
     * @param double $mediaStatsMinConversationRFactor The lowest R-factor value among all of the audio streams belonging to this conversation
     *
     * @return $this
     */
    public function setMediaStatsMinConversationRFactor($mediaStatsMinConversationRFactor)
    {
        $this->container['mediaStatsMinConversationRFactor'] = $mediaStatsMinConversationRFactor;

        return $this;
    }

    /**
     * Gets originatingDirection
     *
     * @return string
     */
    public function getOriginatingDirection()
    {
        return $this->container['originatingDirection'];
    }

    /**
     * Sets originatingDirection
     *
     * @param string $originatingDirection The original direction of the conversation
     *
     * @return $this
     */
    public function setOriginatingDirection($originatingDirection)
    {
        $allowedValues = $this->getOriginatingDirectionAllowableValues();
        if (!is_null($originatingDirection) && !in_array($originatingDirection, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'originatingDirection', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['originatingDirection'] = $originatingDirection;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsParticipant[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsParticipant[] $participants Participants in the conversation
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets evaluations
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsEvaluation[]
     */
    public function getEvaluations()
    {
        return $this->container['evaluations'];
    }

    /**
     * Sets evaluations
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsEvaluation[] $evaluations Evaluations tied to this conversation
     *
     * @return $this
     */
    public function setEvaluations($evaluations)
    {
        $this->container['evaluations'] = $evaluations;

        return $this;
    }

    /**
     * Gets surveys
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsSurvey[]
     */
    public function getSurveys()
    {
        return $this->container['surveys'];
    }

    /**
     * Sets surveys
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsSurvey[] $surveys Surveys tied to this conversation
     *
     * @return $this
     */
    public function setSurveys($surveys)
    {
        $this->container['surveys'] = $surveys;

        return $this;
    }

    /**
     * Gets divisionIds
     *
     * @return string[]
     */
    public function getDivisionIds()
    {
        return $this->container['divisionIds'];
    }

    /**
     * Sets divisionIds
     *
     * @param string[] $divisionIds Identifiers of divisions associated with this conversation
     *
     * @return $this
     */
    public function setDivisionIds($divisionIds)
    {
        $this->container['divisionIds'] = $divisionIds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


