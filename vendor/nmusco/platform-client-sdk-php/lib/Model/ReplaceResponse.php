<?php
/**
 * ReplaceResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ReplaceResponse Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReplaceResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReplaceResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'changeNumber' => 'int',
        'uploadStatus' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'uploadDestinationUri' => 'string',
        'uploadMethod' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'changeNumber' => 'int32',
        'uploadStatus' => null,
        'uploadDestinationUri' => 'uri',
        'uploadMethod' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'changeNumber' => 'changeNumber',
        'uploadStatus' => 'uploadStatus',
        'uploadDestinationUri' => 'uploadDestinationUri',
        'uploadMethod' => 'uploadMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'changeNumber' => 'setChangeNumber',
        'uploadStatus' => 'setUploadStatus',
        'uploadDestinationUri' => 'setUploadDestinationUri',
        'uploadMethod' => 'setUploadMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'changeNumber' => 'getChangeNumber',
        'uploadStatus' => 'getUploadStatus',
        'uploadDestinationUri' => 'getUploadDestinationUri',
        'uploadMethod' => 'getUploadMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UPLOAD_METHOD_SINGLE_PUT = 'SINGLE_PUT';
    const UPLOAD_METHOD_MULTIPART_POST = 'MULTIPART_POST';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUploadMethodAllowableValues()
    {
        return [
            self::UPLOAD_METHOD_SINGLE_PUT,
            self::UPLOAD_METHOD_MULTIPART_POST,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['changeNumber'] = isset($data['changeNumber']) ? $data['changeNumber'] : null;
        $this->container['uploadStatus'] = isset($data['uploadStatus']) ? $data['uploadStatus'] : null;
        $this->container['uploadDestinationUri'] = isset($data['uploadDestinationUri']) ? $data['uploadDestinationUri'] : null;
        $this->container['uploadMethod'] = isset($data['uploadMethod']) ? $data['uploadMethod'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUploadMethodAllowableValues();
        if (!is_null($this->container['uploadMethod']) && !in_array($this->container['uploadMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'uploadMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets changeNumber
     *
     * @return int
     */
    public function getChangeNumber()
    {
        return $this->container['changeNumber'];
    }

    /**
     * Sets changeNumber
     *
     * @param int $changeNumber changeNumber
     *
     * @return $this
     */
    public function setChangeNumber($changeNumber)
    {
        $this->container['changeNumber'] = $changeNumber;

        return $this;
    }

    /**
     * Gets uploadStatus
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getUploadStatus()
    {
        return $this->container['uploadStatus'];
    }

    /**
     * Sets uploadStatus
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $uploadStatus uploadStatus
     *
     * @return $this
     */
    public function setUploadStatus($uploadStatus)
    {
        $this->container['uploadStatus'] = $uploadStatus;

        return $this;
    }

    /**
     * Gets uploadDestinationUri
     *
     * @return string
     */
    public function getUploadDestinationUri()
    {
        return $this->container['uploadDestinationUri'];
    }

    /**
     * Sets uploadDestinationUri
     *
     * @param string $uploadDestinationUri uploadDestinationUri
     *
     * @return $this
     */
    public function setUploadDestinationUri($uploadDestinationUri)
    {
        $this->container['uploadDestinationUri'] = $uploadDestinationUri;

        return $this;
    }

    /**
     * Gets uploadMethod
     *
     * @return string
     */
    public function getUploadMethod()
    {
        return $this->container['uploadMethod'];
    }

    /**
     * Sets uploadMethod
     *
     * @param string $uploadMethod uploadMethod
     *
     * @return $this
     */
    public function setUploadMethod($uploadMethod)
    {
        $allowedValues = $this->getUploadMethodAllowableValues();
        if (!is_null($uploadMethod) && !in_array($uploadMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'uploadMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['uploadMethod'] = $uploadMethod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


