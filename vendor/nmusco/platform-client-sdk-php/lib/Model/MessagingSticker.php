<?php
/**
 * MessagingSticker
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * MessagingSticker Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagingSticker implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MessagingSticker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'providerStickerId' => 'int',
        'providerPackageId' => 'int',
        'packageName' => 'string',
        'messengerType' => 'string',
        'stickerType' => 'string',
        'providerVersion' => 'int',
        'uriLocation' => 'string',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'providerStickerId' => 'int32',
        'providerPackageId' => 'int32',
        'packageName' => null,
        'messengerType' => null,
        'stickerType' => null,
        'providerVersion' => 'int64',
        'uriLocation' => 'uri',
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'providerStickerId' => 'providerStickerId',
        'providerPackageId' => 'providerPackageId',
        'packageName' => 'packageName',
        'messengerType' => 'messengerType',
        'stickerType' => 'stickerType',
        'providerVersion' => 'providerVersion',
        'uriLocation' => 'uriLocation',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'providerStickerId' => 'setProviderStickerId',
        'providerPackageId' => 'setProviderPackageId',
        'packageName' => 'setPackageName',
        'messengerType' => 'setMessengerType',
        'stickerType' => 'setStickerType',
        'providerVersion' => 'setProviderVersion',
        'uriLocation' => 'setUriLocation',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'providerStickerId' => 'getProviderStickerId',
        'providerPackageId' => 'getProviderPackageId',
        'packageName' => 'getPackageName',
        'messengerType' => 'getMessengerType',
        'stickerType' => 'getStickerType',
        'providerVersion' => 'getProviderVersion',
        'uriLocation' => 'getUriLocation',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MESSENGER_TYPE_SMS = 'sms';
    const MESSENGER_TYPE_FACEBOOK = 'facebook';
    const MESSENGER_TYPE_TWITTER = 'twitter';
    const MESSENGER_TYPE_LINE = 'line';
    const MESSENGER_TYPE_WHATSAPP = 'whatsapp';
    const STICKER_TYPE_STANDARD = 'standard';
    const STICKER_TYPE_FREE = 'free';
    const STICKER_TYPE_PAID = 'paid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMessengerTypeAllowableValues()
    {
        return [
            self::MESSENGER_TYPE_SMS,
            self::MESSENGER_TYPE_FACEBOOK,
            self::MESSENGER_TYPE_TWITTER,
            self::MESSENGER_TYPE_LINE,
            self::MESSENGER_TYPE_WHATSAPP,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStickerTypeAllowableValues()
    {
        return [
            self::STICKER_TYPE_STANDARD,
            self::STICKER_TYPE_FREE,
            self::STICKER_TYPE_PAID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['providerStickerId'] = isset($data['providerStickerId']) ? $data['providerStickerId'] : null;
        $this->container['providerPackageId'] = isset($data['providerPackageId']) ? $data['providerPackageId'] : null;
        $this->container['packageName'] = isset($data['packageName']) ? $data['packageName'] : null;
        $this->container['messengerType'] = isset($data['messengerType']) ? $data['messengerType'] : null;
        $this->container['stickerType'] = isset($data['stickerType']) ? $data['stickerType'] : null;
        $this->container['providerVersion'] = isset($data['providerVersion']) ? $data['providerVersion'] : null;
        $this->container['uriLocation'] = isset($data['uriLocation']) ? $data['uriLocation'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['providerStickerId'] === null) {
            $invalidProperties[] = "'providerStickerId' can't be null";
        }
        if ($this->container['messengerType'] === null) {
            $invalidProperties[] = "'messengerType' can't be null";
        }
        $allowedValues = $this->getMessengerTypeAllowableValues();
        if (!is_null($this->container['messengerType']) && !in_array($this->container['messengerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'messengerType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['stickerType'] === null) {
            $invalidProperties[] = "'stickerType' can't be null";
        }
        $allowedValues = $this->getStickerTypeAllowableValues();
        if (!is_null($this->container['stickerType']) && !in_array($this->container['stickerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'stickerType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets providerStickerId
     *
     * @return int
     */
    public function getProviderStickerId()
    {
        return $this->container['providerStickerId'];
    }

    /**
     * Sets providerStickerId
     *
     * @param int $providerStickerId The sticker Id of the sticker, assigned by the sticker provider.
     *
     * @return $this
     */
    public function setProviderStickerId($providerStickerId)
    {
        $this->container['providerStickerId'] = $providerStickerId;

        return $this;
    }

    /**
     * Gets providerPackageId
     *
     * @return int
     */
    public function getProviderPackageId()
    {
        return $this->container['providerPackageId'];
    }

    /**
     * Sets providerPackageId
     *
     * @param int $providerPackageId The package Id of the sticker, assigned by the sticker provider.
     *
     * @return $this
     */
    public function setProviderPackageId($providerPackageId)
    {
        $this->container['providerPackageId'] = $providerPackageId;

        return $this;
    }

    /**
     * Gets packageName
     *
     * @return string
     */
    public function getPackageName()
    {
        return $this->container['packageName'];
    }

    /**
     * Sets packageName
     *
     * @param string $packageName The package name of the sticker, assigned by the sticker provider.
     *
     * @return $this
     */
    public function setPackageName($packageName)
    {
        $this->container['packageName'] = $packageName;

        return $this;
    }

    /**
     * Gets messengerType
     *
     * @return string
     */
    public function getMessengerType()
    {
        return $this->container['messengerType'];
    }

    /**
     * Sets messengerType
     *
     * @param string $messengerType The type of the messenger provider.
     *
     * @return $this
     */
    public function setMessengerType($messengerType)
    {
        $allowedValues = $this->getMessengerTypeAllowableValues();
        if (!in_array($messengerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'messengerType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['messengerType'] = $messengerType;

        return $this;
    }

    /**
     * Gets stickerType
     *
     * @return string
     */
    public function getStickerType()
    {
        return $this->container['stickerType'];
    }

    /**
     * Sets stickerType
     *
     * @param string $stickerType The type of the sticker.
     *
     * @return $this
     */
    public function setStickerType($stickerType)
    {
        $allowedValues = $this->getStickerTypeAllowableValues();
        if (!in_array($stickerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'stickerType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['stickerType'] = $stickerType;

        return $this;
    }

    /**
     * Gets providerVersion
     *
     * @return int
     */
    public function getProviderVersion()
    {
        return $this->container['providerVersion'];
    }

    /**
     * Sets providerVersion
     *
     * @param int $providerVersion The version of the sticker, assigned by the provider.
     *
     * @return $this
     */
    public function setProviderVersion($providerVersion)
    {
        $this->container['providerVersion'] = $providerVersion;

        return $this;
    }

    /**
     * Gets uriLocation
     *
     * @return string
     */
    public function getUriLocation()
    {
        return $this->container['uriLocation'];
    }

    /**
     * Sets uriLocation
     *
     * @param string $uriLocation uriLocation
     *
     * @return $this
     */
    public function setUriLocation($uriLocation)
    {
        $this->container['uriLocation'] = $uriLocation;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


