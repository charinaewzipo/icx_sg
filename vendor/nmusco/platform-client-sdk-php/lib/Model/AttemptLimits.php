<?php
/**
 * AttemptLimits
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * AttemptLimits Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AttemptLimits implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AttemptLimits';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'dateCreated' => '\DateTime',
        'dateModified' => '\DateTime',
        'version' => 'int',
        'maxAttemptsPerContact' => 'int',
        'maxAttemptsPerNumber' => 'int',
        'timeZoneId' => 'string',
        'resetPeriod' => 'string',
        'recallEntries' => 'map[string,\PureCloudPlatform\Client\V2\Model\RecallEntry]',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'dateCreated' => 'date-time',
        'dateModified' => 'date-time',
        'version' => 'int32',
        'maxAttemptsPerContact' => 'int32',
        'maxAttemptsPerNumber' => 'int32',
        'timeZoneId' => null,
        'resetPeriod' => null,
        'recallEntries' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'dateCreated' => 'dateCreated',
        'dateModified' => 'dateModified',
        'version' => 'version',
        'maxAttemptsPerContact' => 'maxAttemptsPerContact',
        'maxAttemptsPerNumber' => 'maxAttemptsPerNumber',
        'timeZoneId' => 'timeZoneId',
        'resetPeriod' => 'resetPeriod',
        'recallEntries' => 'recallEntries',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'dateCreated' => 'setDateCreated',
        'dateModified' => 'setDateModified',
        'version' => 'setVersion',
        'maxAttemptsPerContact' => 'setMaxAttemptsPerContact',
        'maxAttemptsPerNumber' => 'setMaxAttemptsPerNumber',
        'timeZoneId' => 'setTimeZoneId',
        'resetPeriod' => 'setResetPeriod',
        'recallEntries' => 'setRecallEntries',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'dateCreated' => 'getDateCreated',
        'dateModified' => 'getDateModified',
        'version' => 'getVersion',
        'maxAttemptsPerContact' => 'getMaxAttemptsPerContact',
        'maxAttemptsPerNumber' => 'getMaxAttemptsPerNumber',
        'timeZoneId' => 'getTimeZoneId',
        'resetPeriod' => 'getResetPeriod',
        'recallEntries' => 'getRecallEntries',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESET_PERIOD_NEVER = 'NEVER';
    const RESET_PERIOD_TODAY = 'TODAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResetPeriodAllowableValues()
    {
        return [
            self::RESET_PERIOD_NEVER,
            self::RESET_PERIOD_TODAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['dateModified'] = isset($data['dateModified']) ? $data['dateModified'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['maxAttemptsPerContact'] = isset($data['maxAttemptsPerContact']) ? $data['maxAttemptsPerContact'] : null;
        $this->container['maxAttemptsPerNumber'] = isset($data['maxAttemptsPerNumber']) ? $data['maxAttemptsPerNumber'] : null;
        $this->container['timeZoneId'] = isset($data['timeZoneId']) ? $data['timeZoneId'] : null;
        $this->container['resetPeriod'] = isset($data['resetPeriod']) ? $data['resetPeriod'] : null;
        $this->container['recallEntries'] = isset($data['recallEntries']) ? $data['recallEntries'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResetPeriodAllowableValues();
        if (!is_null($this->container['resetPeriod']) && !in_array($this->container['resetPeriod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resetPeriod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets dateModified
     *
     * @return \DateTime
     */
    public function getDateModified()
    {
        return $this->container['dateModified'];
    }

    /**
     * Sets dateModified
     *
     * @param \DateTime $dateModified Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateModified($dateModified)
    {
        $this->container['dateModified'] = $dateModified;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Required for updates, must match the version number of the most recent update
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets maxAttemptsPerContact
     *
     * @return int
     */
    public function getMaxAttemptsPerContact()
    {
        return $this->container['maxAttemptsPerContact'];
    }

    /**
     * Sets maxAttemptsPerContact
     *
     * @param int $maxAttemptsPerContact The maximum number of times a contact can be called within the resetPeriod. Required if maxAttemptsPerNumber is not defined.
     *
     * @return $this
     */
    public function setMaxAttemptsPerContact($maxAttemptsPerContact)
    {
        $this->container['maxAttemptsPerContact'] = $maxAttemptsPerContact;

        return $this;
    }

    /**
     * Gets maxAttemptsPerNumber
     *
     * @return int
     */
    public function getMaxAttemptsPerNumber()
    {
        return $this->container['maxAttemptsPerNumber'];
    }

    /**
     * Sets maxAttemptsPerNumber
     *
     * @param int $maxAttemptsPerNumber The maximum number of times a phone number can be called within the resetPeriod. Required if maxAttemptsPerContact is not defined.
     *
     * @return $this
     */
    public function setMaxAttemptsPerNumber($maxAttemptsPerNumber)
    {
        $this->container['maxAttemptsPerNumber'] = $maxAttemptsPerNumber;

        return $this;
    }

    /**
     * Gets timeZoneId
     *
     * @return string
     */
    public function getTimeZoneId()
    {
        return $this->container['timeZoneId'];
    }

    /**
     * Sets timeZoneId
     *
     * @param string $timeZoneId If the resetPeriod is TODAY, this specifies the timezone in which TODAY occurs. Required if the resetPeriod is TODAY.
     *
     * @return $this
     */
    public function setTimeZoneId($timeZoneId)
    {
        $this->container['timeZoneId'] = $timeZoneId;

        return $this;
    }

    /**
     * Gets resetPeriod
     *
     * @return string
     */
    public function getResetPeriod()
    {
        return $this->container['resetPeriod'];
    }

    /**
     * Sets resetPeriod
     *
     * @param string $resetPeriod After how long the number of attempts will be set back to 0. Defaults to NEVER.
     *
     * @return $this
     */
    public function setResetPeriod($resetPeriod)
    {
        $allowedValues = $this->getResetPeriodAllowableValues();
        if (!is_null($resetPeriod) && !in_array($resetPeriod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resetPeriod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resetPeriod'] = $resetPeriod;

        return $this;
    }

    /**
     * Gets recallEntries
     *
     * @return map[string,\PureCloudPlatform\Client\V2\Model\RecallEntry]
     */
    public function getRecallEntries()
    {
        return $this->container['recallEntries'];
    }

    /**
     * Sets recallEntries
     *
     * @param map[string,\PureCloudPlatform\Client\V2\Model\RecallEntry] $recallEntries Configuration for recall attempts.
     *
     * @return $this
     */
    public function setRecallEntries($recallEntries)
    {
        $this->container['recallEntries'] = $recallEntries;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


