<?php
/**
 * SmsPhoneNumber
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * SmsPhoneNumber Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmsPhoneNumber implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SmsPhoneNumber';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'phoneNumber' => 'string',
        'phoneNumberType' => 'string',
        'provisionedThroughPureCloud' => 'bool',
        'phoneNumberStatus' => 'string',
        'capabilities' => 'string[]',
        'countryCode' => 'string',
        'dateCreated' => '\DateTime',
        'dateModified' => '\DateTime',
        'createdBy' => '\PureCloudPlatform\Client\V2\Model\User',
        'modifiedBy' => '\PureCloudPlatform\Client\V2\Model\User',
        'version' => 'int',
        'purchaseDate' => '\DateTime',
        'cancellationDate' => '\DateTime',
        'renewalDate' => '\DateTime',
        'autoRenewable' => 'string',
        'addressId' => '\PureCloudPlatform\Client\V2\Model\SmsAddress',
        'shortCodeBillingType' => 'string',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'phoneNumber' => null,
        'phoneNumberType' => null,
        'provisionedThroughPureCloud' => null,
        'phoneNumberStatus' => null,
        'capabilities' => null,
        'countryCode' => null,
        'dateCreated' => 'date-time',
        'dateModified' => 'date-time',
        'createdBy' => null,
        'modifiedBy' => null,
        'version' => 'int32',
        'purchaseDate' => 'date-time',
        'cancellationDate' => 'date-time',
        'renewalDate' => 'date-time',
        'autoRenewable' => null,
        'addressId' => null,
        'shortCodeBillingType' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'phoneNumber' => 'phoneNumber',
        'phoneNumberType' => 'phoneNumberType',
        'provisionedThroughPureCloud' => 'provisionedThroughPureCloud',
        'phoneNumberStatus' => 'phoneNumberStatus',
        'capabilities' => 'capabilities',
        'countryCode' => 'countryCode',
        'dateCreated' => 'dateCreated',
        'dateModified' => 'dateModified',
        'createdBy' => 'createdBy',
        'modifiedBy' => 'modifiedBy',
        'version' => 'version',
        'purchaseDate' => 'purchaseDate',
        'cancellationDate' => 'cancellationDate',
        'renewalDate' => 'renewalDate',
        'autoRenewable' => 'autoRenewable',
        'addressId' => 'addressId',
        'shortCodeBillingType' => 'shortCodeBillingType',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'phoneNumber' => 'setPhoneNumber',
        'phoneNumberType' => 'setPhoneNumberType',
        'provisionedThroughPureCloud' => 'setProvisionedThroughPureCloud',
        'phoneNumberStatus' => 'setPhoneNumberStatus',
        'capabilities' => 'setCapabilities',
        'countryCode' => 'setCountryCode',
        'dateCreated' => 'setDateCreated',
        'dateModified' => 'setDateModified',
        'createdBy' => 'setCreatedBy',
        'modifiedBy' => 'setModifiedBy',
        'version' => 'setVersion',
        'purchaseDate' => 'setPurchaseDate',
        'cancellationDate' => 'setCancellationDate',
        'renewalDate' => 'setRenewalDate',
        'autoRenewable' => 'setAutoRenewable',
        'addressId' => 'setAddressId',
        'shortCodeBillingType' => 'setShortCodeBillingType',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'phoneNumber' => 'getPhoneNumber',
        'phoneNumberType' => 'getPhoneNumberType',
        'provisionedThroughPureCloud' => 'getProvisionedThroughPureCloud',
        'phoneNumberStatus' => 'getPhoneNumberStatus',
        'capabilities' => 'getCapabilities',
        'countryCode' => 'getCountryCode',
        'dateCreated' => 'getDateCreated',
        'dateModified' => 'getDateModified',
        'createdBy' => 'getCreatedBy',
        'modifiedBy' => 'getModifiedBy',
        'version' => 'getVersion',
        'purchaseDate' => 'getPurchaseDate',
        'cancellationDate' => 'getCancellationDate',
        'renewalDate' => 'getRenewalDate',
        'autoRenewable' => 'getAutoRenewable',
        'addressId' => 'getAddressId',
        'shortCodeBillingType' => 'getShortCodeBillingType',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PHONE_NUMBER_TYPE_LOCAL = 'local';
    const PHONE_NUMBER_TYPE_MOBILE = 'mobile';
    const PHONE_NUMBER_TYPE_TOLLFREE = 'tollfree';
    const PHONE_NUMBER_TYPE_SHORTCODE = 'shortcode';
    const PHONE_NUMBER_STATUS_INVALID = 'INVALID';
    const PHONE_NUMBER_STATUS_ACTIVE = 'ACTIVE';
    const PHONE_NUMBER_STATUS_PORTING = 'PORTING';
    const PHONE_NUMBER_STATUS_PENDING = 'PENDING';
    const PHONE_NUMBER_STATUS_PENDING_CANCELLATION = 'PENDING_CANCELLATION';
    const CAPABILITIES_SMS = 'sms';
    const CAPABILITIES_MMS = 'mms';
    const CAPABILITIES_VOICE = 'voice';
    const AUTO_RENEWABLE_QUARTERLY = 'Quarterly';
    const SHORT_CODE_BILLING_TYPE_BASIC = 'Basic';
    const SHORT_CODE_BILLING_TYPE_VANITY = 'Vanity';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhoneNumberTypeAllowableValues()
    {
        return [
            self::PHONE_NUMBER_TYPE_LOCAL,
            self::PHONE_NUMBER_TYPE_MOBILE,
            self::PHONE_NUMBER_TYPE_TOLLFREE,
            self::PHONE_NUMBER_TYPE_SHORTCODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhoneNumberStatusAllowableValues()
    {
        return [
            self::PHONE_NUMBER_STATUS_INVALID,
            self::PHONE_NUMBER_STATUS_ACTIVE,
            self::PHONE_NUMBER_STATUS_PORTING,
            self::PHONE_NUMBER_STATUS_PENDING,
            self::PHONE_NUMBER_STATUS_PENDING_CANCELLATION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCapabilitiesAllowableValues()
    {
        return [
            self::CAPABILITIES_SMS,
            self::CAPABILITIES_MMS,
            self::CAPABILITIES_VOICE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoRenewableAllowableValues()
    {
        return [
            self::AUTO_RENEWABLE_QUARTERLY,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShortCodeBillingTypeAllowableValues()
    {
        return [
            self::SHORT_CODE_BILLING_TYPE_BASIC,
            self::SHORT_CODE_BILLING_TYPE_VANITY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['phoneNumber'] = isset($data['phoneNumber']) ? $data['phoneNumber'] : null;
        $this->container['phoneNumberType'] = isset($data['phoneNumberType']) ? $data['phoneNumberType'] : null;
        $this->container['provisionedThroughPureCloud'] = isset($data['provisionedThroughPureCloud']) ? $data['provisionedThroughPureCloud'] : null;
        $this->container['phoneNumberStatus'] = isset($data['phoneNumberStatus']) ? $data['phoneNumberStatus'] : null;
        $this->container['capabilities'] = isset($data['capabilities']) ? $data['capabilities'] : null;
        $this->container['countryCode'] = isset($data['countryCode']) ? $data['countryCode'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['dateModified'] = isset($data['dateModified']) ? $data['dateModified'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['modifiedBy'] = isset($data['modifiedBy']) ? $data['modifiedBy'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['purchaseDate'] = isset($data['purchaseDate']) ? $data['purchaseDate'] : null;
        $this->container['cancellationDate'] = isset($data['cancellationDate']) ? $data['cancellationDate'] : null;
        $this->container['renewalDate'] = isset($data['renewalDate']) ? $data['renewalDate'] : null;
        $this->container['autoRenewable'] = isset($data['autoRenewable']) ? $data['autoRenewable'] : null;
        $this->container['addressId'] = isset($data['addressId']) ? $data['addressId'] : null;
        $this->container['shortCodeBillingType'] = isset($data['shortCodeBillingType']) ? $data['shortCodeBillingType'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['phoneNumber'] === null) {
            $invalidProperties[] = "'phoneNumber' can't be null";
        }
        $allowedValues = $this->getPhoneNumberTypeAllowableValues();
        if (!is_null($this->container['phoneNumberType']) && !in_array($this->container['phoneNumberType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'phoneNumberType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhoneNumberStatusAllowableValues();
        if (!is_null($this->container['phoneNumberStatus']) && !in_array($this->container['phoneNumberStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'phoneNumberStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        $allowedValues = $this->getAutoRenewableAllowableValues();
        if (!is_null($this->container['autoRenewable']) && !in_array($this->container['autoRenewable'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'autoRenewable', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getShortCodeBillingTypeAllowableValues();
        if (!is_null($this->container['shortCodeBillingType']) && !in_array($this->container['shortCodeBillingType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shortCodeBillingType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phoneNumber
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string $phoneNumber A phone number provisioned for SMS communications in E.164 format. E.g. +13175555555 or +34234234234
     *
     * @return $this
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets phoneNumberType
     *
     * @return string
     */
    public function getPhoneNumberType()
    {
        return $this->container['phoneNumberType'];
    }

    /**
     * Sets phoneNumberType
     *
     * @param string $phoneNumberType Type of the phone number provisioned.
     *
     * @return $this
     */
    public function setPhoneNumberType($phoneNumberType)
    {
        $allowedValues = $this->getPhoneNumberTypeAllowableValues();
        if (!is_null($phoneNumberType) && !in_array($phoneNumberType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'phoneNumberType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phoneNumberType'] = $phoneNumberType;

        return $this;
    }

    /**
     * Gets provisionedThroughPureCloud
     *
     * @return bool
     */
    public function getProvisionedThroughPureCloud()
    {
        return $this->container['provisionedThroughPureCloud'];
    }

    /**
     * Sets provisionedThroughPureCloud
     *
     * @param bool $provisionedThroughPureCloud Is set to false, if the phone number is provisioned through a SMS provider, outside of PureCloud
     *
     * @return $this
     */
    public function setProvisionedThroughPureCloud($provisionedThroughPureCloud)
    {
        $this->container['provisionedThroughPureCloud'] = $provisionedThroughPureCloud;

        return $this;
    }

    /**
     * Gets phoneNumberStatus
     *
     * @return string
     */
    public function getPhoneNumberStatus()
    {
        return $this->container['phoneNumberStatus'];
    }

    /**
     * Sets phoneNumberStatus
     *
     * @param string $phoneNumberStatus Status of the provisioned phone number.
     *
     * @return $this
     */
    public function setPhoneNumberStatus($phoneNumberStatus)
    {
        $allowedValues = $this->getPhoneNumberStatusAllowableValues();
        if (!is_null($phoneNumberStatus) && !in_array($phoneNumberStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'phoneNumberStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phoneNumberStatus'] = $phoneNumberStatus;

        return $this;
    }

    /**
     * Gets capabilities
     *
     * @return string[]
     */
    public function getCapabilities()
    {
        return $this->container['capabilities'];
    }

    /**
     * Sets capabilities
     *
     * @param string[] $capabilities The capabilities of the phone number available for provisioning.
     *
     * @return $this
     */
    public function setCapabilities($capabilities)
    {
        $allowedValues = $this->getCapabilitiesAllowableValues();
        if (!is_null($capabilities) && array_diff($capabilities, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'capabilities', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['capabilities'] = $capabilities;

        return $this;
    }

    /**
     * Gets countryCode
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['countryCode'];
    }

    /**
     * Sets countryCode
     *
     * @param string $countryCode The ISO 3166-1 alpha-2 country code of the country this phone number is associated with.
     *
     * @return $this
     */
    public function setCountryCode($countryCode)
    {
        $this->container['countryCode'] = $countryCode;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated Date this phone number was provisioned. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets dateModified
     *
     * @return \DateTime
     */
    public function getDateModified()
    {
        return $this->container['dateModified'];
    }

    /**
     * Sets dateModified
     *
     * @param \DateTime $dateModified Date this phone number was modified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateModified($dateModified)
    {
        $this->container['dateModified'] = $dateModified;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $createdBy User that provisioned this phone number
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets modifiedBy
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getModifiedBy()
    {
        return $this->container['modifiedBy'];
    }

    /**
     * Sets modifiedBy
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $modifiedBy User that last modified this phone number
     *
     * @return $this
     */
    public function setModifiedBy($modifiedBy)
    {
        $this->container['modifiedBy'] = $modifiedBy;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Version number required for updates.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets purchaseDate
     *
     * @return \DateTime
     */
    public function getPurchaseDate()
    {
        return $this->container['purchaseDate'];
    }

    /**
     * Sets purchaseDate
     *
     * @param \DateTime $purchaseDate Date this phone number was purchased, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setPurchaseDate($purchaseDate)
    {
        $this->container['purchaseDate'] = $purchaseDate;

        return $this;
    }

    /**
     * Gets cancellationDate
     *
     * @return \DateTime
     */
    public function getCancellationDate()
    {
        return $this->container['cancellationDate'];
    }

    /**
     * Sets cancellationDate
     *
     * @param \DateTime $cancellationDate Contract end date of this phone number, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setCancellationDate($cancellationDate)
    {
        $this->container['cancellationDate'] = $cancellationDate;

        return $this;
    }

    /**
     * Gets renewalDate
     *
     * @return \DateTime
     */
    public function getRenewalDate()
    {
        return $this->container['renewalDate'];
    }

    /**
     * Sets renewalDate
     *
     * @param \DateTime $renewalDate Contract renewal date of this phone number, if the phoneNumberType is shortcode. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setRenewalDate($renewalDate)
    {
        $this->container['renewalDate'] = $renewalDate;

        return $this;
    }

    /**
     * Gets autoRenewable
     *
     * @return string
     */
    public function getAutoRenewable()
    {
        return $this->container['autoRenewable'];
    }

    /**
     * Sets autoRenewable
     *
     * @param string $autoRenewable Renewal time period of this phone number, if the phoneNumberType is shortcode.
     *
     * @return $this
     */
    public function setAutoRenewable($autoRenewable)
    {
        $allowedValues = $this->getAutoRenewableAllowableValues();
        if (!is_null($autoRenewable) && !in_array($autoRenewable, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'autoRenewable', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['autoRenewable'] = $autoRenewable;

        return $this;
    }

    /**
     * Gets addressId
     *
     * @return \PureCloudPlatform\Client\V2\Model\SmsAddress
     */
    public function getAddressId()
    {
        return $this->container['addressId'];
    }

    /**
     * Sets addressId
     *
     * @param \PureCloudPlatform\Client\V2\Model\SmsAddress $addressId The id of an address attached to this phone number.
     *
     * @return $this
     */
    public function setAddressId($addressId)
    {
        $this->container['addressId'] = $addressId;

        return $this;
    }

    /**
     * Gets shortCodeBillingType
     *
     * @return string
     */
    public function getShortCodeBillingType()
    {
        return $this->container['shortCodeBillingType'];
    }

    /**
     * Sets shortCodeBillingType
     *
     * @param string $shortCodeBillingType BillingType of this phone number, if the phoneNumberType is shortcode.
     *
     * @return $this
     */
    public function setShortCodeBillingType($shortCodeBillingType)
    {
        $allowedValues = $this->getShortCodeBillingTypeAllowableValues();
        if (!is_null($shortCodeBillingType) && !in_array($shortCodeBillingType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shortCodeBillingType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shortCodeBillingType'] = $shortCodeBillingType;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


