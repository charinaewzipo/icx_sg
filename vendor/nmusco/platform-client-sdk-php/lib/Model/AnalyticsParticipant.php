<?php
/**
 * AnalyticsParticipant
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * AnalyticsParticipant Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsParticipant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsParticipant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'participantId' => 'string',
        'participantName' => 'string',
        'attributes' => 'map[string,string]',
        'userId' => 'string',
        'purpose' => 'string',
        'externalContactId' => 'string',
        'externalOrganizationId' => 'string',
        'flaggedReason' => 'string',
        'sessions' => '\PureCloudPlatform\Client\V2\Model\AnalyticsSession[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'participantId' => null,
        'participantName' => null,
        'attributes' => null,
        'userId' => null,
        'purpose' => null,
        'externalContactId' => null,
        'externalOrganizationId' => null,
        'flaggedReason' => null,
        'sessions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'participantId' => 'participantId',
        'participantName' => 'participantName',
        'attributes' => 'attributes',
        'userId' => 'userId',
        'purpose' => 'purpose',
        'externalContactId' => 'externalContactId',
        'externalOrganizationId' => 'externalOrganizationId',
        'flaggedReason' => 'flaggedReason',
        'sessions' => 'sessions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'participantId' => 'setParticipantId',
        'participantName' => 'setParticipantName',
        'attributes' => 'setAttributes',
        'userId' => 'setUserId',
        'purpose' => 'setPurpose',
        'externalContactId' => 'setExternalContactId',
        'externalOrganizationId' => 'setExternalOrganizationId',
        'flaggedReason' => 'setFlaggedReason',
        'sessions' => 'setSessions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'participantId' => 'getParticipantId',
        'participantName' => 'getParticipantName',
        'attributes' => 'getAttributes',
        'userId' => 'getUserId',
        'purpose' => 'getPurpose',
        'externalContactId' => 'getExternalContactId',
        'externalOrganizationId' => 'getExternalOrganizationId',
        'flaggedReason' => 'getFlaggedReason',
        'sessions' => 'getSessions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PURPOSE_MANUAL = 'manual';
    const PURPOSE_DIALER = 'dialer';
    const PURPOSE_INBOUND = 'inbound';
    const PURPOSE_ACD = 'acd';
    const PURPOSE_IVR = 'ivr';
    const PURPOSE_VOICEMAIL = 'voicemail';
    const PURPOSE_OUTBOUND = 'outbound';
    const PURPOSE_AGENT = 'agent';
    const PURPOSE_USER = 'user';
    const PURPOSE_STATION = 'station';
    const PURPOSE_GROUP = 'group';
    const PURPOSE_CUSTOMER = 'customer';
    const PURPOSE_EXTERNAL = 'external';
    const PURPOSE_FAX = 'fax';
    const PURPOSE_WORKFLOW = 'workflow';
    const PURPOSE_CAMPAIGN = 'campaign';
    const PURPOSE_API = 'api';
    const FLAGGED_REASON_GENERAL = 'general';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPurposeAllowableValues()
    {
        return [
            self::PURPOSE_MANUAL,
            self::PURPOSE_DIALER,
            self::PURPOSE_INBOUND,
            self::PURPOSE_ACD,
            self::PURPOSE_IVR,
            self::PURPOSE_VOICEMAIL,
            self::PURPOSE_OUTBOUND,
            self::PURPOSE_AGENT,
            self::PURPOSE_USER,
            self::PURPOSE_STATION,
            self::PURPOSE_GROUP,
            self::PURPOSE_CUSTOMER,
            self::PURPOSE_EXTERNAL,
            self::PURPOSE_FAX,
            self::PURPOSE_WORKFLOW,
            self::PURPOSE_CAMPAIGN,
            self::PURPOSE_API,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlaggedReasonAllowableValues()
    {
        return [
            self::FLAGGED_REASON_GENERAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['participantId'] = isset($data['participantId']) ? $data['participantId'] : null;
        $this->container['participantName'] = isset($data['participantName']) ? $data['participantName'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['externalContactId'] = isset($data['externalContactId']) ? $data['externalContactId'] : null;
        $this->container['externalOrganizationId'] = isset($data['externalOrganizationId']) ? $data['externalOrganizationId'] : null;
        $this->container['flaggedReason'] = isset($data['flaggedReason']) ? $data['flaggedReason'] : null;
        $this->container['sessions'] = isset($data['sessions']) ? $data['sessions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPurposeAllowableValues();
        if (!is_null($this->container['purpose']) && !in_array($this->container['purpose'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'purpose', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFlaggedReasonAllowableValues();
        if (!is_null($this->container['flaggedReason']) && !in_array($this->container['flaggedReason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flaggedReason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets participantId
     *
     * @return string
     */
    public function getParticipantId()
    {
        return $this->container['participantId'];
    }

    /**
     * Sets participantId
     *
     * @param string $participantId Unique identifier for the participant
     *
     * @return $this
     */
    public function setParticipantId($participantId)
    {
        $this->container['participantId'] = $participantId;

        return $this;
    }

    /**
     * Gets participantName
     *
     * @return string
     */
    public function getParticipantName()
    {
        return $this->container['participantName'];
    }

    /**
     * Sets participantName
     *
     * @param string $participantName A human readable name identifying the participant
     *
     * @return $this
     */
    public function setParticipantName($participantName)
    {
        $this->container['participantName'] = $participantName;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,string]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,string] $attributes List of attributes associated to this participant
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId If a user, then this will be the unique identifier for the user
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose The participant's purpose
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $allowedValues = $this->getPurposeAllowableValues();
        if (!is_null($purpose) && !in_array($purpose, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'purpose', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets externalContactId
     *
     * @return string
     */
    public function getExternalContactId()
    {
        return $this->container['externalContactId'];
    }

    /**
     * Sets externalContactId
     *
     * @param string $externalContactId External Contact Identifier
     *
     * @return $this
     */
    public function setExternalContactId($externalContactId)
    {
        $this->container['externalContactId'] = $externalContactId;

        return $this;
    }

    /**
     * Gets externalOrganizationId
     *
     * @return string
     */
    public function getExternalOrganizationId()
    {
        return $this->container['externalOrganizationId'];
    }

    /**
     * Sets externalOrganizationId
     *
     * @param string $externalOrganizationId External Organization Identifier
     *
     * @return $this
     */
    public function setExternalOrganizationId($externalOrganizationId)
    {
        $this->container['externalOrganizationId'] = $externalOrganizationId;

        return $this;
    }

    /**
     * Gets flaggedReason
     *
     * @return string
     */
    public function getFlaggedReason()
    {
        return $this->container['flaggedReason'];
    }

    /**
     * Sets flaggedReason
     *
     * @param string $flaggedReason Reason for which participant flagged conversation
     *
     * @return $this
     */
    public function setFlaggedReason($flaggedReason)
    {
        $allowedValues = $this->getFlaggedReasonAllowableValues();
        if (!is_null($flaggedReason) && !in_array($flaggedReason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flaggedReason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flaggedReason'] = $flaggedReason;

        return $this;
    }

    /**
     * Gets sessions
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsSession[]
     */
    public function getSessions()
    {
        return $this->container['sessions'];
    }

    /**
     * Sets sessions
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsSession[] $sessions List of sessions associated to this participant
     *
     * @return $this
     */
    public function setSessions($sessions)
    {
        $this->container['sessions'] = $sessions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


