<?php
/**
 * SubscriptionOverviewUsage
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * SubscriptionOverviewUsage Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionOverviewUsage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionOverviewUsage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'partNumber' => 'string',
        'grouping' => 'string',
        'unitOfMeasureType' => 'string',
        'usageQuantity' => 'string',
        'overagePrice' => 'string',
        'prepayQuantity' => 'string',
        'prepayPrice' => 'string',
        'usageNotes' => 'string',
        'isCancellable' => 'bool',
        'bundleQuantity' => 'string',
        'isThirdParty' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'partNumber' => null,
        'grouping' => null,
        'unitOfMeasureType' => null,
        'usageQuantity' => null,
        'overagePrice' => null,
        'prepayQuantity' => null,
        'prepayPrice' => null,
        'usageNotes' => null,
        'isCancellable' => null,
        'bundleQuantity' => null,
        'isThirdParty' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'partNumber' => 'partNumber',
        'grouping' => 'grouping',
        'unitOfMeasureType' => 'unitOfMeasureType',
        'usageQuantity' => 'usageQuantity',
        'overagePrice' => 'overagePrice',
        'prepayQuantity' => 'prepayQuantity',
        'prepayPrice' => 'prepayPrice',
        'usageNotes' => 'usageNotes',
        'isCancellable' => 'isCancellable',
        'bundleQuantity' => 'bundleQuantity',
        'isThirdParty' => 'isThirdParty'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'partNumber' => 'setPartNumber',
        'grouping' => 'setGrouping',
        'unitOfMeasureType' => 'setUnitOfMeasureType',
        'usageQuantity' => 'setUsageQuantity',
        'overagePrice' => 'setOveragePrice',
        'prepayQuantity' => 'setPrepayQuantity',
        'prepayPrice' => 'setPrepayPrice',
        'usageNotes' => 'setUsageNotes',
        'isCancellable' => 'setIsCancellable',
        'bundleQuantity' => 'setBundleQuantity',
        'isThirdParty' => 'setIsThirdParty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'partNumber' => 'getPartNumber',
        'grouping' => 'getGrouping',
        'unitOfMeasureType' => 'getUnitOfMeasureType',
        'usageQuantity' => 'getUsageQuantity',
        'overagePrice' => 'getOveragePrice',
        'prepayQuantity' => 'getPrepayQuantity',
        'prepayPrice' => 'getPrepayPrice',
        'usageNotes' => 'getUsageNotes',
        'isCancellable' => 'getIsCancellable',
        'bundleQuantity' => 'getBundleQuantity',
        'isThirdParty' => 'getIsThirdParty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['partNumber'] = isset($data['partNumber']) ? $data['partNumber'] : null;
        $this->container['grouping'] = isset($data['grouping']) ? $data['grouping'] : null;
        $this->container['unitOfMeasureType'] = isset($data['unitOfMeasureType']) ? $data['unitOfMeasureType'] : null;
        $this->container['usageQuantity'] = isset($data['usageQuantity']) ? $data['usageQuantity'] : null;
        $this->container['overagePrice'] = isset($data['overagePrice']) ? $data['overagePrice'] : null;
        $this->container['prepayQuantity'] = isset($data['prepayQuantity']) ? $data['prepayQuantity'] : null;
        $this->container['prepayPrice'] = isset($data['prepayPrice']) ? $data['prepayPrice'] : null;
        $this->container['usageNotes'] = isset($data['usageNotes']) ? $data['usageNotes'] : null;
        $this->container['isCancellable'] = isset($data['isCancellable']) ? $data['isCancellable'] : null;
        $this->container['bundleQuantity'] = isset($data['bundleQuantity']) ? $data['bundleQuantity'] : null;
        $this->container['isThirdParty'] = isset($data['isThirdParty']) ? $data['isThirdParty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['partNumber'] === null) {
            $invalidProperties[] = "'partNumber' can't be null";
        }
        if ($this->container['grouping'] === null) {
            $invalidProperties[] = "'grouping' can't be null";
        }
        if ($this->container['unitOfMeasureType'] === null) {
            $invalidProperties[] = "'unitOfMeasureType' can't be null";
        }
        if ($this->container['usageQuantity'] === null) {
            $invalidProperties[] = "'usageQuantity' can't be null";
        }
        if ($this->container['prepayQuantity'] === null) {
            $invalidProperties[] = "'prepayQuantity' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Product charge name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets partNumber
     *
     * @return string
     */
    public function getPartNumber()
    {
        return $this->container['partNumber'];
    }

    /**
     * Sets partNumber
     *
     * @param string $partNumber Product part number
     *
     * @return $this
     */
    public function setPartNumber($partNumber)
    {
        $this->container['partNumber'] = $partNumber;

        return $this;
    }

    /**
     * Gets grouping
     *
     * @return string
     */
    public function getGrouping()
    {
        return $this->container['grouping'];
    }

    /**
     * Sets grouping
     *
     * @param string $grouping UI grouping key
     *
     * @return $this
     */
    public function setGrouping($grouping)
    {
        $this->container['grouping'] = $grouping;

        return $this;
    }

    /**
     * Gets unitOfMeasureType
     *
     * @return string
     */
    public function getUnitOfMeasureType()
    {
        return $this->container['unitOfMeasureType'];
    }

    /**
     * Sets unitOfMeasureType
     *
     * @param string $unitOfMeasureType UI unit of measure
     *
     * @return $this
     */
    public function setUnitOfMeasureType($unitOfMeasureType)
    {
        $this->container['unitOfMeasureType'] = $unitOfMeasureType;

        return $this;
    }

    /**
     * Gets usageQuantity
     *
     * @return string
     */
    public function getUsageQuantity()
    {
        return $this->container['usageQuantity'];
    }

    /**
     * Sets usageQuantity
     *
     * @param string $usageQuantity Usage count for specified period
     *
     * @return $this
     */
    public function setUsageQuantity($usageQuantity)
    {
        $this->container['usageQuantity'] = $usageQuantity;

        return $this;
    }

    /**
     * Gets overagePrice
     *
     * @return string
     */
    public function getOveragePrice()
    {
        return $this->container['overagePrice'];
    }

    /**
     * Sets overagePrice
     *
     * @param string $overagePrice Price for usage / overage charge
     *
     * @return $this
     */
    public function setOveragePrice($overagePrice)
    {
        $this->container['overagePrice'] = $overagePrice;

        return $this;
    }

    /**
     * Gets prepayQuantity
     *
     * @return string
     */
    public function getPrepayQuantity()
    {
        return $this->container['prepayQuantity'];
    }

    /**
     * Sets prepayQuantity
     *
     * @param string $prepayQuantity Items prepaid for specified period
     *
     * @return $this
     */
    public function setPrepayQuantity($prepayQuantity)
    {
        $this->container['prepayQuantity'] = $prepayQuantity;

        return $this;
    }

    /**
     * Gets prepayPrice
     *
     * @return string
     */
    public function getPrepayPrice()
    {
        return $this->container['prepayPrice'];
    }

    /**
     * Sets prepayPrice
     *
     * @param string $prepayPrice Price for prepay charge
     *
     * @return $this
     */
    public function setPrepayPrice($prepayPrice)
    {
        $this->container['prepayPrice'] = $prepayPrice;

        return $this;
    }

    /**
     * Gets usageNotes
     *
     * @return string
     */
    public function getUsageNotes()
    {
        return $this->container['usageNotes'];
    }

    /**
     * Sets usageNotes
     *
     * @param string $usageNotes Notes about the usage/charge item
     *
     * @return $this
     */
    public function setUsageNotes($usageNotes)
    {
        $this->container['usageNotes'] = $usageNotes;

        return $this;
    }

    /**
     * Gets isCancellable
     *
     * @return bool
     */
    public function getIsCancellable()
    {
        return $this->container['isCancellable'];
    }

    /**
     * Sets isCancellable
     *
     * @param bool $isCancellable Indicates whether the item is cancellable
     *
     * @return $this
     */
    public function setIsCancellable($isCancellable)
    {
        $this->container['isCancellable'] = $isCancellable;

        return $this;
    }

    /**
     * Gets bundleQuantity
     *
     * @return string
     */
    public function getBundleQuantity()
    {
        return $this->container['bundleQuantity'];
    }

    /**
     * Sets bundleQuantity
     *
     * @param string $bundleQuantity Quantity multiplier for this charge
     *
     * @return $this
     */
    public function setBundleQuantity($bundleQuantity)
    {
        $this->container['bundleQuantity'] = $bundleQuantity;

        return $this;
    }

    /**
     * Gets isThirdParty
     *
     * @return bool
     */
    public function getIsThirdParty()
    {
        return $this->container['isThirdParty'];
    }

    /**
     * Sets isThirdParty
     *
     * @param bool $isThirdParty A charge from a third party entity
     *
     * @return $this
     */
    public function setIsThirdParty($isThirdParty)
    {
        $this->container['isThirdParty'] = $isThirdParty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


