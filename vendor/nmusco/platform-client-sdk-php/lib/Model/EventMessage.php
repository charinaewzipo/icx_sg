<?php
/**
 * EventMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * EventMessage Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'messageWithParams' => 'string',
        'messageParams' => 'map[string,object]',
        'documentationUri' => 'string',
        'resourceURIs' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'messageWithParams' => null,
        'messageParams' => null,
        'documentationUri' => null,
        'resourceURIs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'messageWithParams' => 'messageWithParams',
        'messageParams' => 'messageParams',
        'documentationUri' => 'documentationUri',
        'resourceURIs' => 'resourceURIs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'messageWithParams' => 'setMessageWithParams',
        'messageParams' => 'setMessageParams',
        'documentationUri' => 'setDocumentationUri',
        'resourceURIs' => 'setResourceURIs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'messageWithParams' => 'getMessageWithParams',
        'messageParams' => 'getMessageParams',
        'documentationUri' => 'getDocumentationUri',
        'resourceURIs' => 'getResourceURIs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CODE_APPROACHING_CONTACT_LIMIT = 'APPROACHING_CONTACT_LIMIT';
    const CODE_APPROACHING_ENTITY_LIMIT = 'APPROACHING_ENTITY_LIMIT';
    const CODE_AUTOMATIC_TIME_ZONE_ZIP_CODE_INVALID = 'AUTOMATIC_TIME_ZONE_ZIP_CODE_INVALID';
    const CODE_CAMPAIGN_START_ERROR = 'CAMPAIGN_START_ERROR';
    const CODE_CAMPAIGN_RULE_START_ERROR = 'CAMPAIGN_RULE_START_ERROR';
    const CODE_CAMPAIGN_SET_DIALING_MODE_ERROR = 'CAMPAIGN_SET_DIALING_MODE_ERROR';
    const CODE_CAMPAIGN_THROTTLED = 'CAMPAIGN_THROTTLED';
    const CODE_INVALID_CALLABLE_TIME_ZONE = 'INVALID_CALLABLE_TIME_ZONE';
    const CODE_CALLBACK_CREATION_INVALID_NUMBER = 'CALLBACK_CREATION_INVALID_NUMBER';
    const CODE_CALL_RULE_INVALID_CONTACT_COLUMN = 'CALL_RULE_INVALID_CONTACT_COLUMN';
    const CODE_CALL_RULE_MISSING_DATA_ACTION_INPUT = 'CALL_RULE_MISSING_DATA_ACTION_INPUT';
    const CODE_CALL_RULE_MISMATCH_TYPE = 'CALL_RULE_MISMATCH_TYPE';
    const CODE_CALL_RULE_INVALID_OPERATOR = 'CALL_RULE_INVALID_OPERATOR';
    const CODE_CALL_RULE_NO_DNC_LISTS_CONFIGURED = 'CALL_RULE_NO_DNC_LISTS_CONFIGURED';
    const CODE_CALL_RULE_UPDATED_PHONE_COLUMN = 'CALL_RULE_UPDATED_PHONE_COLUMN';
    const CODE_CONTACT_LIST_FILTER_EVALUATION_FAILED = 'CONTACT_LIST_FILTER_EVALUATION_FAILED';
    const CODE_CONTACT_LIST_FILTER_INTERNAL_ERROR = 'CONTACT_LIST_FILTER_INTERNAL_ERROR';
    const CODE_CONTACT_COLUMNS_LIMIT_EXCEEDED = 'CONTACT_COLUMNS_LIMIT_EXCEEDED';
    const CODE_CONTACT_COLUMN_LENGTH_LIMIT_EXCEEDED = 'CONTACT_COLUMN_LENGTH_LIMIT_EXCEEDED';
    const CODE_CONTACT_DATUM_LENGTH_LIMIT_EXCEEDED = 'CONTACT_DATUM_LENGTH_LIMIT_EXCEEDED';
    const CODE_CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID = 'CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID';
    const CODE_DATA_ACTION_EXECUTION_FAILED = 'DATA_ACTION_EXECUTION_FAILED';
    const CODE_DATA_ACTION_AUTHENTICATION_FAILURE = 'DATA_ACTION_AUTHENTICATION_FAILURE';
    const CODE_DATA_ACTION_NOT_FOUND = 'DATA_ACTION_NOT_FOUND';
    const CODE_DNC_AUTHENTICATION_FAILURE = 'DNC_AUTHENTICATION_FAILURE';
    const CODE_EXCEEDED_CONTACT_LIMIT = 'EXCEEDED_CONTACT_LIMIT';
    const CODE_INACTIVE_EDGES_FAILED_PLACE_CALLS = 'INACTIVE_EDGES_FAILED_PLACE_CALLS';
    const CODE_INACTIVE_EDGES_TURNED_CAMPAIGN_OFF = 'INACTIVE_EDGES_TURNED_CAMPAIGN_OFF';
    const CODE_INVALID_PHONE_NUMBER = 'INVALID_PHONE_NUMBER';
    const CODE_IMPORT_FAILED_TO_READ_HEADERS = 'IMPORT_FAILED_TO_READ_HEADERS';
    const CODE_IMPORT_COULD_NOT_PARSE_AN_ENTRY = 'IMPORT_COULD_NOT_PARSE_AN_ENTRY';
    const CODE_IMPORT_CONTACT_DOES_NOT_MATCH_LIST_FORMAT = 'IMPORT_CONTACT_DOES_NOT_MATCH_LIST_FORMAT';
    const CODE_IMPORT_ENTRY_DOES_NOT_ALIGN_WITH_HEADERS = 'IMPORT_ENTRY_DOES_NOT_ALIGN_WITH_HEADERS';
    const CODE_IMPORT_INVALID_CUSTOM_ID = 'IMPORT_INVALID_CUSTOM_ID';
    const CODE_IMPORT_INVALID_DATA = 'IMPORT_INVALID_DATA';
    const CODE_IMPORT_COLUMN_EXCEEDS_LENGTH_LIMIT = 'IMPORT_COLUMN_EXCEEDS_LENGTH_LIMIT';
    const CODE_IMPORT_DATUM_EXCEEDS_LENGTH_LIMIT = 'IMPORT_DATUM_EXCEEDS_LENGTH_LIMIT';
    const CODE_IMPORT_MISSING_CUSTOM_ID = 'IMPORT_MISSING_CUSTOM_ID';
    const CODE_IMPORT_NO_COLUMNS_DEFINED = 'IMPORT_NO_COLUMNS_DEFINED';
    const CODE_IMPORT_COLUMNS_DO_NOT_EXIST_ON_LIST = 'IMPORT_COLUMNS_DO_NOT_EXIST_ON_LIST';
    const CODE_IMPORT_LIST_NO_LONGER_EXISTS = 'IMPORT_LIST_NO_LONGER_EXISTS';
    const CODE_IMPORT_FAILED_CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID = 'IMPORT_FAILED_CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID';
    const CODE_IMPORT_TOO_MANY_COLUMNS = 'IMPORT_TOO_MANY_COLUMNS';
    const CODE_ORGANIZATION_HAS_NO_DOMAIN_SET = 'ORGANIZATION_HAS_NO_DOMAIN_SET';
    const CODE_RECYCLE_CAMPAIGN = 'RECYCLE_CAMPAIGN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_APPROACHING_CONTACT_LIMIT,
            self::CODE_APPROACHING_ENTITY_LIMIT,
            self::CODE_AUTOMATIC_TIME_ZONE_ZIP_CODE_INVALID,
            self::CODE_CAMPAIGN_START_ERROR,
            self::CODE_CAMPAIGN_RULE_START_ERROR,
            self::CODE_CAMPAIGN_SET_DIALING_MODE_ERROR,
            self::CODE_CAMPAIGN_THROTTLED,
            self::CODE_INVALID_CALLABLE_TIME_ZONE,
            self::CODE_CALLBACK_CREATION_INVALID_NUMBER,
            self::CODE_CALL_RULE_INVALID_CONTACT_COLUMN,
            self::CODE_CALL_RULE_MISSING_DATA_ACTION_INPUT,
            self::CODE_CALL_RULE_MISMATCH_TYPE,
            self::CODE_CALL_RULE_INVALID_OPERATOR,
            self::CODE_CALL_RULE_NO_DNC_LISTS_CONFIGURED,
            self::CODE_CALL_RULE_UPDATED_PHONE_COLUMN,
            self::CODE_CONTACT_LIST_FILTER_EVALUATION_FAILED,
            self::CODE_CONTACT_LIST_FILTER_INTERNAL_ERROR,
            self::CODE_CONTACT_COLUMNS_LIMIT_EXCEEDED,
            self::CODE_CONTACT_COLUMN_LENGTH_LIMIT_EXCEEDED,
            self::CODE_CONTACT_DATUM_LENGTH_LIMIT_EXCEEDED,
            self::CODE_CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID,
            self::CODE_DATA_ACTION_EXECUTION_FAILED,
            self::CODE_DATA_ACTION_AUTHENTICATION_FAILURE,
            self::CODE_DATA_ACTION_NOT_FOUND,
            self::CODE_DNC_AUTHENTICATION_FAILURE,
            self::CODE_EXCEEDED_CONTACT_LIMIT,
            self::CODE_INACTIVE_EDGES_FAILED_PLACE_CALLS,
            self::CODE_INACTIVE_EDGES_TURNED_CAMPAIGN_OFF,
            self::CODE_INVALID_PHONE_NUMBER,
            self::CODE_IMPORT_FAILED_TO_READ_HEADERS,
            self::CODE_IMPORT_COULD_NOT_PARSE_AN_ENTRY,
            self::CODE_IMPORT_CONTACT_DOES_NOT_MATCH_LIST_FORMAT,
            self::CODE_IMPORT_ENTRY_DOES_NOT_ALIGN_WITH_HEADERS,
            self::CODE_IMPORT_INVALID_CUSTOM_ID,
            self::CODE_IMPORT_INVALID_DATA,
            self::CODE_IMPORT_COLUMN_EXCEEDS_LENGTH_LIMIT,
            self::CODE_IMPORT_DATUM_EXCEEDS_LENGTH_LIMIT,
            self::CODE_IMPORT_MISSING_CUSTOM_ID,
            self::CODE_IMPORT_NO_COLUMNS_DEFINED,
            self::CODE_IMPORT_COLUMNS_DO_NOT_EXIST_ON_LIST,
            self::CODE_IMPORT_LIST_NO_LONGER_EXISTS,
            self::CODE_IMPORT_FAILED_CONTACT_ZIP_CODE_COLUMN_VALUE_INVALID,
            self::CODE_IMPORT_TOO_MANY_COLUMNS,
            self::CODE_ORGANIZATION_HAS_NO_DOMAIN_SET,
            self::CODE_RECYCLE_CAMPAIGN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['messageWithParams'] = isset($data['messageWithParams']) ? $data['messageWithParams'] : null;
        $this->container['messageParams'] = isset($data['messageParams']) ? $data['messageParams'] : null;
        $this->container['documentationUri'] = isset($data['documentationUri']) ? $data['documentationUri'] : null;
        $this->container['resourceURIs'] = isset($data['resourceURIs']) ? $data['resourceURIs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($this->container['code']) && !in_array($this->container['code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets messageWithParams
     *
     * @return string
     */
    public function getMessageWithParams()
    {
        return $this->container['messageWithParams'];
    }

    /**
     * Sets messageWithParams
     *
     * @param string $messageWithParams messageWithParams
     *
     * @return $this
     */
    public function setMessageWithParams($messageWithParams)
    {
        $this->container['messageWithParams'] = $messageWithParams;

        return $this;
    }

    /**
     * Gets messageParams
     *
     * @return map[string,object]
     */
    public function getMessageParams()
    {
        return $this->container['messageParams'];
    }

    /**
     * Sets messageParams
     *
     * @param map[string,object] $messageParams messageParams
     *
     * @return $this
     */
    public function setMessageParams($messageParams)
    {
        $this->container['messageParams'] = $messageParams;

        return $this;
    }

    /**
     * Gets documentationUri
     *
     * @return string
     */
    public function getDocumentationUri()
    {
        return $this->container['documentationUri'];
    }

    /**
     * Sets documentationUri
     *
     * @param string $documentationUri documentationUri
     *
     * @return $this
     */
    public function setDocumentationUri($documentationUri)
    {
        $this->container['documentationUri'] = $documentationUri;

        return $this;
    }

    /**
     * Gets resourceURIs
     *
     * @return string[]
     */
    public function getResourceURIs()
    {
        return $this->container['resourceURIs'];
    }

    /**
     * Sets resourceURIs
     *
     * @param string[] $resourceURIs resourceURIs
     *
     * @return $this
     */
    public function setResourceURIs($resourceURIs)
    {
        $this->container['resourceURIs'] = $resourceURIs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


