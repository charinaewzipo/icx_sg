<?php
/**
 * DependencyObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * DependencyObject Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DependencyObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DependencyObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'version' => 'string',
        'type' => 'string',
        'deleted' => 'bool',
        'updated' => 'bool',
        'stateUnknown' => 'bool',
        'consumedResources' => '\PureCloudPlatform\Client\V2\Model\Dependency[]',
        'consumingResources' => '\PureCloudPlatform\Client\V2\Model\Dependency[]',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'version' => null,
        'type' => null,
        'deleted' => null,
        'updated' => null,
        'stateUnknown' => null,
        'consumedResources' => null,
        'consumingResources' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'version' => 'version',
        'type' => 'type',
        'deleted' => 'deleted',
        'updated' => 'updated',
        'stateUnknown' => 'stateUnknown',
        'consumedResources' => 'consumedResources',
        'consumingResources' => 'consumingResources',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'version' => 'setVersion',
        'type' => 'setType',
        'deleted' => 'setDeleted',
        'updated' => 'setUpdated',
        'stateUnknown' => 'setStateUnknown',
        'consumedResources' => 'setConsumedResources',
        'consumingResources' => 'setConsumingResources',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'version' => 'getVersion',
        'type' => 'getType',
        'deleted' => 'getDeleted',
        'updated' => 'getUpdated',
        'stateUnknown' => 'getStateUnknown',
        'consumedResources' => 'getConsumedResources',
        'consumingResources' => 'getConsumingResources',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ACDLANGUAGE = 'ACDLANGUAGE';
    const TYPE_ACDSKILL = 'ACDSKILL';
    const TYPE_ACDWRAPUPCODE = 'ACDWRAPUPCODE';
    const TYPE_BRIDGEACTION = 'BRIDGEACTION';
    const TYPE_COMMONMODULEFLOW = 'COMMONMODULEFLOW';
    const TYPE_COMPOSERSCRIPT = 'COMPOSERSCRIPT';
    const TYPE_CONTACTLIST = 'CONTACTLIST';
    const TYPE_DATAACTION = 'DATAACTION';
    const TYPE_DATATABLE = 'DATATABLE';
    const TYPE_DIALOGFLOWAGENT = 'DIALOGFLOWAGENT';
    const TYPE_EMAILROUTE = 'EMAILROUTE';
    const TYPE_EMERGENCYGROUP = 'EMERGENCYGROUP';
    const TYPE_FLOWOUTCOME = 'FLOWOUTCOME';
    const TYPE_GROUP = 'GROUP';
    const TYPE_INBOUNDCALLFLOW = 'INBOUNDCALLFLOW';
    const TYPE_INBOUNDCHATFLOW = 'INBOUNDCHATFLOW';
    const TYPE_INBOUNDEMAILFLOW = 'INBOUNDEMAILFLOW';
    const TYPE_INBOUNDSHORTMESSAGEFLOW = 'INBOUNDSHORTMESSAGEFLOW';
    const TYPE_INQUEUECALLFLOW = 'INQUEUECALLFLOW';
    const TYPE_IVRCONFIGURATION = 'IVRCONFIGURATION';
    const TYPE_LANGUAGE = 'LANGUAGE';
    const TYPE_LEXBOT = 'LEXBOT';
    const TYPE_LEXBOTALIAS = 'LEXBOTALIAS';
    const TYPE_OUTBOUNDCALLFLOW = 'OUTBOUNDCALLFLOW';
    const TYPE_QUEUE = 'QUEUE';
    const TYPE_RECORDINGPOLICY = 'RECORDINGPOLICY';
    const TYPE_RESPONSE = 'RESPONSE';
    const TYPE_SCHEDULE = 'SCHEDULE';
    const TYPE_SCHEDULEGROUP = 'SCHEDULEGROUP';
    const TYPE_SECUREACTION = 'SECUREACTION';
    const TYPE_SECURECALLFLOW = 'SECURECALLFLOW';
    const TYPE_SURVEYINVITEFLOW = 'SURVEYINVITEFLOW';
    const TYPE_SYSTEMPROMPT = 'SYSTEMPROMPT';
    const TYPE_TTSENGINE = 'TTSENGINE';
    const TYPE_TTSVOICE = 'TTSVOICE';
    const TYPE_USER = 'USER';
    const TYPE_USERPROMPT = 'USERPROMPT';
    const TYPE_WIDGET = 'WIDGET';
    const TYPE_WORKFLOW = 'WORKFLOW';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACDLANGUAGE,
            self::TYPE_ACDSKILL,
            self::TYPE_ACDWRAPUPCODE,
            self::TYPE_BRIDGEACTION,
            self::TYPE_COMMONMODULEFLOW,
            self::TYPE_COMPOSERSCRIPT,
            self::TYPE_CONTACTLIST,
            self::TYPE_DATAACTION,
            self::TYPE_DATATABLE,
            self::TYPE_DIALOGFLOWAGENT,
            self::TYPE_EMAILROUTE,
            self::TYPE_EMERGENCYGROUP,
            self::TYPE_FLOWOUTCOME,
            self::TYPE_GROUP,
            self::TYPE_INBOUNDCALLFLOW,
            self::TYPE_INBOUNDCHATFLOW,
            self::TYPE_INBOUNDEMAILFLOW,
            self::TYPE_INBOUNDSHORTMESSAGEFLOW,
            self::TYPE_INQUEUECALLFLOW,
            self::TYPE_IVRCONFIGURATION,
            self::TYPE_LANGUAGE,
            self::TYPE_LEXBOT,
            self::TYPE_LEXBOTALIAS,
            self::TYPE_OUTBOUNDCALLFLOW,
            self::TYPE_QUEUE,
            self::TYPE_RECORDINGPOLICY,
            self::TYPE_RESPONSE,
            self::TYPE_SCHEDULE,
            self::TYPE_SCHEDULEGROUP,
            self::TYPE_SECUREACTION,
            self::TYPE_SECURECALLFLOW,
            self::TYPE_SURVEYINVITEFLOW,
            self::TYPE_SYSTEMPROMPT,
            self::TYPE_TTSENGINE,
            self::TYPE_TTSVOICE,
            self::TYPE_USER,
            self::TYPE_USERPROMPT,
            self::TYPE_WIDGET,
            self::TYPE_WORKFLOW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['stateUnknown'] = isset($data['stateUnknown']) ? $data['stateUnknown'] : null;
        $this->container['consumedResources'] = isset($data['consumedResources']) ? $data['consumedResources'] : null;
        $this->container['consumingResources'] = isset($data['consumingResources']) ? $data['consumingResources'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The dependency identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return bool
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param bool $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets stateUnknown
     *
     * @return bool
     */
    public function getStateUnknown()
    {
        return $this->container['stateUnknown'];
    }

    /**
     * Sets stateUnknown
     *
     * @param bool $stateUnknown stateUnknown
     *
     * @return $this
     */
    public function setStateUnknown($stateUnknown)
    {
        $this->container['stateUnknown'] = $stateUnknown;

        return $this;
    }

    /**
     * Gets consumedResources
     *
     * @return \PureCloudPlatform\Client\V2\Model\Dependency[]
     */
    public function getConsumedResources()
    {
        return $this->container['consumedResources'];
    }

    /**
     * Sets consumedResources
     *
     * @param \PureCloudPlatform\Client\V2\Model\Dependency[] $consumedResources consumedResources
     *
     * @return $this
     */
    public function setConsumedResources($consumedResources)
    {
        $this->container['consumedResources'] = $consumedResources;

        return $this;
    }

    /**
     * Gets consumingResources
     *
     * @return \PureCloudPlatform\Client\V2\Model\Dependency[]
     */
    public function getConsumingResources()
    {
        return $this->container['consumingResources'];
    }

    /**
     * Sets consumingResources
     *
     * @param \PureCloudPlatform\Client\V2\Model\Dependency[] $consumingResources consumingResources
     *
     * @return $this
     */
    public function setConsumingResources($consumingResources)
    {
        $this->container['consumingResources'] = $consumingResources;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


