<?php
/**
 * Integration
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * Integration Class Doc Comment
 *
 * @category Class
 * @description Details for an Integration
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Integration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Integration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'integrationType' => '\PureCloudPlatform\Client\V2\Model\IntegrationType',
        'notes' => 'string',
        'intendedState' => 'string',
        'config' => '\PureCloudPlatform\Client\V2\Model\IntegrationConfigurationInfo',
        'reportedState' => '\PureCloudPlatform\Client\V2\Model\IntegrationStatusInfo',
        'attributes' => 'map[string,string]',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'integrationType' => null,
        'notes' => null,
        'intendedState' => null,
        'config' => null,
        'reportedState' => null,
        'attributes' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'integrationType' => 'integrationType',
        'notes' => 'notes',
        'intendedState' => 'intendedState',
        'config' => 'config',
        'reportedState' => 'reportedState',
        'attributes' => 'attributes',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'integrationType' => 'setIntegrationType',
        'notes' => 'setNotes',
        'intendedState' => 'setIntendedState',
        'config' => 'setConfig',
        'reportedState' => 'setReportedState',
        'attributes' => 'setAttributes',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'integrationType' => 'getIntegrationType',
        'notes' => 'getNotes',
        'intendedState' => 'getIntendedState',
        'config' => 'getConfig',
        'reportedState' => 'getReportedState',
        'attributes' => 'getAttributes',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INTENDED_STATE_ENABLED = 'ENABLED';
    const INTENDED_STATE_DISABLED = 'DISABLED';
    const INTENDED_STATE_DELETED = 'DELETED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIntendedStateAllowableValues()
    {
        return [
            self::INTENDED_STATE_ENABLED,
            self::INTENDED_STATE_DISABLED,
            self::INTENDED_STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['integrationType'] = isset($data['integrationType']) ? $data['integrationType'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['intendedState'] = isset($data['intendedState']) ? $data['intendedState'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['reportedState'] = isset($data['reportedState']) ? $data['reportedState'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['intendedState'] === null) {
            $invalidProperties[] = "'intendedState' can't be null";
        }
        $allowedValues = $this->getIntendedStateAllowableValues();
        if (!is_null($this->container['intendedState']) && !in_array($this->container['intendedState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'intendedState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the integration, used to distinguish this integration from others of the same type.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets integrationType
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntegrationType
     */
    public function getIntegrationType()
    {
        return $this->container['integrationType'];
    }

    /**
     * Sets integrationType
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntegrationType $integrationType Type of the integration
     *
     * @return $this
     */
    public function setIntegrationType($integrationType)
    {
        $this->container['integrationType'] = $integrationType;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Notes about the integration.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets intendedState
     *
     * @return string
     */
    public function getIntendedState()
    {
        return $this->container['intendedState'];
    }

    /**
     * Sets intendedState
     *
     * @param string $intendedState Configured state of the integration.
     *
     * @return $this
     */
    public function setIntendedState($intendedState)
    {
        $allowedValues = $this->getIntendedStateAllowableValues();
        if (!in_array($intendedState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'intendedState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['intendedState'] = $intendedState;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntegrationConfigurationInfo
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntegrationConfigurationInfo $config Configuration information for the integration.
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets reportedState
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntegrationStatusInfo
     */
    public function getReportedState()
    {
        return $this->container['reportedState'];
    }

    /**
     * Sets reportedState
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntegrationStatusInfo $reportedState Last reported status of the integration.
     *
     * @return $this
     */
    public function setReportedState($reportedState)
    {
        $this->container['reportedState'] = $reportedState;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return map[string,string]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param map[string,string] $attributes Read-only attributes for the integration.
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


