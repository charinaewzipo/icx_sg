<?php
/**
 * EvaluationScoringSet
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * EvaluationScoringSet Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluationScoringSet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EvaluationScoringSet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'totalScore' => 'float',
        'totalCriticalScore' => 'float',
        'questionGroupScores' => '\PureCloudPlatform\Client\V2\Model\EvaluationQuestionGroupScore[]',
        'anyFailedKillQuestions' => 'bool',
        'comments' => 'string',
        'agentComments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'totalScore' => 'float',
        'totalCriticalScore' => 'float',
        'questionGroupScores' => null,
        'anyFailedKillQuestions' => null,
        'comments' => null,
        'agentComments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'totalScore' => 'totalScore',
        'totalCriticalScore' => 'totalCriticalScore',
        'questionGroupScores' => 'questionGroupScores',
        'anyFailedKillQuestions' => 'anyFailedKillQuestions',
        'comments' => 'comments',
        'agentComments' => 'agentComments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'totalScore' => 'setTotalScore',
        'totalCriticalScore' => 'setTotalCriticalScore',
        'questionGroupScores' => 'setQuestionGroupScores',
        'anyFailedKillQuestions' => 'setAnyFailedKillQuestions',
        'comments' => 'setComments',
        'agentComments' => 'setAgentComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'totalScore' => 'getTotalScore',
        'totalCriticalScore' => 'getTotalCriticalScore',
        'questionGroupScores' => 'getQuestionGroupScores',
        'anyFailedKillQuestions' => 'getAnyFailedKillQuestions',
        'comments' => 'getComments',
        'agentComments' => 'getAgentComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['totalScore'] = isset($data['totalScore']) ? $data['totalScore'] : null;
        $this->container['totalCriticalScore'] = isset($data['totalCriticalScore']) ? $data['totalCriticalScore'] : null;
        $this->container['questionGroupScores'] = isset($data['questionGroupScores']) ? $data['questionGroupScores'] : null;
        $this->container['anyFailedKillQuestions'] = isset($data['anyFailedKillQuestions']) ? $data['anyFailedKillQuestions'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['agentComments'] = isset($data['agentComments']) ? $data['agentComments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets totalScore
     *
     * @return float
     */
    public function getTotalScore()
    {
        return $this->container['totalScore'];
    }

    /**
     * Sets totalScore
     *
     * @param float $totalScore totalScore
     *
     * @return $this
     */
    public function setTotalScore($totalScore)
    {
        $this->container['totalScore'] = $totalScore;

        return $this;
    }

    /**
     * Gets totalCriticalScore
     *
     * @return float
     */
    public function getTotalCriticalScore()
    {
        return $this->container['totalCriticalScore'];
    }

    /**
     * Sets totalCriticalScore
     *
     * @param float $totalCriticalScore totalCriticalScore
     *
     * @return $this
     */
    public function setTotalCriticalScore($totalCriticalScore)
    {
        $this->container['totalCriticalScore'] = $totalCriticalScore;

        return $this;
    }

    /**
     * Gets questionGroupScores
     *
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationQuestionGroupScore[]
     */
    public function getQuestionGroupScores()
    {
        return $this->container['questionGroupScores'];
    }

    /**
     * Sets questionGroupScores
     *
     * @param \PureCloudPlatform\Client\V2\Model\EvaluationQuestionGroupScore[] $questionGroupScores questionGroupScores
     *
     * @return $this
     */
    public function setQuestionGroupScores($questionGroupScores)
    {
        $this->container['questionGroupScores'] = $questionGroupScores;

        return $this;
    }

    /**
     * Gets anyFailedKillQuestions
     *
     * @return bool
     */
    public function getAnyFailedKillQuestions()
    {
        return $this->container['anyFailedKillQuestions'];
    }

    /**
     * Sets anyFailedKillQuestions
     *
     * @param bool $anyFailedKillQuestions anyFailedKillQuestions
     *
     * @return $this
     */
    public function setAnyFailedKillQuestions($anyFailedKillQuestions)
    {
        $this->container['anyFailedKillQuestions'] = $anyFailedKillQuestions;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets agentComments
     *
     * @return string
     */
    public function getAgentComments()
    {
        return $this->container['agentComments'];
    }

    /**
     * Sets agentComments
     *
     * @param string $agentComments agentComments
     *
     * @return $this
     */
    public function setAgentComments($agentComments)
    {
        $this->container['agentComments'] = $agentComments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


