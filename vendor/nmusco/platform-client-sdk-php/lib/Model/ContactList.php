<?php
/**
 * ContactList
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ContactList Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContactList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContactList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'dateCreated' => '\DateTime',
        'dateModified' => '\DateTime',
        'version' => 'int',
        'division' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'columnNames' => 'string[]',
        'phoneColumns' => '\PureCloudPlatform\Client\V2\Model\ContactPhoneNumberColumn[]',
        'importStatus' => '\PureCloudPlatform\Client\V2\Model\ImportStatus',
        'previewModeColumnName' => 'string',
        'previewModeAcceptedValues' => 'string[]',
        'size' => 'int',
        'attemptLimits' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'automaticTimeZoneMapping' => 'bool',
        'zipCodeColumnName' => 'string',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'dateCreated' => 'date-time',
        'dateModified' => 'date-time',
        'version' => 'int32',
        'division' => null,
        'columnNames' => null,
        'phoneColumns' => null,
        'importStatus' => null,
        'previewModeColumnName' => null,
        'previewModeAcceptedValues' => null,
        'size' => 'int64',
        'attemptLimits' => null,
        'automaticTimeZoneMapping' => null,
        'zipCodeColumnName' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'dateCreated' => 'dateCreated',
        'dateModified' => 'dateModified',
        'version' => 'version',
        'division' => 'division',
        'columnNames' => 'columnNames',
        'phoneColumns' => 'phoneColumns',
        'importStatus' => 'importStatus',
        'previewModeColumnName' => 'previewModeColumnName',
        'previewModeAcceptedValues' => 'previewModeAcceptedValues',
        'size' => 'size',
        'attemptLimits' => 'attemptLimits',
        'automaticTimeZoneMapping' => 'automaticTimeZoneMapping',
        'zipCodeColumnName' => 'zipCodeColumnName',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'dateCreated' => 'setDateCreated',
        'dateModified' => 'setDateModified',
        'version' => 'setVersion',
        'division' => 'setDivision',
        'columnNames' => 'setColumnNames',
        'phoneColumns' => 'setPhoneColumns',
        'importStatus' => 'setImportStatus',
        'previewModeColumnName' => 'setPreviewModeColumnName',
        'previewModeAcceptedValues' => 'setPreviewModeAcceptedValues',
        'size' => 'setSize',
        'attemptLimits' => 'setAttemptLimits',
        'automaticTimeZoneMapping' => 'setAutomaticTimeZoneMapping',
        'zipCodeColumnName' => 'setZipCodeColumnName',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'dateCreated' => 'getDateCreated',
        'dateModified' => 'getDateModified',
        'version' => 'getVersion',
        'division' => 'getDivision',
        'columnNames' => 'getColumnNames',
        'phoneColumns' => 'getPhoneColumns',
        'importStatus' => 'getImportStatus',
        'previewModeColumnName' => 'getPreviewModeColumnName',
        'previewModeAcceptedValues' => 'getPreviewModeAcceptedValues',
        'size' => 'getSize',
        'attemptLimits' => 'getAttemptLimits',
        'automaticTimeZoneMapping' => 'getAutomaticTimeZoneMapping',
        'zipCodeColumnName' => 'getZipCodeColumnName',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['dateModified'] = isset($data['dateModified']) ? $data['dateModified'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['columnNames'] = isset($data['columnNames']) ? $data['columnNames'] : null;
        $this->container['phoneColumns'] = isset($data['phoneColumns']) ? $data['phoneColumns'] : null;
        $this->container['importStatus'] = isset($data['importStatus']) ? $data['importStatus'] : null;
        $this->container['previewModeColumnName'] = isset($data['previewModeColumnName']) ? $data['previewModeColumnName'] : null;
        $this->container['previewModeAcceptedValues'] = isset($data['previewModeAcceptedValues']) ? $data['previewModeAcceptedValues'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['attemptLimits'] = isset($data['attemptLimits']) ? $data['attemptLimits'] : null;
        $this->container['automaticTimeZoneMapping'] = isset($data['automaticTimeZoneMapping']) ? $data['automaticTimeZoneMapping'] : null;
        $this->container['zipCodeColumnName'] = isset($data['zipCodeColumnName']) ? $data['zipCodeColumnName'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['columnNames'] === null) {
            $invalidProperties[] = "'columnNames' can't be null";
        }
        if ($this->container['phoneColumns'] === null) {
            $invalidProperties[] = "'phoneColumns' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets dateModified
     *
     * @return \DateTime
     */
    public function getDateModified()
    {
        return $this->container['dateModified'];
    }

    /**
     * Sets dateModified
     *
     * @param \DateTime $dateModified Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateModified($dateModified)
    {
        $this->container['dateModified'] = $dateModified;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Required for updates, must match the version number of the most recent update
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $division The division this entity belongs to.
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets columnNames
     *
     * @return string[]
     */
    public function getColumnNames()
    {
        return $this->container['columnNames'];
    }

    /**
     * Sets columnNames
     *
     * @param string[] $columnNames The names of the contact data columns.
     *
     * @return $this
     */
    public function setColumnNames($columnNames)
    {
        $this->container['columnNames'] = $columnNames;

        return $this;
    }

    /**
     * Gets phoneColumns
     *
     * @return \PureCloudPlatform\Client\V2\Model\ContactPhoneNumberColumn[]
     */
    public function getPhoneColumns()
    {
        return $this->container['phoneColumns'];
    }

    /**
     * Sets phoneColumns
     *
     * @param \PureCloudPlatform\Client\V2\Model\ContactPhoneNumberColumn[] $phoneColumns Indicates which columns are phone numbers.
     *
     * @return $this
     */
    public function setPhoneColumns($phoneColumns)
    {
        $this->container['phoneColumns'] = $phoneColumns;

        return $this;
    }

    /**
     * Gets importStatus
     *
     * @return \PureCloudPlatform\Client\V2\Model\ImportStatus
     */
    public function getImportStatus()
    {
        return $this->container['importStatus'];
    }

    /**
     * Sets importStatus
     *
     * @param \PureCloudPlatform\Client\V2\Model\ImportStatus $importStatus The status of the import process.
     *
     * @return $this
     */
    public function setImportStatus($importStatus)
    {
        $this->container['importStatus'] = $importStatus;

        return $this;
    }

    /**
     * Gets previewModeColumnName
     *
     * @return string
     */
    public function getPreviewModeColumnName()
    {
        return $this->container['previewModeColumnName'];
    }

    /**
     * Sets previewModeColumnName
     *
     * @param string $previewModeColumnName A column to check if a contact should always be dialed in preview mode.
     *
     * @return $this
     */
    public function setPreviewModeColumnName($previewModeColumnName)
    {
        $this->container['previewModeColumnName'] = $previewModeColumnName;

        return $this;
    }

    /**
     * Gets previewModeAcceptedValues
     *
     * @return string[]
     */
    public function getPreviewModeAcceptedValues()
    {
        return $this->container['previewModeAcceptedValues'];
    }

    /**
     * Sets previewModeAcceptedValues
     *
     * @param string[] $previewModeAcceptedValues The values in the previewModeColumnName column that indicate a contact should always be dialed in preview mode.
     *
     * @return $this
     */
    public function setPreviewModeAcceptedValues($previewModeAcceptedValues)
    {
        $this->container['previewModeAcceptedValues'] = $previewModeAcceptedValues;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The number of contacts in the ContactList.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets attemptLimits
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getAttemptLimits()
    {
        return $this->container['attemptLimits'];
    }

    /**
     * Sets attemptLimits
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $attemptLimits AttemptLimits for this ContactList.
     *
     * @return $this
     */
    public function setAttemptLimits($attemptLimits)
    {
        $this->container['attemptLimits'] = $attemptLimits;

        return $this;
    }

    /**
     * Gets automaticTimeZoneMapping
     *
     * @return bool
     */
    public function getAutomaticTimeZoneMapping()
    {
        return $this->container['automaticTimeZoneMapping'];
    }

    /**
     * Sets automaticTimeZoneMapping
     *
     * @param bool $automaticTimeZoneMapping Indicates if automatic time zone mapping is to be used for this ContactList.
     *
     * @return $this
     */
    public function setAutomaticTimeZoneMapping($automaticTimeZoneMapping)
    {
        $this->container['automaticTimeZoneMapping'] = $automaticTimeZoneMapping;

        return $this;
    }

    /**
     * Gets zipCodeColumnName
     *
     * @return string
     */
    public function getZipCodeColumnName()
    {
        return $this->container['zipCodeColumnName'];
    }

    /**
     * Sets zipCodeColumnName
     *
     * @param string $zipCodeColumnName The name of contact list column containing the zip code for use with automatic time zone mapping. Only allowed if 'automaticTimeZoneMapping' is set to true.
     *
     * @return $this
     */
    public function setZipCodeColumnName($zipCodeColumnName)
    {
        $this->container['zipCodeColumnName'] = $zipCodeColumnName;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


