<?php
/**
 * FlowVersion
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * FlowVersion Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlowVersion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlowVersion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'commitVersion' => 'string',
        'configurationVersion' => 'string',
        'type' => 'string',
        'secure' => 'bool',
        'createdBy' => '\PureCloudPlatform\Client\V2\Model\User',
        'createdByClient' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'configurationUri' => 'string',
        'dateCreated' => 'int',
        'generationId' => 'string',
        'publishResultUri' => 'string',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'commitVersion' => null,
        'configurationVersion' => null,
        'type' => null,
        'secure' => null,
        'createdBy' => null,
        'createdByClient' => null,
        'configurationUri' => null,
        'dateCreated' => 'int64',
        'generationId' => null,
        'publishResultUri' => 'uri',
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'commitVersion' => 'commitVersion',
        'configurationVersion' => 'configurationVersion',
        'type' => 'type',
        'secure' => 'secure',
        'createdBy' => 'createdBy',
        'createdByClient' => 'createdByClient',
        'configurationUri' => 'configurationUri',
        'dateCreated' => 'dateCreated',
        'generationId' => 'generationId',
        'publishResultUri' => 'publishResultUri',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'commitVersion' => 'setCommitVersion',
        'configurationVersion' => 'setConfigurationVersion',
        'type' => 'setType',
        'secure' => 'setSecure',
        'createdBy' => 'setCreatedBy',
        'createdByClient' => 'setCreatedByClient',
        'configurationUri' => 'setConfigurationUri',
        'dateCreated' => 'setDateCreated',
        'generationId' => 'setGenerationId',
        'publishResultUri' => 'setPublishResultUri',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'commitVersion' => 'getCommitVersion',
        'configurationVersion' => 'getConfigurationVersion',
        'type' => 'getType',
        'secure' => 'getSecure',
        'createdBy' => 'getCreatedBy',
        'createdByClient' => 'getCreatedByClient',
        'configurationUri' => 'getConfigurationUri',
        'dateCreated' => 'getDateCreated',
        'generationId' => 'getGenerationId',
        'publishResultUri' => 'getPublishResultUri',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_PUBLISH = 'PUBLISH';
    const TYPE_CHECKIN = 'CHECKIN';
    const TYPE_SAVE = 'SAVE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PUBLISH,
            self::TYPE_CHECKIN,
            self::TYPE_SAVE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['commitVersion'] = isset($data['commitVersion']) ? $data['commitVersion'] : null;
        $this->container['configurationVersion'] = isset($data['configurationVersion']) ? $data['configurationVersion'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['secure'] = isset($data['secure']) ? $data['secure'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['createdByClient'] = isset($data['createdByClient']) ? $data['createdByClient'] : null;
        $this->container['configurationUri'] = isset($data['configurationUri']) ? $data['configurationUri'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['generationId'] = isset($data['generationId']) ? $data['generationId'] : null;
        $this->container['publishResultUri'] = isset($data['publishResultUri']) ? $data['publishResultUri'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The flow version identifier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets commitVersion
     *
     * @return string
     */
    public function getCommitVersion()
    {
        return $this->container['commitVersion'];
    }

    /**
     * Sets commitVersion
     *
     * @param string $commitVersion commitVersion
     *
     * @return $this
     */
    public function setCommitVersion($commitVersion)
    {
        $this->container['commitVersion'] = $commitVersion;

        return $this;
    }

    /**
     * Gets configurationVersion
     *
     * @return string
     */
    public function getConfigurationVersion()
    {
        return $this->container['configurationVersion'];
    }

    /**
     * Sets configurationVersion
     *
     * @param string $configurationVersion configurationVersion
     *
     * @return $this
     */
    public function setConfigurationVersion($configurationVersion)
    {
        $this->container['configurationVersion'] = $configurationVersion;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets secure
     *
     * @return bool
     */
    public function getSecure()
    {
        return $this->container['secure'];
    }

    /**
     * Sets secure
     *
     * @param bool $secure secure
     *
     * @return $this
     */
    public function setSecure($secure)
    {
        $this->container['secure'] = $secure;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets createdByClient
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getCreatedByClient()
    {
        return $this->container['createdByClient'];
    }

    /**
     * Sets createdByClient
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $createdByClient createdByClient
     *
     * @return $this
     */
    public function setCreatedByClient($createdByClient)
    {
        $this->container['createdByClient'] = $createdByClient;

        return $this;
    }

    /**
     * Gets configurationUri
     *
     * @return string
     */
    public function getConfigurationUri()
    {
        return $this->container['configurationUri'];
    }

    /**
     * Sets configurationUri
     *
     * @param string $configurationUri configurationUri
     *
     * @return $this
     */
    public function setConfigurationUri($configurationUri)
    {
        $this->container['configurationUri'] = $configurationUri;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return int
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param int $dateCreated dateCreated
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets generationId
     *
     * @return string
     */
    public function getGenerationId()
    {
        return $this->container['generationId'];
    }

    /**
     * Sets generationId
     *
     * @param string $generationId generationId
     *
     * @return $this
     */
    public function setGenerationId($generationId)
    {
        $this->container['generationId'] = $generationId;

        return $this;
    }

    /**
     * Gets publishResultUri
     *
     * @return string
     */
    public function getPublishResultUri()
    {
        return $this->container['publishResultUri'];
    }

    /**
     * Sets publishResultUri
     *
     * @param string $publishResultUri publishResultUri
     *
     * @return $this
     */
    public function setPublishResultUri($publishResultUri)
    {
        $this->container['publishResultUri'] = $publishResultUri;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


