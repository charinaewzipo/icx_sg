<?php
/**
 * JsonNodeSearchResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * JsonNodeSearchResponse Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JsonNodeSearchResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JsonNodeSearchResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total' => 'int',
        'pageCount' => 'int',
        'pageSize' => 'int',
        'pageNumber' => 'int',
        'previousPage' => 'string',
        'currentPage' => 'string',
        'nextPage' => 'string',
        'types' => 'string[]',
        'results' => '\PureCloudPlatform\Client\V2\Model\ArrayNode',
        'aggregations' => '\PureCloudPlatform\Client\V2\Model\ArrayNode'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total' => 'int64',
        'pageCount' => 'int32',
        'pageSize' => 'int32',
        'pageNumber' => 'int32',
        'previousPage' => null,
        'currentPage' => null,
        'nextPage' => null,
        'types' => null,
        'results' => null,
        'aggregations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
        'pageCount' => 'pageCount',
        'pageSize' => 'pageSize',
        'pageNumber' => 'pageNumber',
        'previousPage' => 'previousPage',
        'currentPage' => 'currentPage',
        'nextPage' => 'nextPage',
        'types' => 'types',
        'results' => 'results',
        'aggregations' => 'aggregations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
        'pageCount' => 'setPageCount',
        'pageSize' => 'setPageSize',
        'pageNumber' => 'setPageNumber',
        'previousPage' => 'setPreviousPage',
        'currentPage' => 'setCurrentPage',
        'nextPage' => 'setNextPage',
        'types' => 'setTypes',
        'results' => 'setResults',
        'aggregations' => 'setAggregations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
        'pageCount' => 'getPageCount',
        'pageSize' => 'getPageSize',
        'pageNumber' => 'getPageNumber',
        'previousPage' => 'getPreviousPage',
        'currentPage' => 'getCurrentPage',
        'nextPage' => 'getNextPage',
        'types' => 'getTypes',
        'results' => 'getResults',
        'aggregations' => 'getAggregations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['pageCount'] = isset($data['pageCount']) ? $data['pageCount'] : null;
        $this->container['pageSize'] = isset($data['pageSize']) ? $data['pageSize'] : null;
        $this->container['pageNumber'] = isset($data['pageNumber']) ? $data['pageNumber'] : null;
        $this->container['previousPage'] = isset($data['previousPage']) ? $data['previousPage'] : null;
        $this->container['currentPage'] = isset($data['currentPage']) ? $data['currentPage'] : null;
        $this->container['nextPage'] = isset($data['nextPage']) ? $data['nextPage'] : null;
        $this->container['types'] = isset($data['types']) ? $data['types'] : null;
        $this->container['results'] = isset($data['results']) ? $data['results'] : null;
        $this->container['aggregations'] = isset($data['aggregations']) ? $data['aggregations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['pageCount'] === null) {
            $invalidProperties[] = "'pageCount' can't be null";
        }
        if ($this->container['pageSize'] === null) {
            $invalidProperties[] = "'pageSize' can't be null";
        }
        if ($this->container['pageNumber'] === null) {
            $invalidProperties[] = "'pageNumber' can't be null";
        }
        if ($this->container['types'] === null) {
            $invalidProperties[] = "'types' can't be null";
        }
        if ($this->container['results'] === null) {
            $invalidProperties[] = "'results' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total The total number of results found
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets pageCount
     *
     * @return int
     */
    public function getPageCount()
    {
        return $this->container['pageCount'];
    }

    /**
     * Sets pageCount
     *
     * @param int $pageCount The total number of pages
     *
     * @return $this
     */
    public function setPageCount($pageCount)
    {
        $this->container['pageCount'] = $pageCount;

        return $this;
    }

    /**
     * Gets pageSize
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['pageSize'];
    }

    /**
     * Sets pageSize
     *
     * @param int $pageSize The current page size
     *
     * @return $this
     */
    public function setPageSize($pageSize)
    {
        $this->container['pageSize'] = $pageSize;

        return $this;
    }

    /**
     * Gets pageNumber
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['pageNumber'];
    }

    /**
     * Sets pageNumber
     *
     * @param int $pageNumber The current page number
     *
     * @return $this
     */
    public function setPageNumber($pageNumber)
    {
        $this->container['pageNumber'] = $pageNumber;

        return $this;
    }

    /**
     * Gets previousPage
     *
     * @return string
     */
    public function getPreviousPage()
    {
        return $this->container['previousPage'];
    }

    /**
     * Sets previousPage
     *
     * @param string $previousPage Q64 value for the previous page of results
     *
     * @return $this
     */
    public function setPreviousPage($previousPage)
    {
        $this->container['previousPage'] = $previousPage;

        return $this;
    }

    /**
     * Gets currentPage
     *
     * @return string
     */
    public function getCurrentPage()
    {
        return $this->container['currentPage'];
    }

    /**
     * Sets currentPage
     *
     * @param string $currentPage Q64 value for the current page of results
     *
     * @return $this
     */
    public function setCurrentPage($currentPage)
    {
        $this->container['currentPage'] = $currentPage;

        return $this;
    }

    /**
     * Gets nextPage
     *
     * @return string
     */
    public function getNextPage()
    {
        return $this->container['nextPage'];
    }

    /**
     * Sets nextPage
     *
     * @param string $nextPage Q64 value for the next page of results
     *
     * @return $this
     */
    public function setNextPage($nextPage)
    {
        $this->container['nextPage'] = $nextPage;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[] $types Resource types the search was performed against
     *
     * @return $this
     */
    public function setTypes($types)
    {
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \PureCloudPlatform\Client\V2\Model\ArrayNode
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \PureCloudPlatform\Client\V2\Model\ArrayNode $results Search results
     *
     * @return $this
     */
    public function setResults($results)
    {
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets aggregations
     *
     * @return \PureCloudPlatform\Client\V2\Model\ArrayNode
     */
    public function getAggregations()
    {
        return $this->container['aggregations'];
    }

    /**
     * Sets aggregations
     *
     * @param \PureCloudPlatform\Client\V2\Model\ArrayNode $aggregations aggregations
     *
     * @return $this
     */
    public function setAggregations($aggregations)
    {
        $this->container['aggregations'] = $aggregations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


