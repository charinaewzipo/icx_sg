<?php
/**
 * ShiftTradeActivityRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ShiftTradeActivityRule Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShiftTradeActivityRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShiftTradeActivityRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activityCategory' => 'string',
        'action' => 'string',
        'activityCodeIdReplacement' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activityCategory' => null,
        'action' => null,
        'activityCodeIdReplacement' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activityCategory' => 'activityCategory',
        'action' => 'action',
        'activityCodeIdReplacement' => 'activityCodeIdReplacement'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activityCategory' => 'setActivityCategory',
        'action' => 'setAction',
        'activityCodeIdReplacement' => 'setActivityCodeIdReplacement'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activityCategory' => 'getActivityCategory',
        'action' => 'getAction',
        'activityCodeIdReplacement' => 'getActivityCodeIdReplacement'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTIVITY_CATEGORY_ON_QUEUE_WORK = 'OnQueueWork';
    const ACTIVITY_CATEGORY__BREAK = 'Break';
    const ACTIVITY_CATEGORY_MEAL = 'Meal';
    const ACTIVITY_CATEGORY_MEETING = 'Meeting';
    const ACTIVITY_CATEGORY_OFF_QUEUE_WORK = 'OffQueueWork';
    const ACTIVITY_CATEGORY_TIME_OFF = 'TimeOff';
    const ACTIVITY_CATEGORY_TRAINING = 'Training';
    const ACTIVITY_CATEGORY_UNAVAILABLE = 'Unavailable';
    const ACTIVITY_CATEGORY_UNSCHEDULED = 'Unscheduled';
    const ACTION_REPLACE = 'Replace';
    const ACTION_DO_NOT_ALLOW_TRADE = 'DoNotAllowTrade';
    const ACTION_KEEP_WITH_SCHEDULE = 'KeepWithSchedule';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActivityCategoryAllowableValues()
    {
        return [
            self::ACTIVITY_CATEGORY_ON_QUEUE_WORK,
            self::ACTIVITY_CATEGORY__BREAK,
            self::ACTIVITY_CATEGORY_MEAL,
            self::ACTIVITY_CATEGORY_MEETING,
            self::ACTIVITY_CATEGORY_OFF_QUEUE_WORK,
            self::ACTIVITY_CATEGORY_TIME_OFF,
            self::ACTIVITY_CATEGORY_TRAINING,
            self::ACTIVITY_CATEGORY_UNAVAILABLE,
            self::ACTIVITY_CATEGORY_UNSCHEDULED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_REPLACE,
            self::ACTION_DO_NOT_ALLOW_TRADE,
            self::ACTION_KEEP_WITH_SCHEDULE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activityCategory'] = isset($data['activityCategory']) ? $data['activityCategory'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['activityCodeIdReplacement'] = isset($data['activityCodeIdReplacement']) ? $data['activityCodeIdReplacement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['activityCategory'] === null) {
            $invalidProperties[] = "'activityCategory' can't be null";
        }
        $allowedValues = $this->getActivityCategoryAllowableValues();
        if (!is_null($this->container['activityCategory']) && !in_array($this->container['activityCategory'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'activityCategory', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activityCategory
     *
     * @return string
     */
    public function getActivityCategory()
    {
        return $this->container['activityCategory'];
    }

    /**
     * Sets activityCategory
     *
     * @param string $activityCategory The activity category to which to apply this rule
     *
     * @return $this
     */
    public function setActivityCategory($activityCategory)
    {
        $allowedValues = $this->getActivityCategoryAllowableValues();
        if (!in_array($activityCategory, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activityCategory', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['activityCategory'] = $activityCategory;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action The action this rule invokes
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets activityCodeIdReplacement
     *
     * @return string
     */
    public function getActivityCodeIdReplacement()
    {
        return $this->container['activityCodeIdReplacement'];
    }

    /**
     * Sets activityCodeIdReplacement
     *
     * @param string $activityCodeIdReplacement The activity code ID with which to replace activities belonging to the original category if applicable (required if action == Replace, must be a default activity code ID)
     *
     * @return $this
     */
    public function setActivityCodeIdReplacement($activityCodeIdReplacement)
    {
        $this->container['activityCodeIdReplacement'] = $activityCodeIdReplacement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


