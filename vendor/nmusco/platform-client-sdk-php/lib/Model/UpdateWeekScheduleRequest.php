<?php
/**
 * UpdateWeekScheduleRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * UpdateWeekScheduleRequest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateWeekScheduleRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateWeekScheduleRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
        'published' => 'bool',
        'userSchedules' => 'map[string,\PureCloudPlatform\Client\V2\Model\UserSchedule]',
        'partialUploadIds' => 'string[]',
        'metadata' => '\PureCloudPlatform\Client\V2\Model\WfmVersionedEntityMetadata',
        'agentSchedulesVersion' => 'int',
        'shortTermForecast' => '\PureCloudPlatform\Client\V2\Model\ShortTermForecastReference',
        'headcountForecast' => '\PureCloudPlatform\Client\V2\Model\HeadcountForecast',
        'agentUpdateFilter' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
        'published' => null,
        'userSchedules' => null,
        'partialUploadIds' => null,
        'metadata' => null,
        'agentSchedulesVersion' => 'int32',
        'shortTermForecast' => null,
        'headcountForecast' => null,
        'agentUpdateFilter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
        'published' => 'published',
        'userSchedules' => 'userSchedules',
        'partialUploadIds' => 'partialUploadIds',
        'metadata' => 'metadata',
        'agentSchedulesVersion' => 'agentSchedulesVersion',
        'shortTermForecast' => 'shortTermForecast',
        'headcountForecast' => 'headcountForecast',
        'agentUpdateFilter' => 'agentUpdateFilter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
        'published' => 'setPublished',
        'userSchedules' => 'setUserSchedules',
        'partialUploadIds' => 'setPartialUploadIds',
        'metadata' => 'setMetadata',
        'agentSchedulesVersion' => 'setAgentSchedulesVersion',
        'shortTermForecast' => 'setShortTermForecast',
        'headcountForecast' => 'setHeadcountForecast',
        'agentUpdateFilter' => 'setAgentUpdateFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
        'published' => 'getPublished',
        'userSchedules' => 'getUserSchedules',
        'partialUploadIds' => 'getPartialUploadIds',
        'metadata' => 'getMetadata',
        'agentSchedulesVersion' => 'getAgentSchedulesVersion',
        'shortTermForecast' => 'getShortTermForecast',
        'headcountForecast' => 'getHeadcountForecast',
        'agentUpdateFilter' => 'getAgentUpdateFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AGENT_UPDATE_FILTER_ALL = 'All';
    const AGENT_UPDATE_FILTER_SHIFT_TIME_CHANGE = 'ShiftTimeChange';
    const AGENT_UPDATE_FILTER_NONE = 'None';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAgentUpdateFilterAllowableValues()
    {
        return [
            self::AGENT_UPDATE_FILTER_ALL,
            self::AGENT_UPDATE_FILTER_SHIFT_TIME_CHANGE,
            self::AGENT_UPDATE_FILTER_NONE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['userSchedules'] = isset($data['userSchedules']) ? $data['userSchedules'] : null;
        $this->container['partialUploadIds'] = isset($data['partialUploadIds']) ? $data['partialUploadIds'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['agentSchedulesVersion'] = isset($data['agentSchedulesVersion']) ? $data['agentSchedulesVersion'] : null;
        $this->container['shortTermForecast'] = isset($data['shortTermForecast']) ? $data['shortTermForecast'] : null;
        $this->container['headcountForecast'] = isset($data['headcountForecast']) ? $data['headcountForecast'] : null;
        $this->container['agentUpdateFilter'] = isset($data['agentUpdateFilter']) ? $data['agentUpdateFilter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        if ($this->container['agentSchedulesVersion'] === null) {
            $invalidProperties[] = "'agentSchedulesVersion' can't be null";
        }
        $allowedValues = $this->getAgentUpdateFilterAllowableValues();
        if (!is_null($this->container['agentUpdateFilter']) && !in_array($this->container['agentUpdateFilter'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agentUpdateFilter', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the week schedule
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published Whether the week schedule is published
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets userSchedules
     *
     * @return map[string,\PureCloudPlatform\Client\V2\Model\UserSchedule]
     */
    public function getUserSchedules()
    {
        return $this->container['userSchedules'];
    }

    /**
     * Sets userSchedules
     *
     * @param map[string,\PureCloudPlatform\Client\V2\Model\UserSchedule] $userSchedules User schedules in the week
     *
     * @return $this
     */
    public function setUserSchedules($userSchedules)
    {
        $this->container['userSchedules'] = $userSchedules;

        return $this;
    }

    /**
     * Gets partialUploadIds
     *
     * @return string[]
     */
    public function getPartialUploadIds()
    {
        return $this->container['partialUploadIds'];
    }

    /**
     * Sets partialUploadIds
     *
     * @param string[] $partialUploadIds IDs of partial uploads to include in this imported schedule. It is applicable only for large schedules where activity count in schedule is greater than 17500
     *
     * @return $this
     */
    public function setPartialUploadIds($partialUploadIds)
    {
        $this->container['partialUploadIds'] = $partialUploadIds;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \PureCloudPlatform\Client\V2\Model\WfmVersionedEntityMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \PureCloudPlatform\Client\V2\Model\WfmVersionedEntityMetadata $metadata Version metadata for this work plan
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets agentSchedulesVersion
     *
     * @return int
     */
    public function getAgentSchedulesVersion()
    {
        return $this->container['agentSchedulesVersion'];
    }

    /**
     * Sets agentSchedulesVersion
     *
     * @param int $agentSchedulesVersion Version of agent schedules in the week schedule
     *
     * @return $this
     */
    public function setAgentSchedulesVersion($agentSchedulesVersion)
    {
        $this->container['agentSchedulesVersion'] = $agentSchedulesVersion;

        return $this;
    }

    /**
     * Gets shortTermForecast
     *
     * @return \PureCloudPlatform\Client\V2\Model\ShortTermForecastReference
     */
    public function getShortTermForecast()
    {
        return $this->container['shortTermForecast'];
    }

    /**
     * Sets shortTermForecast
     *
     * @param \PureCloudPlatform\Client\V2\Model\ShortTermForecastReference $shortTermForecast Reference to optionally point the schedule at a new short term forecast
     *
     * @return $this
     */
    public function setShortTermForecast($shortTermForecast)
    {
        $this->container['shortTermForecast'] = $shortTermForecast;

        return $this;
    }

    /**
     * Gets headcountForecast
     *
     * @return \PureCloudPlatform\Client\V2\Model\HeadcountForecast
     */
    public function getHeadcountForecast()
    {
        return $this->container['headcountForecast'];
    }

    /**
     * Sets headcountForecast
     *
     * @param \PureCloudPlatform\Client\V2\Model\HeadcountForecast $headcountForecast The headcount forecast associated with the schedule.  If not null, existing values will be irrecoverably replaced
     *
     * @return $this
     */
    public function setHeadcountForecast($headcountForecast)
    {
        $this->container['headcountForecast'] = $headcountForecast;

        return $this;
    }

    /**
     * Gets agentUpdateFilter
     *
     * @return string
     */
    public function getAgentUpdateFilter()
    {
        return $this->container['agentUpdateFilter'];
    }

    /**
     * Sets agentUpdateFilter
     *
     * @param string $agentUpdateFilter For a published schedule, this determines whether a notification will be shown to agents in the default PureCloud user interface.  The CPC notification will always be sent and the value specified here affects what data is returned in the 'updates' property.  In the default PureCloud UI, \"None\" means that agents will not be notified, \"ShiftTimesOnly\" means agents will only be notified for changes to shift start and end times,  and \"All\" means that agents will be notified for any change to a shift or activity (except for full day off activities).  When building a custom client, use this property to specify the level of detail you need. Defaults to \"ShiftTimesOnly\".
     *
     * @return $this
     */
    public function setAgentUpdateFilter($agentUpdateFilter)
    {
        $allowedValues = $this->getAgentUpdateFilterAllowableValues();
        if (!is_null($agentUpdateFilter) && !in_array($agentUpdateFilter, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agentUpdateFilter', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agentUpdateFilter'] = $agentUpdateFilter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


