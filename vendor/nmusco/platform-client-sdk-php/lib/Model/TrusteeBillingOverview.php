<?php
/**
 * TrusteeBillingOverview
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * TrusteeBillingOverview Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrusteeBillingOverview implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TrusteeBillingOverview';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'organization' => '\PureCloudPlatform\Client\V2\Model\Entity',
        'currency' => 'string',
        'enabledProducts' => 'string[]',
        'subscriptionType' => 'string',
        'rampPeriodStartDate' => '\DateTime',
        'rampPeriodEndDate' => '\DateTime',
        'billingPeriodStartDate' => '\DateTime',
        'billingPeriodEndDate' => '\DateTime',
        'usages' => '\PureCloudPlatform\Client\V2\Model\SubscriptionOverviewUsage[]',
        'contractAmendmentDate' => '\DateTime',
        'contractEffectiveDate' => '\DateTime',
        'contractEndDate' => '\DateTime',
        'minimumMonthlyAmount' => 'string',
        'inRampPeriod' => 'bool',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'organization' => null,
        'currency' => null,
        'enabledProducts' => null,
        'subscriptionType' => null,
        'rampPeriodStartDate' => 'date-time',
        'rampPeriodEndDate' => 'date-time',
        'billingPeriodStartDate' => 'date-time',
        'billingPeriodEndDate' => 'date-time',
        'usages' => null,
        'contractAmendmentDate' => 'date-time',
        'contractEffectiveDate' => 'date-time',
        'contractEndDate' => 'date-time',
        'minimumMonthlyAmount' => null,
        'inRampPeriod' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'organization' => 'organization',
        'currency' => 'currency',
        'enabledProducts' => 'enabledProducts',
        'subscriptionType' => 'subscriptionType',
        'rampPeriodStartDate' => 'rampPeriodStartDate',
        'rampPeriodEndDate' => 'rampPeriodEndDate',
        'billingPeriodStartDate' => 'billingPeriodStartDate',
        'billingPeriodEndDate' => 'billingPeriodEndDate',
        'usages' => 'usages',
        'contractAmendmentDate' => 'contractAmendmentDate',
        'contractEffectiveDate' => 'contractEffectiveDate',
        'contractEndDate' => 'contractEndDate',
        'minimumMonthlyAmount' => 'minimumMonthlyAmount',
        'inRampPeriod' => 'inRampPeriod',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'organization' => 'setOrganization',
        'currency' => 'setCurrency',
        'enabledProducts' => 'setEnabledProducts',
        'subscriptionType' => 'setSubscriptionType',
        'rampPeriodStartDate' => 'setRampPeriodStartDate',
        'rampPeriodEndDate' => 'setRampPeriodEndDate',
        'billingPeriodStartDate' => 'setBillingPeriodStartDate',
        'billingPeriodEndDate' => 'setBillingPeriodEndDate',
        'usages' => 'setUsages',
        'contractAmendmentDate' => 'setContractAmendmentDate',
        'contractEffectiveDate' => 'setContractEffectiveDate',
        'contractEndDate' => 'setContractEndDate',
        'minimumMonthlyAmount' => 'setMinimumMonthlyAmount',
        'inRampPeriod' => 'setInRampPeriod',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'organization' => 'getOrganization',
        'currency' => 'getCurrency',
        'enabledProducts' => 'getEnabledProducts',
        'subscriptionType' => 'getSubscriptionType',
        'rampPeriodStartDate' => 'getRampPeriodStartDate',
        'rampPeriodEndDate' => 'getRampPeriodEndDate',
        'billingPeriodStartDate' => 'getBillingPeriodStartDate',
        'billingPeriodEndDate' => 'getBillingPeriodEndDate',
        'usages' => 'getUsages',
        'contractAmendmentDate' => 'getContractAmendmentDate',
        'contractEffectiveDate' => 'getContractEffectiveDate',
        'contractEndDate' => 'getContractEndDate',
        'minimumMonthlyAmount' => 'getMinimumMonthlyAmount',
        'inRampPeriod' => 'getInRampPeriod',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SUBSCRIPTION_TYPE_ININ = 'ININ';
    const SUBSCRIPTION_TYPE_MONTH_TO_MONTH = 'MONTH_TO_MONTH';
    const SUBSCRIPTION_TYPE_FREE_TRIAL_MONTH_TO_MONTH = 'FREE_TRIAL_MONTH_TO_MONTH';
    const SUBSCRIPTION_TYPE_PREPAY_MONTHLY_COMMITMENT = 'PREPAY_MONTHLY_COMMITMENT';
    const SUBSCRIPTION_TYPE_PREPAY = 'PREPAY';
    const SUBSCRIPTION_TYPE_DEV_ORG_PREPAY_MONTHLY_COMMITMENT = 'DEV_ORG_PREPAY_MONTHLY_COMMITMENT';
    const SUBSCRIPTION_TYPE_DEV_ORG_PREPAY = 'DEV_ORG_PREPAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubscriptionTypeAllowableValues()
    {
        return [
            self::SUBSCRIPTION_TYPE_ININ,
            self::SUBSCRIPTION_TYPE_MONTH_TO_MONTH,
            self::SUBSCRIPTION_TYPE_FREE_TRIAL_MONTH_TO_MONTH,
            self::SUBSCRIPTION_TYPE_PREPAY_MONTHLY_COMMITMENT,
            self::SUBSCRIPTION_TYPE_PREPAY,
            self::SUBSCRIPTION_TYPE_DEV_ORG_PREPAY_MONTHLY_COMMITMENT,
            self::SUBSCRIPTION_TYPE_DEV_ORG_PREPAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['enabledProducts'] = isset($data['enabledProducts']) ? $data['enabledProducts'] : null;
        $this->container['subscriptionType'] = isset($data['subscriptionType']) ? $data['subscriptionType'] : null;
        $this->container['rampPeriodStartDate'] = isset($data['rampPeriodStartDate']) ? $data['rampPeriodStartDate'] : null;
        $this->container['rampPeriodEndDate'] = isset($data['rampPeriodEndDate']) ? $data['rampPeriodEndDate'] : null;
        $this->container['billingPeriodStartDate'] = isset($data['billingPeriodStartDate']) ? $data['billingPeriodStartDate'] : null;
        $this->container['billingPeriodEndDate'] = isset($data['billingPeriodEndDate']) ? $data['billingPeriodEndDate'] : null;
        $this->container['usages'] = isset($data['usages']) ? $data['usages'] : null;
        $this->container['contractAmendmentDate'] = isset($data['contractAmendmentDate']) ? $data['contractAmendmentDate'] : null;
        $this->container['contractEffectiveDate'] = isset($data['contractEffectiveDate']) ? $data['contractEffectiveDate'] : null;
        $this->container['contractEndDate'] = isset($data['contractEndDate']) ? $data['contractEndDate'] : null;
        $this->container['minimumMonthlyAmount'] = isset($data['minimumMonthlyAmount']) ? $data['minimumMonthlyAmount'] : null;
        $this->container['inRampPeriod'] = isset($data['inRampPeriod']) ? $data['inRampPeriod'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['organization'] === null) {
            $invalidProperties[] = "'organization' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['enabledProducts'] === null) {
            $invalidProperties[] = "'enabledProducts' can't be null";
        }
        if ($this->container['subscriptionType'] === null) {
            $invalidProperties[] = "'subscriptionType' can't be null";
        }
        $allowedValues = $this->getSubscriptionTypeAllowableValues();
        if (!is_null($this->container['subscriptionType']) && !in_array($this->container['subscriptionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'subscriptionType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['usages'] === null) {
            $invalidProperties[] = "'usages' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \PureCloudPlatform\Client\V2\Model\Entity
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \PureCloudPlatform\Client\V2\Model\Entity $organization Organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency type.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets enabledProducts
     *
     * @return string[]
     */
    public function getEnabledProducts()
    {
        return $this->container['enabledProducts'];
    }

    /**
     * Sets enabledProducts
     *
     * @param string[] $enabledProducts The charge short names for products enabled during the specified period.
     *
     * @return $this
     */
    public function setEnabledProducts($enabledProducts)
    {
        $this->container['enabledProducts'] = $enabledProducts;

        return $this;
    }

    /**
     * Gets subscriptionType
     *
     * @return string
     */
    public function getSubscriptionType()
    {
        return $this->container['subscriptionType'];
    }

    /**
     * Sets subscriptionType
     *
     * @param string $subscriptionType The subscription type.
     *
     * @return $this
     */
    public function setSubscriptionType($subscriptionType)
    {
        $allowedValues = $this->getSubscriptionTypeAllowableValues();
        if (!in_array($subscriptionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'subscriptionType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['subscriptionType'] = $subscriptionType;

        return $this;
    }

    /**
     * Gets rampPeriodStartDate
     *
     * @return \DateTime
     */
    public function getRampPeriodStartDate()
    {
        return $this->container['rampPeriodStartDate'];
    }

    /**
     * Sets rampPeriodStartDate
     *
     * @param \DateTime $rampPeriodStartDate Date-time the ramp period starts. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setRampPeriodStartDate($rampPeriodStartDate)
    {
        $this->container['rampPeriodStartDate'] = $rampPeriodStartDate;

        return $this;
    }

    /**
     * Gets rampPeriodEndDate
     *
     * @return \DateTime
     */
    public function getRampPeriodEndDate()
    {
        return $this->container['rampPeriodEndDate'];
    }

    /**
     * Sets rampPeriodEndDate
     *
     * @param \DateTime $rampPeriodEndDate Date-time the ramp period ends. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setRampPeriodEndDate($rampPeriodEndDate)
    {
        $this->container['rampPeriodEndDate'] = $rampPeriodEndDate;

        return $this;
    }

    /**
     * Gets billingPeriodStartDate
     *
     * @return \DateTime
     */
    public function getBillingPeriodStartDate()
    {
        return $this->container['billingPeriodStartDate'];
    }

    /**
     * Sets billingPeriodStartDate
     *
     * @param \DateTime $billingPeriodStartDate Date-time the billing period started. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setBillingPeriodStartDate($billingPeriodStartDate)
    {
        $this->container['billingPeriodStartDate'] = $billingPeriodStartDate;

        return $this;
    }

    /**
     * Gets billingPeriodEndDate
     *
     * @return \DateTime
     */
    public function getBillingPeriodEndDate()
    {
        return $this->container['billingPeriodEndDate'];
    }

    /**
     * Sets billingPeriodEndDate
     *
     * @param \DateTime $billingPeriodEndDate Date-time the billing period ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setBillingPeriodEndDate($billingPeriodEndDate)
    {
        $this->container['billingPeriodEndDate'] = $billingPeriodEndDate;

        return $this;
    }

    /**
     * Gets usages
     *
     * @return \PureCloudPlatform\Client\V2\Model\SubscriptionOverviewUsage[]
     */
    public function getUsages()
    {
        return $this->container['usages'];
    }

    /**
     * Sets usages
     *
     * @param \PureCloudPlatform\Client\V2\Model\SubscriptionOverviewUsage[] $usages Usages for the specified period.
     *
     * @return $this
     */
    public function setUsages($usages)
    {
        $this->container['usages'] = $usages;

        return $this;
    }

    /**
     * Gets contractAmendmentDate
     *
     * @return \DateTime
     */
    public function getContractAmendmentDate()
    {
        return $this->container['contractAmendmentDate'];
    }

    /**
     * Sets contractAmendmentDate
     *
     * @param \DateTime $contractAmendmentDate Date-time the contract was last amended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setContractAmendmentDate($contractAmendmentDate)
    {
        $this->container['contractAmendmentDate'] = $contractAmendmentDate;

        return $this;
    }

    /**
     * Gets contractEffectiveDate
     *
     * @return \DateTime
     */
    public function getContractEffectiveDate()
    {
        return $this->container['contractEffectiveDate'];
    }

    /**
     * Sets contractEffectiveDate
     *
     * @param \DateTime $contractEffectiveDate Date-time the contract became effective. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setContractEffectiveDate($contractEffectiveDate)
    {
        $this->container['contractEffectiveDate'] = $contractEffectiveDate;

        return $this;
    }

    /**
     * Gets contractEndDate
     *
     * @return \DateTime
     */
    public function getContractEndDate()
    {
        return $this->container['contractEndDate'];
    }

    /**
     * Sets contractEndDate
     *
     * @param \DateTime $contractEndDate Date-time the contract ends. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setContractEndDate($contractEndDate)
    {
        $this->container['contractEndDate'] = $contractEndDate;

        return $this;
    }

    /**
     * Gets minimumMonthlyAmount
     *
     * @return string
     */
    public function getMinimumMonthlyAmount()
    {
        return $this->container['minimumMonthlyAmount'];
    }

    /**
     * Sets minimumMonthlyAmount
     *
     * @param string $minimumMonthlyAmount Minimum amount that will be charged for the month
     *
     * @return $this
     */
    public function setMinimumMonthlyAmount($minimumMonthlyAmount)
    {
        $this->container['minimumMonthlyAmount'] = $minimumMonthlyAmount;

        return $this;
    }

    /**
     * Gets inRampPeriod
     *
     * @return bool
     */
    public function getInRampPeriod()
    {
        return $this->container['inRampPeriod'];
    }

    /**
     * Sets inRampPeriod
     *
     * @param bool $inRampPeriod inRampPeriod
     *
     * @return $this
     */
    public function setInRampPeriod($inRampPeriod)
    {
        $this->container['inRampPeriod'] = $inRampPeriod;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


