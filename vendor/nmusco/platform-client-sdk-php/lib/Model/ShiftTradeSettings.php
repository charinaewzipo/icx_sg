<?php
/**
 * ShiftTradeSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ShiftTradeSettings Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShiftTradeSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShiftTradeSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enabled' => 'bool',
        'autoReview' => 'bool',
        'allowDirectTrades' => 'bool',
        'minHoursInFuture' => 'int',
        'unequalPaid' => 'string',
        'oneSided' => 'string',
        'weeklyMinPaidViolations' => 'string',
        'weeklyMaxPaidViolations' => 'string',
        'requiresMatchingQueues' => 'bool',
        'requiresMatchingLanguages' => 'bool',
        'requiresMatchingSkills' => 'bool',
        'activityCategoryRules' => '\PureCloudPlatform\Client\V2\Model\ShiftTradeActivityRule[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enabled' => null,
        'autoReview' => null,
        'allowDirectTrades' => null,
        'minHoursInFuture' => 'int32',
        'unequalPaid' => null,
        'oneSided' => null,
        'weeklyMinPaidViolations' => null,
        'weeklyMaxPaidViolations' => null,
        'requiresMatchingQueues' => null,
        'requiresMatchingLanguages' => null,
        'requiresMatchingSkills' => null,
        'activityCategoryRules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enabled' => 'enabled',
        'autoReview' => 'autoReview',
        'allowDirectTrades' => 'allowDirectTrades',
        'minHoursInFuture' => 'minHoursInFuture',
        'unequalPaid' => 'unequalPaid',
        'oneSided' => 'oneSided',
        'weeklyMinPaidViolations' => 'weeklyMinPaidViolations',
        'weeklyMaxPaidViolations' => 'weeklyMaxPaidViolations',
        'requiresMatchingQueues' => 'requiresMatchingQueues',
        'requiresMatchingLanguages' => 'requiresMatchingLanguages',
        'requiresMatchingSkills' => 'requiresMatchingSkills',
        'activityCategoryRules' => 'activityCategoryRules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enabled' => 'setEnabled',
        'autoReview' => 'setAutoReview',
        'allowDirectTrades' => 'setAllowDirectTrades',
        'minHoursInFuture' => 'setMinHoursInFuture',
        'unequalPaid' => 'setUnequalPaid',
        'oneSided' => 'setOneSided',
        'weeklyMinPaidViolations' => 'setWeeklyMinPaidViolations',
        'weeklyMaxPaidViolations' => 'setWeeklyMaxPaidViolations',
        'requiresMatchingQueues' => 'setRequiresMatchingQueues',
        'requiresMatchingLanguages' => 'setRequiresMatchingLanguages',
        'requiresMatchingSkills' => 'setRequiresMatchingSkills',
        'activityCategoryRules' => 'setActivityCategoryRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enabled' => 'getEnabled',
        'autoReview' => 'getAutoReview',
        'allowDirectTrades' => 'getAllowDirectTrades',
        'minHoursInFuture' => 'getMinHoursInFuture',
        'unequalPaid' => 'getUnequalPaid',
        'oneSided' => 'getOneSided',
        'weeklyMinPaidViolations' => 'getWeeklyMinPaidViolations',
        'weeklyMaxPaidViolations' => 'getWeeklyMaxPaidViolations',
        'requiresMatchingQueues' => 'getRequiresMatchingQueues',
        'requiresMatchingLanguages' => 'getRequiresMatchingLanguages',
        'requiresMatchingSkills' => 'getRequiresMatchingSkills',
        'activityCategoryRules' => 'getActivityCategoryRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const UNEQUAL_PAID_ALLOW = 'Allow';
    const UNEQUAL_PAID_DISALLOW = 'Disallow';
    const UNEQUAL_PAID_ADMIN_REVIEW = 'AdminReview';
    const ONE_SIDED_ALLOW = 'Allow';
    const ONE_SIDED_DISALLOW = 'Disallow';
    const ONE_SIDED_ADMIN_REVIEW = 'AdminReview';
    const WEEKLY_MIN_PAID_VIOLATIONS_ALLOW = 'Allow';
    const WEEKLY_MIN_PAID_VIOLATIONS_DISALLOW = 'Disallow';
    const WEEKLY_MIN_PAID_VIOLATIONS_ADMIN_REVIEW = 'AdminReview';
    const WEEKLY_MAX_PAID_VIOLATIONS_ALLOW = 'Allow';
    const WEEKLY_MAX_PAID_VIOLATIONS_DISALLOW = 'Disallow';
    const WEEKLY_MAX_PAID_VIOLATIONS_ADMIN_REVIEW = 'AdminReview';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUnequalPaidAllowableValues()
    {
        return [
            self::UNEQUAL_PAID_ALLOW,
            self::UNEQUAL_PAID_DISALLOW,
            self::UNEQUAL_PAID_ADMIN_REVIEW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOneSidedAllowableValues()
    {
        return [
            self::ONE_SIDED_ALLOW,
            self::ONE_SIDED_DISALLOW,
            self::ONE_SIDED_ADMIN_REVIEW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeeklyMinPaidViolationsAllowableValues()
    {
        return [
            self::WEEKLY_MIN_PAID_VIOLATIONS_ALLOW,
            self::WEEKLY_MIN_PAID_VIOLATIONS_DISALLOW,
            self::WEEKLY_MIN_PAID_VIOLATIONS_ADMIN_REVIEW,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getWeeklyMaxPaidViolationsAllowableValues()
    {
        return [
            self::WEEKLY_MAX_PAID_VIOLATIONS_ALLOW,
            self::WEEKLY_MAX_PAID_VIOLATIONS_DISALLOW,
            self::WEEKLY_MAX_PAID_VIOLATIONS_ADMIN_REVIEW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['autoReview'] = isset($data['autoReview']) ? $data['autoReview'] : null;
        $this->container['allowDirectTrades'] = isset($data['allowDirectTrades']) ? $data['allowDirectTrades'] : null;
        $this->container['minHoursInFuture'] = isset($data['minHoursInFuture']) ? $data['minHoursInFuture'] : null;
        $this->container['unequalPaid'] = isset($data['unequalPaid']) ? $data['unequalPaid'] : null;
        $this->container['oneSided'] = isset($data['oneSided']) ? $data['oneSided'] : null;
        $this->container['weeklyMinPaidViolations'] = isset($data['weeklyMinPaidViolations']) ? $data['weeklyMinPaidViolations'] : null;
        $this->container['weeklyMaxPaidViolations'] = isset($data['weeklyMaxPaidViolations']) ? $data['weeklyMaxPaidViolations'] : null;
        $this->container['requiresMatchingQueues'] = isset($data['requiresMatchingQueues']) ? $data['requiresMatchingQueues'] : null;
        $this->container['requiresMatchingLanguages'] = isset($data['requiresMatchingLanguages']) ? $data['requiresMatchingLanguages'] : null;
        $this->container['requiresMatchingSkills'] = isset($data['requiresMatchingSkills']) ? $data['requiresMatchingSkills'] : null;
        $this->container['activityCategoryRules'] = isset($data['activityCategoryRules']) ? $data['activityCategoryRules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getUnequalPaidAllowableValues();
        if (!is_null($this->container['unequalPaid']) && !in_array($this->container['unequalPaid'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'unequalPaid', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOneSidedAllowableValues();
        if (!is_null($this->container['oneSided']) && !in_array($this->container['oneSided'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'oneSided', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeeklyMinPaidViolationsAllowableValues();
        if (!is_null($this->container['weeklyMinPaidViolations']) && !in_array($this->container['weeklyMinPaidViolations'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'weeklyMinPaidViolations', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getWeeklyMaxPaidViolationsAllowableValues();
        if (!is_null($this->container['weeklyMaxPaidViolations']) && !in_array($this->container['weeklyMaxPaidViolations'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'weeklyMaxPaidViolations', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether shift trading is enabled for this management unit
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets autoReview
     *
     * @return bool
     */
    public function getAutoReview()
    {
        return $this->container['autoReview'];
    }

    /**
     * Sets autoReview
     *
     * @param bool $autoReview Whether automatic shift trade review is enabled according to the rules defined in for this management unit
     *
     * @return $this
     */
    public function setAutoReview($autoReview)
    {
        $this->container['autoReview'] = $autoReview;

        return $this;
    }

    /**
     * Gets allowDirectTrades
     *
     * @return bool
     */
    public function getAllowDirectTrades()
    {
        return $this->container['allowDirectTrades'];
    }

    /**
     * Sets allowDirectTrades
     *
     * @param bool $allowDirectTrades Whether direct shift trades between agents are allowed
     *
     * @return $this
     */
    public function setAllowDirectTrades($allowDirectTrades)
    {
        $this->container['allowDirectTrades'] = $allowDirectTrades;

        return $this;
    }

    /**
     * Gets minHoursInFuture
     *
     * @return int
     */
    public function getMinHoursInFuture()
    {
        return $this->container['minHoursInFuture'];
    }

    /**
     * Sets minHoursInFuture
     *
     * @param int $minHoursInFuture The minimum number of hours in the future shift trades are allowed
     *
     * @return $this
     */
    public function setMinHoursInFuture($minHoursInFuture)
    {
        $this->container['minHoursInFuture'] = $minHoursInFuture;

        return $this;
    }

    /**
     * Gets unequalPaid
     *
     * @return string
     */
    public function getUnequalPaid()
    {
        return $this->container['unequalPaid'];
    }

    /**
     * Sets unequalPaid
     *
     * @param string $unequalPaid How to handle shift trades which involve unequal paid times
     *
     * @return $this
     */
    public function setUnequalPaid($unequalPaid)
    {
        $allowedValues = $this->getUnequalPaidAllowableValues();
        if (!is_null($unequalPaid) && !in_array($unequalPaid, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'unequalPaid', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['unequalPaid'] = $unequalPaid;

        return $this;
    }

    /**
     * Gets oneSided
     *
     * @return string
     */
    public function getOneSided()
    {
        return $this->container['oneSided'];
    }

    /**
     * Sets oneSided
     *
     * @param string $oneSided How to handle one-sided shift trades
     *
     * @return $this
     */
    public function setOneSided($oneSided)
    {
        $allowedValues = $this->getOneSidedAllowableValues();
        if (!is_null($oneSided) && !in_array($oneSided, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'oneSided', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['oneSided'] = $oneSided;

        return $this;
    }

    /**
     * Gets weeklyMinPaidViolations
     *
     * @return string
     */
    public function getWeeklyMinPaidViolations()
    {
        return $this->container['weeklyMinPaidViolations'];
    }

    /**
     * Sets weeklyMinPaidViolations
     *
     * @param string $weeklyMinPaidViolations How to handle shift trades which result in violations of weekly minimum paid time constraint
     *
     * @return $this
     */
    public function setWeeklyMinPaidViolations($weeklyMinPaidViolations)
    {
        $allowedValues = $this->getWeeklyMinPaidViolationsAllowableValues();
        if (!is_null($weeklyMinPaidViolations) && !in_array($weeklyMinPaidViolations, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weeklyMinPaidViolations', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weeklyMinPaidViolations'] = $weeklyMinPaidViolations;

        return $this;
    }

    /**
     * Gets weeklyMaxPaidViolations
     *
     * @return string
     */
    public function getWeeklyMaxPaidViolations()
    {
        return $this->container['weeklyMaxPaidViolations'];
    }

    /**
     * Sets weeklyMaxPaidViolations
     *
     * @param string $weeklyMaxPaidViolations How to handle shift trades which result in violations of weekly maximum paid time constraint
     *
     * @return $this
     */
    public function setWeeklyMaxPaidViolations($weeklyMaxPaidViolations)
    {
        $allowedValues = $this->getWeeklyMaxPaidViolationsAllowableValues();
        if (!is_null($weeklyMaxPaidViolations) && !in_array($weeklyMaxPaidViolations, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'weeklyMaxPaidViolations', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['weeklyMaxPaidViolations'] = $weeklyMaxPaidViolations;

        return $this;
    }

    /**
     * Gets requiresMatchingQueues
     *
     * @return bool
     */
    public function getRequiresMatchingQueues()
    {
        return $this->container['requiresMatchingQueues'];
    }

    /**
     * Sets requiresMatchingQueues
     *
     * @param bool $requiresMatchingQueues Whether to constrain shift trades to agents with matching queues
     *
     * @return $this
     */
    public function setRequiresMatchingQueues($requiresMatchingQueues)
    {
        $this->container['requiresMatchingQueues'] = $requiresMatchingQueues;

        return $this;
    }

    /**
     * Gets requiresMatchingLanguages
     *
     * @return bool
     */
    public function getRequiresMatchingLanguages()
    {
        return $this->container['requiresMatchingLanguages'];
    }

    /**
     * Sets requiresMatchingLanguages
     *
     * @param bool $requiresMatchingLanguages Whether to constrain shift trades to agents with matching languages
     *
     * @return $this
     */
    public function setRequiresMatchingLanguages($requiresMatchingLanguages)
    {
        $this->container['requiresMatchingLanguages'] = $requiresMatchingLanguages;

        return $this;
    }

    /**
     * Gets requiresMatchingSkills
     *
     * @return bool
     */
    public function getRequiresMatchingSkills()
    {
        return $this->container['requiresMatchingSkills'];
    }

    /**
     * Sets requiresMatchingSkills
     *
     * @param bool $requiresMatchingSkills Whether to constrain shift trades to agents with matching skills
     *
     * @return $this
     */
    public function setRequiresMatchingSkills($requiresMatchingSkills)
    {
        $this->container['requiresMatchingSkills'] = $requiresMatchingSkills;

        return $this;
    }

    /**
     * Gets activityCategoryRules
     *
     * @return \PureCloudPlatform\Client\V2\Model\ShiftTradeActivityRule[]
     */
    public function getActivityCategoryRules()
    {
        return $this->container['activityCategoryRules'];
    }

    /**
     * Sets activityCategoryRules
     *
     * @param \PureCloudPlatform\Client\V2\Model\ShiftTradeActivityRule[] $activityCategoryRules Rules that specify what to do with activity categories that are part of a shift defined in a trade
     *
     * @return $this
     */
    public function setActivityCategoryRules($activityCategoryRules)
    {
        $this->container['activityCategoryRules'] = $activityCategoryRules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


