<?php
/**
 * Operation
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * Operation Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Operation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Operation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'complete' => 'bool',
        'user' => '\PureCloudPlatform\Client\V2\Model\User',
        'client' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'errorMessage' => 'string',
        'errorCode' => 'string',
        'errorDetails' => '\PureCloudPlatform\Client\V2\Model\Detail[]',
        'errorMessageParams' => 'map[string,string]',
        'actionName' => 'string',
        'actionStatus' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'complete' => null,
        'user' => null,
        'client' => null,
        'errorMessage' => null,
        'errorCode' => null,
        'errorDetails' => null,
        'errorMessageParams' => null,
        'actionName' => null,
        'actionStatus' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'complete' => 'complete',
        'user' => 'user',
        'client' => 'client',
        'errorMessage' => 'errorMessage',
        'errorCode' => 'errorCode',
        'errorDetails' => 'errorDetails',
        'errorMessageParams' => 'errorMessageParams',
        'actionName' => 'actionName',
        'actionStatus' => 'actionStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'complete' => 'setComplete',
        'user' => 'setUser',
        'client' => 'setClient',
        'errorMessage' => 'setErrorMessage',
        'errorCode' => 'setErrorCode',
        'errorDetails' => 'setErrorDetails',
        'errorMessageParams' => 'setErrorMessageParams',
        'actionName' => 'setActionName',
        'actionStatus' => 'setActionStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'complete' => 'getComplete',
        'user' => 'getUser',
        'client' => 'getClient',
        'errorMessage' => 'getErrorMessage',
        'errorCode' => 'getErrorCode',
        'errorDetails' => 'getErrorDetails',
        'errorMessageParams' => 'getErrorMessageParams',
        'actionName' => 'getActionName',
        'actionStatus' => 'getActionStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTION_NAME_CREATE = 'CREATE';
    const ACTION_NAME_CHECKIN = 'CHECKIN';
    const ACTION_NAME_DEBUG = 'DEBUG';
    const ACTION_NAME_DELETE = 'DELETE';
    const ACTION_NAME_HISTORY = 'HISTORY';
    const ACTION_NAME_PUBLISH = 'PUBLISH';
    const ACTION_NAME_STATE_CHANGE = 'STATE_CHANGE';
    const ACTION_NAME_UPDATE = 'UPDATE';
    const ACTION_NAME_VALIDATE = 'VALIDATE';
    const ACTION_STATUS_LOCKED = 'LOCKED';
    const ACTION_STATUS_UNLOCKED = 'UNLOCKED';
    const ACTION_STATUS_STARTED = 'STARTED';
    const ACTION_STATUS_PENDING_GENERATION = 'PENDING_GENERATION';
    const ACTION_STATUS_PENDING_BACKEND_NOTIFICATION = 'PENDING_BACKEND_NOTIFICATION';
    const ACTION_STATUS_SUCCESS = 'SUCCESS';
    const ACTION_STATUS_FAILURE = 'FAILURE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionNameAllowableValues()
    {
        return [
            self::ACTION_NAME_CREATE,
            self::ACTION_NAME_CHECKIN,
            self::ACTION_NAME_DEBUG,
            self::ACTION_NAME_DELETE,
            self::ACTION_NAME_HISTORY,
            self::ACTION_NAME_PUBLISH,
            self::ACTION_NAME_STATE_CHANGE,
            self::ACTION_NAME_UPDATE,
            self::ACTION_NAME_VALIDATE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionStatusAllowableValues()
    {
        return [
            self::ACTION_STATUS_LOCKED,
            self::ACTION_STATUS_UNLOCKED,
            self::ACTION_STATUS_STARTED,
            self::ACTION_STATUS_PENDING_GENERATION,
            self::ACTION_STATUS_PENDING_BACKEND_NOTIFICATION,
            self::ACTION_STATUS_SUCCESS,
            self::ACTION_STATUS_FAILURE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['errorCode'] = isset($data['errorCode']) ? $data['errorCode'] : null;
        $this->container['errorDetails'] = isset($data['errorDetails']) ? $data['errorDetails'] : null;
        $this->container['errorMessageParams'] = isset($data['errorMessageParams']) ? $data['errorMessageParams'] : null;
        $this->container['actionName'] = isset($data['actionName']) ? $data['actionName'] : null;
        $this->container['actionStatus'] = isset($data['actionStatus']) ? $data['actionStatus'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionNameAllowableValues();
        if (!is_null($this->container['actionName']) && !in_array($this->container['actionName'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'actionName', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionStatusAllowableValues();
        if (!is_null($this->container['actionStatus']) && !in_array($this->container['actionStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'actionStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets complete
     *
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool $complete complete
     *
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $client client
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage errorMessage
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param string $errorCode errorCode
     *
     * @return $this
     */
    public function setErrorCode($errorCode)
    {
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets errorDetails
     *
     * @return \PureCloudPlatform\Client\V2\Model\Detail[]
     */
    public function getErrorDetails()
    {
        return $this->container['errorDetails'];
    }

    /**
     * Sets errorDetails
     *
     * @param \PureCloudPlatform\Client\V2\Model\Detail[] $errorDetails errorDetails
     *
     * @return $this
     */
    public function setErrorDetails($errorDetails)
    {
        $this->container['errorDetails'] = $errorDetails;

        return $this;
    }

    /**
     * Gets errorMessageParams
     *
     * @return map[string,string]
     */
    public function getErrorMessageParams()
    {
        return $this->container['errorMessageParams'];
    }

    /**
     * Sets errorMessageParams
     *
     * @param map[string,string] $errorMessageParams errorMessageParams
     *
     * @return $this
     */
    public function setErrorMessageParams($errorMessageParams)
    {
        $this->container['errorMessageParams'] = $errorMessageParams;

        return $this;
    }

    /**
     * Gets actionName
     *
     * @return string
     */
    public function getActionName()
    {
        return $this->container['actionName'];
    }

    /**
     * Sets actionName
     *
     * @param string $actionName Action name
     *
     * @return $this
     */
    public function setActionName($actionName)
    {
        $allowedValues = $this->getActionNameAllowableValues();
        if (!is_null($actionName) && !in_array($actionName, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actionName', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actionName'] = $actionName;

        return $this;
    }

    /**
     * Gets actionStatus
     *
     * @return string
     */
    public function getActionStatus()
    {
        return $this->container['actionStatus'];
    }

    /**
     * Sets actionStatus
     *
     * @param string $actionStatus Action status
     *
     * @return $this
     */
    public function setActionStatus($actionStatus)
    {
        $allowedValues = $this->getActionStatusAllowableValues();
        if (!is_null($actionStatus) && !in_array($actionStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actionStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actionStatus'] = $actionStatus;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


