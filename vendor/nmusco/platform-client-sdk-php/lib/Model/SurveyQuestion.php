<?php
/**
 * SurveyQuestion
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * SurveyQuestion Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SurveyQuestion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SurveyQuestion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'text' => 'string',
        'helpText' => 'string',
        'type' => 'string',
        'naEnabled' => 'bool',
        'visibilityCondition' => '\PureCloudPlatform\Client\V2\Model\VisibilityCondition',
        'answerOptions' => '\PureCloudPlatform\Client\V2\Model\AnswerOption[]',
        'maxResponseCharacters' => 'int',
        'explanationPrompt' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'text' => null,
        'helpText' => null,
        'type' => null,
        'naEnabled' => null,
        'visibilityCondition' => null,
        'answerOptions' => null,
        'maxResponseCharacters' => 'int32',
        'explanationPrompt' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'text' => 'text',
        'helpText' => 'helpText',
        'type' => 'type',
        'naEnabled' => 'naEnabled',
        'visibilityCondition' => 'visibilityCondition',
        'answerOptions' => 'answerOptions',
        'maxResponseCharacters' => 'maxResponseCharacters',
        'explanationPrompt' => 'explanationPrompt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'text' => 'setText',
        'helpText' => 'setHelpText',
        'type' => 'setType',
        'naEnabled' => 'setNaEnabled',
        'visibilityCondition' => 'setVisibilityCondition',
        'answerOptions' => 'setAnswerOptions',
        'maxResponseCharacters' => 'setMaxResponseCharacters',
        'explanationPrompt' => 'setExplanationPrompt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'text' => 'getText',
        'helpText' => 'getHelpText',
        'type' => 'getType',
        'naEnabled' => 'getNaEnabled',
        'visibilityCondition' => 'getVisibilityCondition',
        'answerOptions' => 'getAnswerOptions',
        'maxResponseCharacters' => 'getMaxResponseCharacters',
        'explanationPrompt' => 'getExplanationPrompt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_MULTIPLE_CHOICE_QUESTION = 'multipleChoiceQuestion';
    const TYPE_FREE_TEXT_QUESTION = 'freeTextQuestion';
    const TYPE_NPS_QUESTION = 'npsQuestion';
    const TYPE_READ_ONLY_TEXT_BLOCK_QUESTION = 'readOnlyTextBlockQuestion';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MULTIPLE_CHOICE_QUESTION,
            self::TYPE_FREE_TEXT_QUESTION,
            self::TYPE_NPS_QUESTION,
            self::TYPE_READ_ONLY_TEXT_BLOCK_QUESTION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['helpText'] = isset($data['helpText']) ? $data['helpText'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['naEnabled'] = isset($data['naEnabled']) ? $data['naEnabled'] : null;
        $this->container['visibilityCondition'] = isset($data['visibilityCondition']) ? $data['visibilityCondition'] : null;
        $this->container['answerOptions'] = isset($data['answerOptions']) ? $data['answerOptions'] : null;
        $this->container['maxResponseCharacters'] = isset($data['maxResponseCharacters']) ? $data['maxResponseCharacters'] : null;
        $this->container['explanationPrompt'] = isset($data['explanationPrompt']) ? $data['explanationPrompt'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets helpText
     *
     * @return string
     */
    public function getHelpText()
    {
        return $this->container['helpText'];
    }

    /**
     * Sets helpText
     *
     * @param string $helpText helpText
     *
     * @return $this
     */
    public function setHelpText($helpText)
    {
        $this->container['helpText'] = $helpText;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets naEnabled
     *
     * @return bool
     */
    public function getNaEnabled()
    {
        return $this->container['naEnabled'];
    }

    /**
     * Sets naEnabled
     *
     * @param bool $naEnabled naEnabled
     *
     * @return $this
     */
    public function setNaEnabled($naEnabled)
    {
        $this->container['naEnabled'] = $naEnabled;

        return $this;
    }

    /**
     * Gets visibilityCondition
     *
     * @return \PureCloudPlatform\Client\V2\Model\VisibilityCondition
     */
    public function getVisibilityCondition()
    {
        return $this->container['visibilityCondition'];
    }

    /**
     * Sets visibilityCondition
     *
     * @param \PureCloudPlatform\Client\V2\Model\VisibilityCondition $visibilityCondition visibilityCondition
     *
     * @return $this
     */
    public function setVisibilityCondition($visibilityCondition)
    {
        $this->container['visibilityCondition'] = $visibilityCondition;

        return $this;
    }

    /**
     * Gets answerOptions
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnswerOption[]
     */
    public function getAnswerOptions()
    {
        return $this->container['answerOptions'];
    }

    /**
     * Sets answerOptions
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnswerOption[] $answerOptions Options from which to choose an answer for this question. Only used by Multiple Choice type questions.
     *
     * @return $this
     */
    public function setAnswerOptions($answerOptions)
    {
        $this->container['answerOptions'] = $answerOptions;

        return $this;
    }

    /**
     * Gets maxResponseCharacters
     *
     * @return int
     */
    public function getMaxResponseCharacters()
    {
        return $this->container['maxResponseCharacters'];
    }

    /**
     * Sets maxResponseCharacters
     *
     * @param int $maxResponseCharacters How many characters are allowed in the text response to this question. Used by NPS and Free Text question types.
     *
     * @return $this
     */
    public function setMaxResponseCharacters($maxResponseCharacters)
    {
        $this->container['maxResponseCharacters'] = $maxResponseCharacters;

        return $this;
    }

    /**
     * Gets explanationPrompt
     *
     * @return string
     */
    public function getExplanationPrompt()
    {
        return $this->container['explanationPrompt'];
    }

    /**
     * Sets explanationPrompt
     *
     * @param string $explanationPrompt Prompt for details explaining the chosen NPS score. Used by NPS questions.
     *
     * @return $this
     */
    public function setExplanationPrompt($explanationPrompt)
    {
        $this->container['explanationPrompt'] = $explanationPrompt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


