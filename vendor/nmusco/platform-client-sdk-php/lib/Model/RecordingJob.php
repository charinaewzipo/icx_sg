<?php
/**
 * RecordingJob
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * RecordingJob Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecordingJob implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecordingJob';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'state' => 'string',
        'recordingJobsQuery' => '\PureCloudPlatform\Client\V2\Model\RecordingJobsQuery',
        'dateCreated' => '\DateTime',
        'totalConversations' => 'int',
        'totalRecordings' => 'int',
        'totalProcessedRecordings' => 'int',
        'percentProgress' => 'int',
        'errorMessage' => 'string',
        'selfUri' => 'string',
        'user' => '\PureCloudPlatform\Client\V2\Model\AddressableEntityRef'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'state' => null,
        'recordingJobsQuery' => null,
        'dateCreated' => 'date-time',
        'totalConversations' => 'int32',
        'totalRecordings' => 'int32',
        'totalProcessedRecordings' => 'int32',
        'percentProgress' => 'int32',
        'errorMessage' => null,
        'selfUri' => 'uri',
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'state' => 'state',
        'recordingJobsQuery' => 'recordingJobsQuery',
        'dateCreated' => 'dateCreated',
        'totalConversations' => 'totalConversations',
        'totalRecordings' => 'totalRecordings',
        'totalProcessedRecordings' => 'totalProcessedRecordings',
        'percentProgress' => 'percentProgress',
        'errorMessage' => 'errorMessage',
        'selfUri' => 'selfUri',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'state' => 'setState',
        'recordingJobsQuery' => 'setRecordingJobsQuery',
        'dateCreated' => 'setDateCreated',
        'totalConversations' => 'setTotalConversations',
        'totalRecordings' => 'setTotalRecordings',
        'totalProcessedRecordings' => 'setTotalProcessedRecordings',
        'percentProgress' => 'setPercentProgress',
        'errorMessage' => 'setErrorMessage',
        'selfUri' => 'setSelfUri',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'state' => 'getState',
        'recordingJobsQuery' => 'getRecordingJobsQuery',
        'dateCreated' => 'getDateCreated',
        'totalConversations' => 'getTotalConversations',
        'totalRecordings' => 'getTotalRecordings',
        'totalProcessedRecordings' => 'getTotalProcessedRecordings',
        'percentProgress' => 'getPercentProgress',
        'errorMessage' => 'getErrorMessage',
        'selfUri' => 'getSelfUri',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_FULFILLED = 'FULFILLED';
    const STATE_PENDING = 'PENDING';
    const STATE_READY = 'READY';
    const STATE_PROCESSING = 'PROCESSING';
    const STATE_CANCELLED = 'CANCELLED';
    const STATE_FAILED = 'FAILED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_FULFILLED,
            self::STATE_PENDING,
            self::STATE_READY,
            self::STATE_PROCESSING,
            self::STATE_CANCELLED,
            self::STATE_FAILED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['recordingJobsQuery'] = isset($data['recordingJobsQuery']) ? $data['recordingJobsQuery'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['totalConversations'] = isset($data['totalConversations']) ? $data['totalConversations'] : null;
        $this->container['totalRecordings'] = isset($data['totalRecordings']) ? $data['totalRecordings'] : null;
        $this->container['totalProcessedRecordings'] = isset($data['totalProcessedRecordings']) ? $data['totalProcessedRecordings'] : null;
        $this->container['percentProgress'] = isset($data['percentProgress']) ? $data['percentProgress'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state of the job.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets recordingJobsQuery
     *
     * @return \PureCloudPlatform\Client\V2\Model\RecordingJobsQuery
     */
    public function getRecordingJobsQuery()
    {
        return $this->container['recordingJobsQuery'];
    }

    /**
     * Sets recordingJobsQuery
     *
     * @param \PureCloudPlatform\Client\V2\Model\RecordingJobsQuery $recordingJobsQuery Original query of the job.
     *
     * @return $this
     */
    public function setRecordingJobsQuery($recordingJobsQuery)
    {
        $this->container['recordingJobsQuery'] = $recordingJobsQuery;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated Date when the job was created. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets totalConversations
     *
     * @return int
     */
    public function getTotalConversations()
    {
        return $this->container['totalConversations'];
    }

    /**
     * Sets totalConversations
     *
     * @param int $totalConversations Total number of conversations affected.
     *
     * @return $this
     */
    public function setTotalConversations($totalConversations)
    {
        $this->container['totalConversations'] = $totalConversations;

        return $this;
    }

    /**
     * Gets totalRecordings
     *
     * @return int
     */
    public function getTotalRecordings()
    {
        return $this->container['totalRecordings'];
    }

    /**
     * Sets totalRecordings
     *
     * @param int $totalRecordings Total number of recordings affected.
     *
     * @return $this
     */
    public function setTotalRecordings($totalRecordings)
    {
        $this->container['totalRecordings'] = $totalRecordings;

        return $this;
    }

    /**
     * Gets totalProcessedRecordings
     *
     * @return int
     */
    public function getTotalProcessedRecordings()
    {
        return $this->container['totalProcessedRecordings'];
    }

    /**
     * Sets totalProcessedRecordings
     *
     * @param int $totalProcessedRecordings Total number of recordings have been processed.
     *
     * @return $this
     */
    public function setTotalProcessedRecordings($totalProcessedRecordings)
    {
        $this->container['totalProcessedRecordings'] = $totalProcessedRecordings;

        return $this;
    }

    /**
     * Gets percentProgress
     *
     * @return int
     */
    public function getPercentProgress()
    {
        return $this->container['percentProgress'];
    }

    /**
     * Sets percentProgress
     *
     * @param int $percentProgress Progress in percentage based on the number of recordings
     *
     * @return $this
     */
    public function setPercentProgress($percentProgress)
    {
        $this->container['percentProgress'] = $percentProgress;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage Error occurred during the job execution
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \PureCloudPlatform\Client\V2\Model\AddressableEntityRef
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \PureCloudPlatform\Client\V2\Model\AddressableEntityRef $user Details of the user created the job
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


