<?php
/**
 * EdgeMetrics
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * EdgeMetrics Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeMetrics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EdgeMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'edge' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'eventTime' => '\DateTime',
        'upTimeMsec' => 'int',
        'processors' => '\PureCloudPlatform\Client\V2\Model\EdgeMetricsProcessor[]',
        'memory' => '\PureCloudPlatform\Client\V2\Model\EdgeMetricsMemory[]',
        'disks' => '\PureCloudPlatform\Client\V2\Model\EdgeMetricsDisk[]',
        'subsystems' => '\PureCloudPlatform\Client\V2\Model\EdgeMetricsSubsystem[]',
        'networks' => '\PureCloudPlatform\Client\V2\Model\EdgeMetricsNetwork[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'edge' => null,
        'eventTime' => 'date-time',
        'upTimeMsec' => 'int64',
        'processors' => null,
        'memory' => null,
        'disks' => null,
        'subsystems' => null,
        'networks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edge' => 'edge',
        'eventTime' => 'eventTime',
        'upTimeMsec' => 'upTimeMsec',
        'processors' => 'processors',
        'memory' => 'memory',
        'disks' => 'disks',
        'subsystems' => 'subsystems',
        'networks' => 'networks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edge' => 'setEdge',
        'eventTime' => 'setEventTime',
        'upTimeMsec' => 'setUpTimeMsec',
        'processors' => 'setProcessors',
        'memory' => 'setMemory',
        'disks' => 'setDisks',
        'subsystems' => 'setSubsystems',
        'networks' => 'setNetworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edge' => 'getEdge',
        'eventTime' => 'getEventTime',
        'upTimeMsec' => 'getUpTimeMsec',
        'processors' => 'getProcessors',
        'memory' => 'getMemory',
        'disks' => 'getDisks',
        'subsystems' => 'getSubsystems',
        'networks' => 'getNetworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['edge'] = isset($data['edge']) ? $data['edge'] : null;
        $this->container['eventTime'] = isset($data['eventTime']) ? $data['eventTime'] : null;
        $this->container['upTimeMsec'] = isset($data['upTimeMsec']) ? $data['upTimeMsec'] : null;
        $this->container['processors'] = isset($data['processors']) ? $data['processors'] : null;
        $this->container['memory'] = isset($data['memory']) ? $data['memory'] : null;
        $this->container['disks'] = isset($data['disks']) ? $data['disks'] : null;
        $this->container['subsystems'] = isset($data['subsystems']) ? $data['subsystems'] : null;
        $this->container['networks'] = isset($data['networks']) ? $data['networks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edge
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getEdge()
    {
        return $this->container['edge'];
    }

    /**
     * Sets edge
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $edge edge
     *
     * @return $this
     */
    public function setEdge($edge)
    {
        $this->container['edge'] = $edge;

        return $this;
    }

    /**
     * Gets eventTime
     *
     * @return \DateTime
     */
    public function getEventTime()
    {
        return $this->container['eventTime'];
    }

    /**
     * Sets eventTime
     *
     * @param \DateTime $eventTime Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setEventTime($eventTime)
    {
        $this->container['eventTime'] = $eventTime;

        return $this;
    }

    /**
     * Gets upTimeMsec
     *
     * @return int
     */
    public function getUpTimeMsec()
    {
        return $this->container['upTimeMsec'];
    }

    /**
     * Sets upTimeMsec
     *
     * @param int $upTimeMsec upTimeMsec
     *
     * @return $this
     */
    public function setUpTimeMsec($upTimeMsec)
    {
        $this->container['upTimeMsec'] = $upTimeMsec;

        return $this;
    }

    /**
     * Gets processors
     *
     * @return \PureCloudPlatform\Client\V2\Model\EdgeMetricsProcessor[]
     */
    public function getProcessors()
    {
        return $this->container['processors'];
    }

    /**
     * Sets processors
     *
     * @param \PureCloudPlatform\Client\V2\Model\EdgeMetricsProcessor[] $processors processors
     *
     * @return $this
     */
    public function setProcessors($processors)
    {
        $this->container['processors'] = $processors;

        return $this;
    }

    /**
     * Gets memory
     *
     * @return \PureCloudPlatform\Client\V2\Model\EdgeMetricsMemory[]
     */
    public function getMemory()
    {
        return $this->container['memory'];
    }

    /**
     * Sets memory
     *
     * @param \PureCloudPlatform\Client\V2\Model\EdgeMetricsMemory[] $memory memory
     *
     * @return $this
     */
    public function setMemory($memory)
    {
        $this->container['memory'] = $memory;

        return $this;
    }

    /**
     * Gets disks
     *
     * @return \PureCloudPlatform\Client\V2\Model\EdgeMetricsDisk[]
     */
    public function getDisks()
    {
        return $this->container['disks'];
    }

    /**
     * Sets disks
     *
     * @param \PureCloudPlatform\Client\V2\Model\EdgeMetricsDisk[] $disks disks
     *
     * @return $this
     */
    public function setDisks($disks)
    {
        $this->container['disks'] = $disks;

        return $this;
    }

    /**
     * Gets subsystems
     *
     * @return \PureCloudPlatform\Client\V2\Model\EdgeMetricsSubsystem[]
     */
    public function getSubsystems()
    {
        return $this->container['subsystems'];
    }

    /**
     * Sets subsystems
     *
     * @param \PureCloudPlatform\Client\V2\Model\EdgeMetricsSubsystem[] $subsystems subsystems
     *
     * @return $this
     */
    public function setSubsystems($subsystems)
    {
        $this->container['subsystems'] = $subsystems;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return \PureCloudPlatform\Client\V2\Model\EdgeMetricsNetwork[]
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param \PureCloudPlatform\Client\V2\Model\EdgeMetricsNetwork[] $networks networks
     *
     * @return $this
     */
    public function setNetworks($networks)
    {
        $this->container['networks'] = $networks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


