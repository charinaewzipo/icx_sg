<?php
/**
 * DncListCreate
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * DncListCreate Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DncListCreate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DncListCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'dateCreated' => '\DateTime',
        'dateModified' => '\DateTime',
        'version' => 'int',
        'importStatus' => '\PureCloudPlatform\Client\V2\Model\ImportStatus',
        'size' => 'int',
        'dncSourceType' => 'string',
        'loginId' => 'string',
        'dncCodes' => 'string[]',
        'licenseId' => 'string',
        'division' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'dateCreated' => 'date-time',
        'dateModified' => 'date-time',
        'version' => 'int32',
        'importStatus' => null,
        'size' => 'int64',
        'dncSourceType' => null,
        'loginId' => null,
        'dncCodes' => null,
        'licenseId' => null,
        'division' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'dateCreated' => 'dateCreated',
        'dateModified' => 'dateModified',
        'version' => 'version',
        'importStatus' => 'importStatus',
        'size' => 'size',
        'dncSourceType' => 'dncSourceType',
        'loginId' => 'loginId',
        'dncCodes' => 'dncCodes',
        'licenseId' => 'licenseId',
        'division' => 'division',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'dateCreated' => 'setDateCreated',
        'dateModified' => 'setDateModified',
        'version' => 'setVersion',
        'importStatus' => 'setImportStatus',
        'size' => 'setSize',
        'dncSourceType' => 'setDncSourceType',
        'loginId' => 'setLoginId',
        'dncCodes' => 'setDncCodes',
        'licenseId' => 'setLicenseId',
        'division' => 'setDivision',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'dateCreated' => 'getDateCreated',
        'dateModified' => 'getDateModified',
        'version' => 'getVersion',
        'importStatus' => 'getImportStatus',
        'size' => 'getSize',
        'dncSourceType' => 'getDncSourceType',
        'loginId' => 'getLoginId',
        'dncCodes' => 'getDncCodes',
        'licenseId' => 'getLicenseId',
        'division' => 'getDivision',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DNC_SOURCE_TYPE_RDS = 'rds';
    const DNC_SOURCE_TYPE_DNCCOM = 'dnc.com';
    const DNC_SOURCE_TYPE_GRYPHON = 'gryphon';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDncSourceTypeAllowableValues()
    {
        return [
            self::DNC_SOURCE_TYPE_RDS,
            self::DNC_SOURCE_TYPE_DNCCOM,
            self::DNC_SOURCE_TYPE_GRYPHON,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['dateModified'] = isset($data['dateModified']) ? $data['dateModified'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['importStatus'] = isset($data['importStatus']) ? $data['importStatus'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['dncSourceType'] = isset($data['dncSourceType']) ? $data['dncSourceType'] : null;
        $this->container['loginId'] = isset($data['loginId']) ? $data['loginId'] : null;
        $this->container['dncCodes'] = isset($data['dncCodes']) ? $data['dncCodes'] : null;
        $this->container['licenseId'] = isset($data['licenseId']) ? $data['licenseId'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['dncSourceType'] === null) {
            $invalidProperties[] = "'dncSourceType' can't be null";
        }
        $allowedValues = $this->getDncSourceTypeAllowableValues();
        if (!is_null($this->container['dncSourceType']) && !in_array($this->container['dncSourceType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dncSourceType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the DncList.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets dateModified
     *
     * @return \DateTime
     */
    public function getDateModified()
    {
        return $this->container['dateModified'];
    }

    /**
     * Sets dateModified
     *
     * @param \DateTime $dateModified Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateModified($dateModified)
    {
        $this->container['dateModified'] = $dateModified;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Required for updates, must match the version number of the most recent update
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets importStatus
     *
     * @return \PureCloudPlatform\Client\V2\Model\ImportStatus
     */
    public function getImportStatus()
    {
        return $this->container['importStatus'];
    }

    /**
     * Sets importStatus
     *
     * @param \PureCloudPlatform\Client\V2\Model\ImportStatus $importStatus The status of the import process
     *
     * @return $this
     */
    public function setImportStatus($importStatus)
    {
        $this->container['importStatus'] = $importStatus;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size The total number of phone numbers in the DncList.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets dncSourceType
     *
     * @return string
     */
    public function getDncSourceType()
    {
        return $this->container['dncSourceType'];
    }

    /**
     * Sets dncSourceType
     *
     * @param string $dncSourceType The type of the DncList.
     *
     * @return $this
     */
    public function setDncSourceType($dncSourceType)
    {
        $allowedValues = $this->getDncSourceTypeAllowableValues();
        if (!in_array($dncSourceType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dncSourceType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dncSourceType'] = $dncSourceType;

        return $this;
    }

    /**
     * Gets loginId
     *
     * @return string
     */
    public function getLoginId()
    {
        return $this->container['loginId'];
    }

    /**
     * Sets loginId
     *
     * @param string $loginId A dnc.com loginId. Required if the dncSourceType is dnc.com.
     *
     * @return $this
     */
    public function setLoginId($loginId)
    {
        $this->container['loginId'] = $loginId;

        return $this;
    }

    /**
     * Gets dncCodes
     *
     * @return string[]
     */
    public function getDncCodes()
    {
        return $this->container['dncCodes'];
    }

    /**
     * Sets dncCodes
     *
     * @param string[] $dncCodes The list of dnc.com codes to be treated as DNC. Required if the dncSourceType is dnc.com.
     *
     * @return $this
     */
    public function setDncCodes($dncCodes)
    {
        $this->container['dncCodes'] = $dncCodes;

        return $this;
    }

    /**
     * Gets licenseId
     *
     * @return string
     */
    public function getLicenseId()
    {
        return $this->container['licenseId'];
    }

    /**
     * Sets licenseId
     *
     * @param string $licenseId A gryphon license number. Required if the dncSourceType is gryphon.
     *
     * @return $this
     */
    public function setLicenseId($licenseId)
    {
        $this->container['licenseId'] = $licenseId;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $division The division this DncList belongs to.
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


