<?php
/**
 * ActionInput
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ActionInput Class Doc Comment
 *
 * @category Class
 * @description Input requirements of Action.
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActionInput implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ActionInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inputSchema' => '\PureCloudPlatform\Client\V2\Model\JsonSchemaDocument',
        'inputSchemaFlattened' => '\PureCloudPlatform\Client\V2\Model\JsonSchemaDocument',
        'inputSchemaUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inputSchema' => null,
        'inputSchemaFlattened' => null,
        'inputSchemaUri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inputSchema' => 'inputSchema',
        'inputSchemaFlattened' => 'inputSchemaFlattened',
        'inputSchemaUri' => 'inputSchemaUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inputSchema' => 'setInputSchema',
        'inputSchemaFlattened' => 'setInputSchemaFlattened',
        'inputSchemaUri' => 'setInputSchemaUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inputSchema' => 'getInputSchema',
        'inputSchemaFlattened' => 'getInputSchemaFlattened',
        'inputSchemaUri' => 'getInputSchemaUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inputSchema'] = isset($data['inputSchema']) ? $data['inputSchema'] : null;
        $this->container['inputSchemaFlattened'] = isset($data['inputSchemaFlattened']) ? $data['inputSchemaFlattened'] : null;
        $this->container['inputSchemaUri'] = isset($data['inputSchemaUri']) ? $data['inputSchemaUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inputSchema
     *
     * @return \PureCloudPlatform\Client\V2\Model\JsonSchemaDocument
     */
    public function getInputSchema()
    {
        return $this->container['inputSchema'];
    }

    /**
     * Sets inputSchema
     *
     * @param \PureCloudPlatform\Client\V2\Model\JsonSchemaDocument $inputSchema JSON Schema that defines the body of the request that the client (edge/architect/postman) is sending to the service, on the /execute path. If the 'flatten' query parameter is omitted or false, this field will be returned. Either inputSchema or inputSchemaFlattened will be returned, not both.
     *
     * @return $this
     */
    public function setInputSchema($inputSchema)
    {
        $this->container['inputSchema'] = $inputSchema;

        return $this;
    }

    /**
     * Gets inputSchemaFlattened
     *
     * @return \PureCloudPlatform\Client\V2\Model\JsonSchemaDocument
     */
    public function getInputSchemaFlattened()
    {
        return $this->container['inputSchemaFlattened'];
    }

    /**
     * Sets inputSchemaFlattened
     *
     * @param \PureCloudPlatform\Client\V2\Model\JsonSchemaDocument $inputSchemaFlattened JSON Schema that defines the body of the request that the client (edge/architect/postman) is sending to the service, on the /execute path. The schema is transformed based on Architect's flattened format. If the 'flatten' query parameter is supplied as true, this field will be returned. Either inputSchema or inputSchemaFlattened will be returned, not both.
     *
     * @return $this
     */
    public function setInputSchemaFlattened($inputSchemaFlattened)
    {
        $this->container['inputSchemaFlattened'] = $inputSchemaFlattened;

        return $this;
    }

    /**
     * Gets inputSchemaUri
     *
     * @return string
     */
    public function getInputSchemaUri()
    {
        return $this->container['inputSchemaUri'];
    }

    /**
     * Sets inputSchemaUri
     *
     * @param string $inputSchemaUri The URI of the input schema
     *
     * @return $this
     */
    public function setInputSchemaUri($inputSchemaUri)
    {
        $this->container['inputSchemaUri'] = $inputSchemaUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


