<?php
/**
 * ReschedulingOptionsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * ReschedulingOptionsResponse Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReschedulingOptionsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReschedulingOptionsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'startDate' => '\DateTime',
        'endDate' => '\DateTime',
        'agentIds' => 'string[]',
        'activityCodeIds' => 'string[]',
        'doNotChangeWeeklyPaidTime' => 'bool',
        'doNotChangeDailyPaidTime' => 'bool',
        'doNotChangeShiftStartTimes' => 'bool',
        'doNotChangeManuallyEditedShifts' => 'bool',
        'existingScheduleId' => 'string',
        'existingScheduleVersion' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'startDate' => 'date-time',
        'endDate' => 'date-time',
        'agentIds' => null,
        'activityCodeIds' => null,
        'doNotChangeWeeklyPaidTime' => null,
        'doNotChangeDailyPaidTime' => null,
        'doNotChangeShiftStartTimes' => null,
        'doNotChangeManuallyEditedShifts' => null,
        'existingScheduleId' => null,
        'existingScheduleVersion' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'startDate' => 'startDate',
        'endDate' => 'endDate',
        'agentIds' => 'agentIds',
        'activityCodeIds' => 'activityCodeIds',
        'doNotChangeWeeklyPaidTime' => 'doNotChangeWeeklyPaidTime',
        'doNotChangeDailyPaidTime' => 'doNotChangeDailyPaidTime',
        'doNotChangeShiftStartTimes' => 'doNotChangeShiftStartTimes',
        'doNotChangeManuallyEditedShifts' => 'doNotChangeManuallyEditedShifts',
        'existingScheduleId' => 'existingScheduleId',
        'existingScheduleVersion' => 'existingScheduleVersion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'startDate' => 'setStartDate',
        'endDate' => 'setEndDate',
        'agentIds' => 'setAgentIds',
        'activityCodeIds' => 'setActivityCodeIds',
        'doNotChangeWeeklyPaidTime' => 'setDoNotChangeWeeklyPaidTime',
        'doNotChangeDailyPaidTime' => 'setDoNotChangeDailyPaidTime',
        'doNotChangeShiftStartTimes' => 'setDoNotChangeShiftStartTimes',
        'doNotChangeManuallyEditedShifts' => 'setDoNotChangeManuallyEditedShifts',
        'existingScheduleId' => 'setExistingScheduleId',
        'existingScheduleVersion' => 'setExistingScheduleVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'startDate' => 'getStartDate',
        'endDate' => 'getEndDate',
        'agentIds' => 'getAgentIds',
        'activityCodeIds' => 'getActivityCodeIds',
        'doNotChangeWeeklyPaidTime' => 'getDoNotChangeWeeklyPaidTime',
        'doNotChangeDailyPaidTime' => 'getDoNotChangeDailyPaidTime',
        'doNotChangeShiftStartTimes' => 'getDoNotChangeShiftStartTimes',
        'doNotChangeManuallyEditedShifts' => 'getDoNotChangeManuallyEditedShifts',
        'existingScheduleId' => 'getExistingScheduleId',
        'existingScheduleVersion' => 'getExistingScheduleVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['endDate'] = isset($data['endDate']) ? $data['endDate'] : null;
        $this->container['agentIds'] = isset($data['agentIds']) ? $data['agentIds'] : null;
        $this->container['activityCodeIds'] = isset($data['activityCodeIds']) ? $data['activityCodeIds'] : null;
        $this->container['doNotChangeWeeklyPaidTime'] = isset($data['doNotChangeWeeklyPaidTime']) ? $data['doNotChangeWeeklyPaidTime'] : null;
        $this->container['doNotChangeDailyPaidTime'] = isset($data['doNotChangeDailyPaidTime']) ? $data['doNotChangeDailyPaidTime'] : null;
        $this->container['doNotChangeShiftStartTimes'] = isset($data['doNotChangeShiftStartTimes']) ? $data['doNotChangeShiftStartTimes'] : null;
        $this->container['doNotChangeManuallyEditedShifts'] = isset($data['doNotChangeManuallyEditedShifts']) ? $data['doNotChangeManuallyEditedShifts'] : null;
        $this->container['existingScheduleId'] = isset($data['existingScheduleId']) ? $data['existingScheduleId'] : null;
        $this->container['existingScheduleVersion'] = isset($data['existingScheduleVersion']) ? $data['existingScheduleVersion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['startDate'] === null) {
            $invalidProperties[] = "'startDate' can't be null";
        }
        if ($this->container['endDate'] === null) {
            $invalidProperties[] = "'endDate' can't be null";
        }
        if ($this->container['doNotChangeWeeklyPaidTime'] === null) {
            $invalidProperties[] = "'doNotChangeWeeklyPaidTime' can't be null";
        }
        if ($this->container['doNotChangeDailyPaidTime'] === null) {
            $invalidProperties[] = "'doNotChangeDailyPaidTime' can't be null";
        }
        if ($this->container['doNotChangeShiftStartTimes'] === null) {
            $invalidProperties[] = "'doNotChangeShiftStartTimes' can't be null";
        }
        if ($this->container['doNotChangeManuallyEditedShifts'] === null) {
            $invalidProperties[] = "'doNotChangeManuallyEditedShifts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate The start date of the range to reschedule in ISO-8601 format
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets endDate
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['endDate'];
    }

    /**
     * Sets endDate
     *
     * @param \DateTime $endDate The end date of the range to reschedule in ISO-8601 format
     *
     * @return $this
     */
    public function setEndDate($endDate)
    {
        $this->container['endDate'] = $endDate;

        return $this;
    }

    /**
     * Gets agentIds
     *
     * @return string[]
     */
    public function getAgentIds()
    {
        return $this->container['agentIds'];
    }

    /**
     * Sets agentIds
     *
     * @param string[] $agentIds The IDs of the agents to reschedule.  Null or empty means all agents on the schedule
     *
     * @return $this
     */
    public function setAgentIds($agentIds)
    {
        $this->container['agentIds'] = $agentIds;

        return $this;
    }

    /**
     * Gets activityCodeIds
     *
     * @return string[]
     */
    public function getActivityCodeIds()
    {
        return $this->container['activityCodeIds'];
    }

    /**
     * Sets activityCodeIds
     *
     * @param string[] $activityCodeIds The IDs of the activity codes to reschedule. Null or empty means all activity codes will be considered
     *
     * @return $this
     */
    public function setActivityCodeIds($activityCodeIds)
    {
        $this->container['activityCodeIds'] = $activityCodeIds;

        return $this;
    }

    /**
     * Gets doNotChangeWeeklyPaidTime
     *
     * @return bool
     */
    public function getDoNotChangeWeeklyPaidTime()
    {
        return $this->container['doNotChangeWeeklyPaidTime'];
    }

    /**
     * Sets doNotChangeWeeklyPaidTime
     *
     * @param bool $doNotChangeWeeklyPaidTime Whether to prevent changes to weekly paid time
     *
     * @return $this
     */
    public function setDoNotChangeWeeklyPaidTime($doNotChangeWeeklyPaidTime)
    {
        $this->container['doNotChangeWeeklyPaidTime'] = $doNotChangeWeeklyPaidTime;

        return $this;
    }

    /**
     * Gets doNotChangeDailyPaidTime
     *
     * @return bool
     */
    public function getDoNotChangeDailyPaidTime()
    {
        return $this->container['doNotChangeDailyPaidTime'];
    }

    /**
     * Sets doNotChangeDailyPaidTime
     *
     * @param bool $doNotChangeDailyPaidTime Whether to prevent changes to daily paid time
     *
     * @return $this
     */
    public function setDoNotChangeDailyPaidTime($doNotChangeDailyPaidTime)
    {
        $this->container['doNotChangeDailyPaidTime'] = $doNotChangeDailyPaidTime;

        return $this;
    }

    /**
     * Gets doNotChangeShiftStartTimes
     *
     * @return bool
     */
    public function getDoNotChangeShiftStartTimes()
    {
        return $this->container['doNotChangeShiftStartTimes'];
    }

    /**
     * Sets doNotChangeShiftStartTimes
     *
     * @param bool $doNotChangeShiftStartTimes Whether to prevent changes to shift start times
     *
     * @return $this
     */
    public function setDoNotChangeShiftStartTimes($doNotChangeShiftStartTimes)
    {
        $this->container['doNotChangeShiftStartTimes'] = $doNotChangeShiftStartTimes;

        return $this;
    }

    /**
     * Gets doNotChangeManuallyEditedShifts
     *
     * @return bool
     */
    public function getDoNotChangeManuallyEditedShifts()
    {
        return $this->container['doNotChangeManuallyEditedShifts'];
    }

    /**
     * Sets doNotChangeManuallyEditedShifts
     *
     * @param bool $doNotChangeManuallyEditedShifts Whether to prevent changes to manually edited shifts
     *
     * @return $this
     */
    public function setDoNotChangeManuallyEditedShifts($doNotChangeManuallyEditedShifts)
    {
        $this->container['doNotChangeManuallyEditedShifts'] = $doNotChangeManuallyEditedShifts;

        return $this;
    }

    /**
     * Gets existingScheduleId
     *
     * @return string
     */
    public function getExistingScheduleId()
    {
        return $this->container['existingScheduleId'];
    }

    /**
     * Sets existingScheduleId
     *
     * @param string $existingScheduleId The schedule ID of the schedule to which the results will be applied
     *
     * @return $this
     */
    public function setExistingScheduleId($existingScheduleId)
    {
        $this->container['existingScheduleId'] = $existingScheduleId;

        return $this;
    }

    /**
     * Gets existingScheduleVersion
     *
     * @return int
     */
    public function getExistingScheduleVersion()
    {
        return $this->container['existingScheduleVersion'];
    }

    /**
     * Sets existingScheduleVersion
     *
     * @param int $existingScheduleVersion The version of the schedule at the time the rescheduling was initiated
     *
     * @return $this
     */
    public function setExistingScheduleVersion($existingScheduleVersion)
    {
        $this->container['existingScheduleVersion'] = $existingScheduleVersion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


