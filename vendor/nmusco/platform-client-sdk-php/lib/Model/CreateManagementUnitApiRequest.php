<?php
/**
 * CreateManagementUnitApiRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CreateManagementUnitApiRequest Class Doc Comment
 *
 * @category Class
 * @description Create Management Unit
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateManagementUnitApiRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateManagementUnitApiRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'timeZone' => 'string',
        'startDayOfWeek' => 'string',
        'settings' => '\PureCloudPlatform\Client\V2\Model\CreateManagementUnitSettings',
        'divisionId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'timeZone' => null,
        'startDayOfWeek' => null,
        'settings' => null,
        'divisionId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'timeZone' => 'timeZone',
        'startDayOfWeek' => 'startDayOfWeek',
        'settings' => 'settings',
        'divisionId' => 'divisionId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'timeZone' => 'setTimeZone',
        'startDayOfWeek' => 'setStartDayOfWeek',
        'settings' => 'setSettings',
        'divisionId' => 'setDivisionId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'timeZone' => 'getTimeZone',
        'startDayOfWeek' => 'getStartDayOfWeek',
        'settings' => 'getSettings',
        'divisionId' => 'getDivisionId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const START_DAY_OF_WEEK_SUNDAY = 'Sunday';
    const START_DAY_OF_WEEK_MONDAY = 'Monday';
    const START_DAY_OF_WEEK_TUESDAY = 'Tuesday';
    const START_DAY_OF_WEEK_WEDNESDAY = 'Wednesday';
    const START_DAY_OF_WEEK_THURSDAY = 'Thursday';
    const START_DAY_OF_WEEK_FRIDAY = 'Friday';
    const START_DAY_OF_WEEK_SATURDAY = 'Saturday';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartDayOfWeekAllowableValues()
    {
        return [
            self::START_DAY_OF_WEEK_SUNDAY,
            self::START_DAY_OF_WEEK_MONDAY,
            self::START_DAY_OF_WEEK_TUESDAY,
            self::START_DAY_OF_WEEK_WEDNESDAY,
            self::START_DAY_OF_WEEK_THURSDAY,
            self::START_DAY_OF_WEEK_FRIDAY,
            self::START_DAY_OF_WEEK_SATURDAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['timeZone'] = isset($data['timeZone']) ? $data['timeZone'] : null;
        $this->container['startDayOfWeek'] = isset($data['startDayOfWeek']) ? $data['startDayOfWeek'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['divisionId'] = isset($data['divisionId']) ? $data['divisionId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['timeZone'] === null) {
            $invalidProperties[] = "'timeZone' can't be null";
        }
        if ($this->container['startDayOfWeek'] === null) {
            $invalidProperties[] = "'startDayOfWeek' can't be null";
        }
        $allowedValues = $this->getStartDayOfWeekAllowableValues();
        if (!is_null($this->container['startDayOfWeek']) && !in_array($this->container['startDayOfWeek'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'startDayOfWeek', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the management unit
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timeZone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['timeZone'];
    }

    /**
     * Sets timeZone
     *
     * @param string $timeZone The default time zone to use for this management unit
     *
     * @return $this
     */
    public function setTimeZone($timeZone)
    {
        $this->container['timeZone'] = $timeZone;

        return $this;
    }

    /**
     * Gets startDayOfWeek
     *
     * @return string
     */
    public function getStartDayOfWeek()
    {
        return $this->container['startDayOfWeek'];
    }

    /**
     * Sets startDayOfWeek
     *
     * @param string $startDayOfWeek The configured first day of the week for scheduling and forecasting purposes
     *
     * @return $this
     */
    public function setStartDayOfWeek($startDayOfWeek)
    {
        $allowedValues = $this->getStartDayOfWeekAllowableValues();
        if (!in_array($startDayOfWeek, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'startDayOfWeek', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['startDayOfWeek'] = $startDayOfWeek;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \PureCloudPlatform\Client\V2\Model\CreateManagementUnitSettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \PureCloudPlatform\Client\V2\Model\CreateManagementUnitSettings $settings The configuration for the management unit.  If omitted, reasonable defaults will be assigned
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets divisionId
     *
     * @return string
     */
    public function getDivisionId()
    {
        return $this->container['divisionId'];
    }

    /**
     * Sets divisionId
     *
     * @param string $divisionId The id of the division to which this management unit belongs.  Defaults to home division ID
     *
     * @return $this
     */
    public function setDivisionId($divisionId)
    {
        $this->container['divisionId'] = $divisionId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


