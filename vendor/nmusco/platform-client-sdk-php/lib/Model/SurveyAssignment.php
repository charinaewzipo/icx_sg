<?php
/**
 * SurveyAssignment
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * SurveyAssignment Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SurveyAssignment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SurveyAssignment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'surveyForm' => '\PureCloudPlatform\Client\V2\Model\PublishedSurveyFormReference',
        'flow' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'inviteTimeInterval' => 'string',
        'sendingUser' => 'string',
        'sendingDomain' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'surveyForm' => null,
        'flow' => null,
        'inviteTimeInterval' => null,
        'sendingUser' => null,
        'sendingDomain' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'surveyForm' => 'surveyForm',
        'flow' => 'flow',
        'inviteTimeInterval' => 'inviteTimeInterval',
        'sendingUser' => 'sendingUser',
        'sendingDomain' => 'sendingDomain'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'surveyForm' => 'setSurveyForm',
        'flow' => 'setFlow',
        'inviteTimeInterval' => 'setInviteTimeInterval',
        'sendingUser' => 'setSendingUser',
        'sendingDomain' => 'setSendingDomain'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'surveyForm' => 'getSurveyForm',
        'flow' => 'getFlow',
        'inviteTimeInterval' => 'getInviteTimeInterval',
        'sendingUser' => 'getSendingUser',
        'sendingDomain' => 'getSendingDomain'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['surveyForm'] = isset($data['surveyForm']) ? $data['surveyForm'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['inviteTimeInterval'] = isset($data['inviteTimeInterval']) ? $data['inviteTimeInterval'] : null;
        $this->container['sendingUser'] = isset($data['sendingUser']) ? $data['sendingUser'] : null;
        $this->container['sendingDomain'] = isset($data['sendingDomain']) ? $data['sendingDomain'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sendingDomain'] === null) {
            $invalidProperties[] = "'sendingDomain' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets surveyForm
     *
     * @return \PureCloudPlatform\Client\V2\Model\PublishedSurveyFormReference
     */
    public function getSurveyForm()
    {
        return $this->container['surveyForm'];
    }

    /**
     * Sets surveyForm
     *
     * @param \PureCloudPlatform\Client\V2\Model\PublishedSurveyFormReference $surveyForm The survey form used for this survey.
     *
     * @return $this
     */
    public function setSurveyForm($surveyForm)
    {
        $this->container['surveyForm'] = $surveyForm;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $flow The URI reference to the flow associated with this survey.
     *
     * @return $this
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets inviteTimeInterval
     *
     * @return string
     */
    public function getInviteTimeInterval()
    {
        return $this->container['inviteTimeInterval'];
    }

    /**
     * Sets inviteTimeInterval
     *
     * @param string $inviteTimeInterval An ISO 8601 repeated interval consisting of the number of repetitions, the start datetime, and the interval (e.g. R2/2018-03-01T13:00:00Z/P1M10DT2H30M). Total duration must not exceed 90 days.
     *
     * @return $this
     */
    public function setInviteTimeInterval($inviteTimeInterval)
    {
        $this->container['inviteTimeInterval'] = $inviteTimeInterval;

        return $this;
    }

    /**
     * Gets sendingUser
     *
     * @return string
     */
    public function getSendingUser()
    {
        return $this->container['sendingUser'];
    }

    /**
     * Sets sendingUser
     *
     * @param string $sendingUser User together with sendingDomain used to send email, null to use no-reply
     *
     * @return $this
     */
    public function setSendingUser($sendingUser)
    {
        $this->container['sendingUser'] = $sendingUser;

        return $this;
    }

    /**
     * Gets sendingDomain
     *
     * @return string
     */
    public function getSendingDomain()
    {
        return $this->container['sendingDomain'];
    }

    /**
     * Sets sendingDomain
     *
     * @param string $sendingDomain Validated email domain, required
     *
     * @return $this
     */
    public function setSendingDomain($sendingDomain)
    {
        $this->container['sendingDomain'] = $sendingDomain;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


