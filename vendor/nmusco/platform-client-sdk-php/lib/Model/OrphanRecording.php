<?php
/**
 * OrphanRecording
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * OrphanRecording Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrphanRecording implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrphanRecording';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'createdTime' => '\DateTime',
        'recoveredTime' => '\DateTime',
        'providerType' => 'string',
        'mediaSizeBytes' => 'int',
        'mediaType' => 'string',
        'fileState' => 'string',
        'providerEndpoint' => '\PureCloudPlatform\Client\V2\Model\Endpoint',
        'recording' => '\PureCloudPlatform\Client\V2\Model\Recording',
        'orphanStatus' => 'string',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'createdTime' => 'date-time',
        'recoveredTime' => 'date-time',
        'providerType' => null,
        'mediaSizeBytes' => 'int64',
        'mediaType' => null,
        'fileState' => null,
        'providerEndpoint' => null,
        'recording' => null,
        'orphanStatus' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'createdTime' => 'createdTime',
        'recoveredTime' => 'recoveredTime',
        'providerType' => 'providerType',
        'mediaSizeBytes' => 'mediaSizeBytes',
        'mediaType' => 'mediaType',
        'fileState' => 'fileState',
        'providerEndpoint' => 'providerEndpoint',
        'recording' => 'recording',
        'orphanStatus' => 'orphanStatus',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'createdTime' => 'setCreatedTime',
        'recoveredTime' => 'setRecoveredTime',
        'providerType' => 'setProviderType',
        'mediaSizeBytes' => 'setMediaSizeBytes',
        'mediaType' => 'setMediaType',
        'fileState' => 'setFileState',
        'providerEndpoint' => 'setProviderEndpoint',
        'recording' => 'setRecording',
        'orphanStatus' => 'setOrphanStatus',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'createdTime' => 'getCreatedTime',
        'recoveredTime' => 'getRecoveredTime',
        'providerType' => 'getProviderType',
        'mediaSizeBytes' => 'getMediaSizeBytes',
        'mediaType' => 'getMediaType',
        'fileState' => 'getFileState',
        'providerEndpoint' => 'getProviderEndpoint',
        'recording' => 'getRecording',
        'orphanStatus' => 'getOrphanStatus',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROVIDER_TYPE_EDGE = 'EDGE';
    const PROVIDER_TYPE_CHAT = 'CHAT';
    const PROVIDER_TYPE_EMAIL = 'EMAIL';
    const PROVIDER_TYPE_SCREEN_RECORDING = 'SCREEN_RECORDING';
    const MEDIA_TYPE_CALL = 'CALL';
    const MEDIA_TYPE_CHAT = 'CHAT';
    const MEDIA_TYPE_EMAIL = 'EMAIL';
    const MEDIA_TYPE_SCREEN = 'SCREEN';
    const FILE_STATE_ARCHIVED = 'ARCHIVED';
    const FILE_STATE_AVAILABLE = 'AVAILABLE';
    const FILE_STATE_DELETED = 'DELETED';
    const FILE_STATE_RESTORED = 'RESTORED';
    const FILE_STATE_RESTORING = 'RESTORING';
    const FILE_STATE_UPLOADING = 'UPLOADING';
    const ORPHAN_STATUS_NO_CONVERSATION = 'NO_CONVERSATION';
    const ORPHAN_STATUS_UNKNOWN_CONVERSATION = 'UNKNOWN_CONVERSATION';
    const ORPHAN_STATUS_CONVERSATION_NOT_COMPLETE = 'CONVERSATION_NOT_COMPLETE';
    const ORPHAN_STATUS_CONVERSATION_NOT_EVALUATED = 'CONVERSATION_NOT_EVALUATED';
    const ORPHAN_STATUS_EVALUATED = 'EVALUATED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProviderTypeAllowableValues()
    {
        return [
            self::PROVIDER_TYPE_EDGE,
            self::PROVIDER_TYPE_CHAT,
            self::PROVIDER_TYPE_EMAIL,
            self::PROVIDER_TYPE_SCREEN_RECORDING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaTypeAllowableValues()
    {
        return [
            self::MEDIA_TYPE_CALL,
            self::MEDIA_TYPE_CHAT,
            self::MEDIA_TYPE_EMAIL,
            self::MEDIA_TYPE_SCREEN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFileStateAllowableValues()
    {
        return [
            self::FILE_STATE_ARCHIVED,
            self::FILE_STATE_AVAILABLE,
            self::FILE_STATE_DELETED,
            self::FILE_STATE_RESTORED,
            self::FILE_STATE_RESTORING,
            self::FILE_STATE_UPLOADING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrphanStatusAllowableValues()
    {
        return [
            self::ORPHAN_STATUS_NO_CONVERSATION,
            self::ORPHAN_STATUS_UNKNOWN_CONVERSATION,
            self::ORPHAN_STATUS_CONVERSATION_NOT_COMPLETE,
            self::ORPHAN_STATUS_CONVERSATION_NOT_EVALUATED,
            self::ORPHAN_STATUS_EVALUATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['createdTime'] = isset($data['createdTime']) ? $data['createdTime'] : null;
        $this->container['recoveredTime'] = isset($data['recoveredTime']) ? $data['recoveredTime'] : null;
        $this->container['providerType'] = isset($data['providerType']) ? $data['providerType'] : null;
        $this->container['mediaSizeBytes'] = isset($data['mediaSizeBytes']) ? $data['mediaSizeBytes'] : null;
        $this->container['mediaType'] = isset($data['mediaType']) ? $data['mediaType'] : null;
        $this->container['fileState'] = isset($data['fileState']) ? $data['fileState'] : null;
        $this->container['providerEndpoint'] = isset($data['providerEndpoint']) ? $data['providerEndpoint'] : null;
        $this->container['recording'] = isset($data['recording']) ? $data['recording'] : null;
        $this->container['orphanStatus'] = isset($data['orphanStatus']) ? $data['orphanStatus'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getProviderTypeAllowableValues();
        if (!is_null($this->container['providerType']) && !in_array($this->container['providerType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'providerType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMediaTypeAllowableValues();
        if (!is_null($this->container['mediaType']) && !in_array($this->container['mediaType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mediaType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFileStateAllowableValues();
        if (!is_null($this->container['fileState']) && !in_array($this->container['fileState'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fileState', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrphanStatusAllowableValues();
        if (!is_null($this->container['orphanStatus']) && !in_array($this->container['orphanStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'orphanStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets createdTime
     *
     * @return \DateTime
     */
    public function getCreatedTime()
    {
        return $this->container['createdTime'];
    }

    /**
     * Sets createdTime
     *
     * @param \DateTime $createdTime Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setCreatedTime($createdTime)
    {
        $this->container['createdTime'] = $createdTime;

        return $this;
    }

    /**
     * Gets recoveredTime
     *
     * @return \DateTime
     */
    public function getRecoveredTime()
    {
        return $this->container['recoveredTime'];
    }

    /**
     * Sets recoveredTime
     *
     * @param \DateTime $recoveredTime Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setRecoveredTime($recoveredTime)
    {
        $this->container['recoveredTime'] = $recoveredTime;

        return $this;
    }

    /**
     * Gets providerType
     *
     * @return string
     */
    public function getProviderType()
    {
        return $this->container['providerType'];
    }

    /**
     * Sets providerType
     *
     * @param string $providerType providerType
     *
     * @return $this
     */
    public function setProviderType($providerType)
    {
        $allowedValues = $this->getProviderTypeAllowableValues();
        if (!is_null($providerType) && !in_array($providerType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'providerType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['providerType'] = $providerType;

        return $this;
    }

    /**
     * Gets mediaSizeBytes
     *
     * @return int
     */
    public function getMediaSizeBytes()
    {
        return $this->container['mediaSizeBytes'];
    }

    /**
     * Sets mediaSizeBytes
     *
     * @param int $mediaSizeBytes mediaSizeBytes
     *
     * @return $this
     */
    public function setMediaSizeBytes($mediaSizeBytes)
    {
        $this->container['mediaSizeBytes'] = $mediaSizeBytes;

        return $this;
    }

    /**
     * Gets mediaType
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['mediaType'];
    }

    /**
     * Sets mediaType
     *
     * @param string $mediaType mediaType
     *
     * @return $this
     */
    public function setMediaType($mediaType)
    {
        $allowedValues = $this->getMediaTypeAllowableValues();
        if (!is_null($mediaType) && !in_array($mediaType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mediaType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaType'] = $mediaType;

        return $this;
    }

    /**
     * Gets fileState
     *
     * @return string
     */
    public function getFileState()
    {
        return $this->container['fileState'];
    }

    /**
     * Sets fileState
     *
     * @param string $fileState fileState
     *
     * @return $this
     */
    public function setFileState($fileState)
    {
        $allowedValues = $this->getFileStateAllowableValues();
        if (!is_null($fileState) && !in_array($fileState, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fileState', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fileState'] = $fileState;

        return $this;
    }

    /**
     * Gets providerEndpoint
     *
     * @return \PureCloudPlatform\Client\V2\Model\Endpoint
     */
    public function getProviderEndpoint()
    {
        return $this->container['providerEndpoint'];
    }

    /**
     * Sets providerEndpoint
     *
     * @param \PureCloudPlatform\Client\V2\Model\Endpoint $providerEndpoint providerEndpoint
     *
     * @return $this
     */
    public function setProviderEndpoint($providerEndpoint)
    {
        $this->container['providerEndpoint'] = $providerEndpoint;

        return $this;
    }

    /**
     * Gets recording
     *
     * @return \PureCloudPlatform\Client\V2\Model\Recording
     */
    public function getRecording()
    {
        return $this->container['recording'];
    }

    /**
     * Sets recording
     *
     * @param \PureCloudPlatform\Client\V2\Model\Recording $recording recording
     *
     * @return $this
     */
    public function setRecording($recording)
    {
        $this->container['recording'] = $recording;

        return $this;
    }

    /**
     * Gets orphanStatus
     *
     * @return string
     */
    public function getOrphanStatus()
    {
        return $this->container['orphanStatus'];
    }

    /**
     * Sets orphanStatus
     *
     * @param string $orphanStatus The status of the orphaned recording's conversation.
     *
     * @return $this
     */
    public function setOrphanStatus($orphanStatus)
    {
        $allowedValues = $this->getOrphanStatusAllowableValues();
        if (!is_null($orphanStatus) && !in_array($orphanStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'orphanStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orphanStatus'] = $orphanStatus;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


