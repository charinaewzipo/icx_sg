<?php
/**
 * CampaignRule
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CampaignRule Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignRule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'dateCreated' => '\DateTime',
        'dateModified' => '\DateTime',
        'version' => 'int',
        'campaignRuleEntities' => '\PureCloudPlatform\Client\V2\Model\CampaignRuleEntities',
        'campaignRuleConditions' => '\PureCloudPlatform\Client\V2\Model\CampaignRuleCondition[]',
        'campaignRuleActions' => '\PureCloudPlatform\Client\V2\Model\CampaignRuleAction[]',
        'matchAnyConditions' => 'bool',
        'enabled' => 'bool',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'dateCreated' => 'date-time',
        'dateModified' => 'date-time',
        'version' => 'int32',
        'campaignRuleEntities' => null,
        'campaignRuleConditions' => null,
        'campaignRuleActions' => null,
        'matchAnyConditions' => null,
        'enabled' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'dateCreated' => 'dateCreated',
        'dateModified' => 'dateModified',
        'version' => 'version',
        'campaignRuleEntities' => 'campaignRuleEntities',
        'campaignRuleConditions' => 'campaignRuleConditions',
        'campaignRuleActions' => 'campaignRuleActions',
        'matchAnyConditions' => 'matchAnyConditions',
        'enabled' => 'enabled',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'dateCreated' => 'setDateCreated',
        'dateModified' => 'setDateModified',
        'version' => 'setVersion',
        'campaignRuleEntities' => 'setCampaignRuleEntities',
        'campaignRuleConditions' => 'setCampaignRuleConditions',
        'campaignRuleActions' => 'setCampaignRuleActions',
        'matchAnyConditions' => 'setMatchAnyConditions',
        'enabled' => 'setEnabled',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'dateCreated' => 'getDateCreated',
        'dateModified' => 'getDateModified',
        'version' => 'getVersion',
        'campaignRuleEntities' => 'getCampaignRuleEntities',
        'campaignRuleConditions' => 'getCampaignRuleConditions',
        'campaignRuleActions' => 'getCampaignRuleActions',
        'matchAnyConditions' => 'getMatchAnyConditions',
        'enabled' => 'getEnabled',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['dateCreated'] = isset($data['dateCreated']) ? $data['dateCreated'] : null;
        $this->container['dateModified'] = isset($data['dateModified']) ? $data['dateModified'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['campaignRuleEntities'] = isset($data['campaignRuleEntities']) ? $data['campaignRuleEntities'] : null;
        $this->container['campaignRuleConditions'] = isset($data['campaignRuleConditions']) ? $data['campaignRuleConditions'] : null;
        $this->container['campaignRuleActions'] = isset($data['campaignRuleActions']) ? $data['campaignRuleActions'] : null;
        $this->container['matchAnyConditions'] = isset($data['matchAnyConditions']) ? $data['matchAnyConditions'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['campaignRuleEntities'] === null) {
            $invalidProperties[] = "'campaignRuleEntities' can't be null";
        }
        if ($this->container['campaignRuleConditions'] === null) {
            $invalidProperties[] = "'campaignRuleConditions' can't be null";
        }
        if ($this->container['campaignRuleActions'] === null) {
            $invalidProperties[] = "'campaignRuleActions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the CampaignRule.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param \DateTime $dateCreated Creation time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateCreated($dateCreated)
    {
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets dateModified
     *
     * @return \DateTime
     */
    public function getDateModified()
    {
        return $this->container['dateModified'];
    }

    /**
     * Sets dateModified
     *
     * @param \DateTime $dateModified Last modified time of the entity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setDateModified($dateModified)
    {
        $this->container['dateModified'] = $dateModified;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version Required for updates, must match the version number of the most recent update
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets campaignRuleEntities
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignRuleEntities
     */
    public function getCampaignRuleEntities()
    {
        return $this->container['campaignRuleEntities'];
    }

    /**
     * Sets campaignRuleEntities
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignRuleEntities $campaignRuleEntities The list of entities that this CampaignRule monitors.
     *
     * @return $this
     */
    public function setCampaignRuleEntities($campaignRuleEntities)
    {
        $this->container['campaignRuleEntities'] = $campaignRuleEntities;

        return $this;
    }

    /**
     * Gets campaignRuleConditions
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignRuleCondition[]
     */
    public function getCampaignRuleConditions()
    {
        return $this->container['campaignRuleConditions'];
    }

    /**
     * Sets campaignRuleConditions
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignRuleCondition[] $campaignRuleConditions The list of conditions that are evaluated on the entities.
     *
     * @return $this
     */
    public function setCampaignRuleConditions($campaignRuleConditions)
    {
        $this->container['campaignRuleConditions'] = $campaignRuleConditions;

        return $this;
    }

    /**
     * Gets campaignRuleActions
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignRuleAction[]
     */
    public function getCampaignRuleActions()
    {
        return $this->container['campaignRuleActions'];
    }

    /**
     * Sets campaignRuleActions
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignRuleAction[] $campaignRuleActions The list of actions that are executed if the conditions are satisfied.
     *
     * @return $this
     */
    public function setCampaignRuleActions($campaignRuleActions)
    {
        $this->container['campaignRuleActions'] = $campaignRuleActions;

        return $this;
    }

    /**
     * Gets matchAnyConditions
     *
     * @return bool
     */
    public function getMatchAnyConditions()
    {
        return $this->container['matchAnyConditions'];
    }

    /**
     * Sets matchAnyConditions
     *
     * @param bool $matchAnyConditions matchAnyConditions
     *
     * @return $this
     */
    public function setMatchAnyConditions($matchAnyConditions)
    {
        $this->container['matchAnyConditions'] = $matchAnyConditions;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether or not this CampaignRule is currently enabled. Required on updates.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


