<?php
/**
 * Condition
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * Condition Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Condition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Condition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'inverted' => 'bool',
        'attributeName' => 'string',
        'value' => 'string',
        'valueType' => 'string',
        'operator' => 'string',
        'codes' => 'string[]',
        'property' => 'string',
        'propertyType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'inverted' => null,
        'attributeName' => null,
        'value' => null,
        'valueType' => null,
        'operator' => null,
        'codes' => null,
        'property' => null,
        'propertyType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'inverted' => 'inverted',
        'attributeName' => 'attributeName',
        'value' => 'value',
        'valueType' => 'valueType',
        'operator' => 'operator',
        'codes' => 'codes',
        'property' => 'property',
        'propertyType' => 'propertyType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'inverted' => 'setInverted',
        'attributeName' => 'setAttributeName',
        'value' => 'setValue',
        'valueType' => 'setValueType',
        'operator' => 'setOperator',
        'codes' => 'setCodes',
        'property' => 'setProperty',
        'propertyType' => 'setPropertyType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'inverted' => 'getInverted',
        'attributeName' => 'getAttributeName',
        'value' => 'getValue',
        'valueType' => 'getValueType',
        'operator' => 'getOperator',
        'codes' => 'getCodes',
        'property' => 'getProperty',
        'propertyType' => 'getPropertyType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_WRAPUP_CONDITION = 'wrapupCondition';
    const TYPE_CONTACT_ATTRIBUTE_CONDITION = 'contactAttributeCondition';
    const TYPE_PHONE_NUMBER_CONDITION = 'phoneNumberCondition';
    const TYPE_PHONE_NUMBER_TYPE_CONDITION = 'phoneNumberTypeCondition';
    const TYPE_CALL_ANALYSIS_CONDITION = 'callAnalysisCondition';
    const TYPE_CONTACT_PROPERTY_CONDITION = 'contactPropertyCondition';
    const TYPE_DATA_ACTION_CONDITION = 'dataActionCondition';
    const VALUE_TYPE_STRING = 'STRING';
    const VALUE_TYPE_NUMERIC = 'NUMERIC';
    const VALUE_TYPE_DATETIME = 'DATETIME';
    const VALUE_TYPE_PERIOD = 'PERIOD';
    const OPERATOR_EQUALS = 'EQUALS';
    const OPERATOR_LESS_THAN = 'LESS_THAN';
    const OPERATOR_LESS_THAN_EQUALS = 'LESS_THAN_EQUALS';
    const OPERATOR_GREATER_THAN = 'GREATER_THAN';
    const OPERATOR_GREATER_THAN_EQUALS = 'GREATER_THAN_EQUALS';
    const OPERATOR_CONTAINS = 'CONTAINS';
    const OPERATOR_BEGINS_WITH = 'BEGINS_WITH';
    const OPERATOR_ENDS_WITH = 'ENDS_WITH';
    const OPERATOR_BEFORE = 'BEFORE';
    const OPERATOR_AFTER = 'AFTER';
    const OPERATOR_IN = 'IN';
    const PROPERTY_TYPE_ATTEMPT_BY_COLUMN = 'LAST_ATTEMPT_BY_COLUMN';
    const PROPERTY_TYPE_ATTEMPT_OVERALL = 'LAST_ATTEMPT_OVERALL';
    const PROPERTY_TYPE_WRAPUP_BY_COLUMN = 'LAST_WRAPUP_BY_COLUMN';
    const PROPERTY_TYPE_WRAPUP_OVERALL = 'LAST_WRAPUP_OVERALL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_WRAPUP_CONDITION,
            self::TYPE_CONTACT_ATTRIBUTE_CONDITION,
            self::TYPE_PHONE_NUMBER_CONDITION,
            self::TYPE_PHONE_NUMBER_TYPE_CONDITION,
            self::TYPE_CALL_ANALYSIS_CONDITION,
            self::TYPE_CONTACT_PROPERTY_CONDITION,
            self::TYPE_DATA_ACTION_CONDITION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValueTypeAllowableValues()
    {
        return [
            self::VALUE_TYPE_STRING,
            self::VALUE_TYPE_NUMERIC,
            self::VALUE_TYPE_DATETIME,
            self::VALUE_TYPE_PERIOD,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_EQUALS,
            self::OPERATOR_LESS_THAN,
            self::OPERATOR_LESS_THAN_EQUALS,
            self::OPERATOR_GREATER_THAN,
            self::OPERATOR_GREATER_THAN_EQUALS,
            self::OPERATOR_CONTAINS,
            self::OPERATOR_BEGINS_WITH,
            self::OPERATOR_ENDS_WITH,
            self::OPERATOR_BEFORE,
            self::OPERATOR_AFTER,
            self::OPERATOR_IN,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPropertyTypeAllowableValues()
    {
        return [
            self::PROPERTY_TYPE_ATTEMPT_BY_COLUMN,
            self::PROPERTY_TYPE_ATTEMPT_OVERALL,
            self::PROPERTY_TYPE_WRAPUP_BY_COLUMN,
            self::PROPERTY_TYPE_WRAPUP_OVERALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['inverted'] = isset($data['inverted']) ? $data['inverted'] : null;
        $this->container['attributeName'] = isset($data['attributeName']) ? $data['attributeName'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['valueType'] = isset($data['valueType']) ? $data['valueType'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['codes'] = isset($data['codes']) ? $data['codes'] : null;
        $this->container['property'] = isset($data['property']) ? $data['property'] : null;
        $this->container['propertyType'] = isset($data['propertyType']) ? $data['propertyType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($this->container['valueType']) && !in_array($this->container['valueType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'valueType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($this->container['propertyType']) && !in_array($this->container['propertyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'propertyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of the condition.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets inverted
     *
     * @return bool
     */
    public function getInverted()
    {
        return $this->container['inverted'];
    }

    /**
     * Sets inverted
     *
     * @param bool $inverted If true, inverts the result of evaluating this Condition. Default is false.
     *
     * @return $this
     */
    public function setInverted($inverted)
    {
        $this->container['inverted'] = $inverted;

        return $this;
    }

    /**
     * Gets attributeName
     *
     * @return string
     */
    public function getAttributeName()
    {
        return $this->container['attributeName'];
    }

    /**
     * Sets attributeName
     *
     * @param string $attributeName An attribute name associated with this Condition. Required for a contactAttributeCondition.
     *
     * @return $this
     */
    public function setAttributeName($attributeName)
    {
        $this->container['attributeName'] = $attributeName;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value A value associated with this Condition. This could be text, a number, or a relative time. Not used for a DataActionCondition.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets valueType
     *
     * @return string
     */
    public function getValueType()
    {
        return $this->container['valueType'];
    }

    /**
     * Sets valueType
     *
     * @param string $valueType The type of the value associated with this Condition. Not used for a DataActionCondition.
     *
     * @return $this
     */
    public function setValueType($valueType)
    {
        $allowedValues = $this->getValueTypeAllowableValues();
        if (!is_null($valueType) && !in_array($valueType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'valueType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['valueType'] = $valueType;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator An operation with which to evaluate the Condition. Not used for a DataActionCondition.
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($operator) && !in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets codes
     *
     * @return string[]
     */
    public function getCodes()
    {
        return $this->container['codes'];
    }

    /**
     * Sets codes
     *
     * @param string[] $codes List of wrap-up code identifiers. Required for a wrapupCondition.
     *
     * @return $this
     */
    public function setCodes($codes)
    {
        $this->container['codes'] = $codes;

        return $this;
    }

    /**
     * Gets property
     *
     * @return string
     */
    public function getProperty()
    {
        return $this->container['property'];
    }

    /**
     * Sets property
     *
     * @param string $property A value associated with the property type of this Condition. Required for a contactPropertyCondition.
     *
     * @return $this
     */
    public function setProperty($property)
    {
        $this->container['property'] = $property;

        return $this;
    }

    /**
     * Gets propertyType
     *
     * @return string
     */
    public function getPropertyType()
    {
        return $this->container['propertyType'];
    }

    /**
     * Sets propertyType
     *
     * @param string $propertyType The type of the property associated with this Condition. Required for a contactPropertyCondition.
     *
     * @return $this
     */
    public function setPropertyType($propertyType)
    {
        $allowedValues = $this->getPropertyTypeAllowableValues();
        if (!is_null($propertyType) && !in_array($propertyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'propertyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['propertyType'] = $propertyType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


