<?php
/**
 * FacetEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * FacetEntry Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FacetEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FacetEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attribute' => '\PureCloudPlatform\Client\V2\Model\TermAttribute',
        'statistics' => '\PureCloudPlatform\Client\V2\Model\FacetStatistics',
        'other' => 'int',
        'total' => 'int',
        'missing' => 'int',
        'termCount' => 'int',
        'termType' => 'string',
        'terms' => '\PureCloudPlatform\Client\V2\Model\FacetTerm[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attribute' => null,
        'statistics' => null,
        'other' => 'int64',
        'total' => 'int64',
        'missing' => 'int64',
        'termCount' => 'int32',
        'termType' => null,
        'terms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attribute' => 'attribute',
        'statistics' => 'statistics',
        'other' => 'other',
        'total' => 'total',
        'missing' => 'missing',
        'termCount' => 'termCount',
        'termType' => 'termType',
        'terms' => 'terms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attribute' => 'setAttribute',
        'statistics' => 'setStatistics',
        'other' => 'setOther',
        'total' => 'setTotal',
        'missing' => 'setMissing',
        'termCount' => 'setTermCount',
        'termType' => 'setTermType',
        'terms' => 'setTerms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attribute' => 'getAttribute',
        'statistics' => 'getStatistics',
        'other' => 'getOther',
        'total' => 'getTotal',
        'missing' => 'getMissing',
        'termCount' => 'getTermCount',
        'termType' => 'getTermType',
        'terms' => 'getTerms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TERM_TYPE_TERM = 'TERM';
    const TERM_TYPE_NUMBERRANGE = 'NUMBERRANGE';
    const TERM_TYPE_NUMBERHISTOGRAM = 'NUMBERHISTOGRAM';
    const TERM_TYPE_DATERANGE = 'DATERANGE';
    const TERM_TYPE_DATEHISTOGRAM = 'DATEHISTOGRAM';
    const TERM_TYPE_ID = 'ID';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTermTypeAllowableValues()
    {
        return [
            self::TERM_TYPE_TERM,
            self::TERM_TYPE_NUMBERRANGE,
            self::TERM_TYPE_NUMBERHISTOGRAM,
            self::TERM_TYPE_DATERANGE,
            self::TERM_TYPE_DATEHISTOGRAM,
            self::TERM_TYPE_ID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attribute'] = isset($data['attribute']) ? $data['attribute'] : null;
        $this->container['statistics'] = isset($data['statistics']) ? $data['statistics'] : null;
        $this->container['other'] = isset($data['other']) ? $data['other'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['missing'] = isset($data['missing']) ? $data['missing'] : null;
        $this->container['termCount'] = isset($data['termCount']) ? $data['termCount'] : null;
        $this->container['termType'] = isset($data['termType']) ? $data['termType'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTermTypeAllowableValues();
        if (!is_null($this->container['termType']) && !in_array($this->container['termType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'termType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attribute
     *
     * @return \PureCloudPlatform\Client\V2\Model\TermAttribute
     */
    public function getAttribute()
    {
        return $this->container['attribute'];
    }

    /**
     * Sets attribute
     *
     * @param \PureCloudPlatform\Client\V2\Model\TermAttribute $attribute attribute
     *
     * @return $this
     */
    public function setAttribute($attribute)
    {
        $this->container['attribute'] = $attribute;

        return $this;
    }

    /**
     * Gets statistics
     *
     * @return \PureCloudPlatform\Client\V2\Model\FacetStatistics
     */
    public function getStatistics()
    {
        return $this->container['statistics'];
    }

    /**
     * Sets statistics
     *
     * @param \PureCloudPlatform\Client\V2\Model\FacetStatistics $statistics statistics
     *
     * @return $this
     */
    public function setStatistics($statistics)
    {
        $this->container['statistics'] = $statistics;

        return $this;
    }

    /**
     * Gets other
     *
     * @return int
     */
    public function getOther()
    {
        return $this->container['other'];
    }

    /**
     * Sets other
     *
     * @param int $other other
     *
     * @return $this
     */
    public function setOther($other)
    {
        $this->container['other'] = $other;

        return $this;
    }

    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets missing
     *
     * @return int
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     *
     * @param int $missing missing
     *
     * @return $this
     */
    public function setMissing($missing)
    {
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets termCount
     *
     * @return int
     */
    public function getTermCount()
    {
        return $this->container['termCount'];
    }

    /**
     * Sets termCount
     *
     * @param int $termCount termCount
     *
     * @return $this
     */
    public function setTermCount($termCount)
    {
        $this->container['termCount'] = $termCount;

        return $this;
    }

    /**
     * Gets termType
     *
     * @return string
     */
    public function getTermType()
    {
        return $this->container['termType'];
    }

    /**
     * Sets termType
     *
     * @param string $termType termType
     *
     * @return $this
     */
    public function setTermType($termType)
    {
        $allowedValues = $this->getTermTypeAllowableValues();
        if (!is_null($termType) && !in_array($termType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'termType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['termType'] = $termType;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \PureCloudPlatform\Client\V2\Model\FacetTerm[]
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \PureCloudPlatform\Client\V2\Model\FacetTerm[] $terms terms
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


