<?php
/**
 * IntradayDataGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * IntradayDataGroup Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IntradayDataGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IntradayDataGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mediaType' => 'string',
        'forecastDataPerInterval' => '\PureCloudPlatform\Client\V2\Model\IntradayForecastData[]',
        'scheduleDataPerInterval' => '\PureCloudPlatform\Client\V2\Model\IntradayScheduleData[]',
        'historicalAgentDataPerInterval' => '\PureCloudPlatform\Client\V2\Model\IntradayHistoricalAgentData[]',
        'historicalQueueDataPerInterval' => '\PureCloudPlatform\Client\V2\Model\IntradayHistoricalQueueData[]',
        'performancePredictionAgentDataPerInterval' => '\PureCloudPlatform\Client\V2\Model\IntradayPerformancePredictionAgentData[]',
        'performancePredictionQueueDataPerInterval' => '\PureCloudPlatform\Client\V2\Model\IntradayPerformancePredictionQueueData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mediaType' => null,
        'forecastDataPerInterval' => null,
        'scheduleDataPerInterval' => null,
        'historicalAgentDataPerInterval' => null,
        'historicalQueueDataPerInterval' => null,
        'performancePredictionAgentDataPerInterval' => null,
        'performancePredictionQueueDataPerInterval' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mediaType' => 'mediaType',
        'forecastDataPerInterval' => 'forecastDataPerInterval',
        'scheduleDataPerInterval' => 'scheduleDataPerInterval',
        'historicalAgentDataPerInterval' => 'historicalAgentDataPerInterval',
        'historicalQueueDataPerInterval' => 'historicalQueueDataPerInterval',
        'performancePredictionAgentDataPerInterval' => 'performancePredictionAgentDataPerInterval',
        'performancePredictionQueueDataPerInterval' => 'performancePredictionQueueDataPerInterval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mediaType' => 'setMediaType',
        'forecastDataPerInterval' => 'setForecastDataPerInterval',
        'scheduleDataPerInterval' => 'setScheduleDataPerInterval',
        'historicalAgentDataPerInterval' => 'setHistoricalAgentDataPerInterval',
        'historicalQueueDataPerInterval' => 'setHistoricalQueueDataPerInterval',
        'performancePredictionAgentDataPerInterval' => 'setPerformancePredictionAgentDataPerInterval',
        'performancePredictionQueueDataPerInterval' => 'setPerformancePredictionQueueDataPerInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mediaType' => 'getMediaType',
        'forecastDataPerInterval' => 'getForecastDataPerInterval',
        'scheduleDataPerInterval' => 'getScheduleDataPerInterval',
        'historicalAgentDataPerInterval' => 'getHistoricalAgentDataPerInterval',
        'historicalQueueDataPerInterval' => 'getHistoricalQueueDataPerInterval',
        'performancePredictionAgentDataPerInterval' => 'getPerformancePredictionAgentDataPerInterval',
        'performancePredictionQueueDataPerInterval' => 'getPerformancePredictionQueueDataPerInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEDIA_TYPE_VOICE = 'Voice';
    const MEDIA_TYPE_CHAT = 'Chat';
    const MEDIA_TYPE_EMAIL = 'Email';
    const MEDIA_TYPE_CALLBACK = 'Callback';
    const MEDIA_TYPE_MESSAGE = 'Message';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaTypeAllowableValues()
    {
        return [
            self::MEDIA_TYPE_VOICE,
            self::MEDIA_TYPE_CHAT,
            self::MEDIA_TYPE_EMAIL,
            self::MEDIA_TYPE_CALLBACK,
            self::MEDIA_TYPE_MESSAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mediaType'] = isset($data['mediaType']) ? $data['mediaType'] : null;
        $this->container['forecastDataPerInterval'] = isset($data['forecastDataPerInterval']) ? $data['forecastDataPerInterval'] : null;
        $this->container['scheduleDataPerInterval'] = isset($data['scheduleDataPerInterval']) ? $data['scheduleDataPerInterval'] : null;
        $this->container['historicalAgentDataPerInterval'] = isset($data['historicalAgentDataPerInterval']) ? $data['historicalAgentDataPerInterval'] : null;
        $this->container['historicalQueueDataPerInterval'] = isset($data['historicalQueueDataPerInterval']) ? $data['historicalQueueDataPerInterval'] : null;
        $this->container['performancePredictionAgentDataPerInterval'] = isset($data['performancePredictionAgentDataPerInterval']) ? $data['performancePredictionAgentDataPerInterval'] : null;
        $this->container['performancePredictionQueueDataPerInterval'] = isset($data['performancePredictionQueueDataPerInterval']) ? $data['performancePredictionQueueDataPerInterval'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMediaTypeAllowableValues();
        if (!is_null($this->container['mediaType']) && !in_array($this->container['mediaType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mediaType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mediaType
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['mediaType'];
    }

    /**
     * Sets mediaType
     *
     * @param string $mediaType The media type associated with this intraday group
     *
     * @return $this
     */
    public function setMediaType($mediaType)
    {
        $allowedValues = $this->getMediaTypeAllowableValues();
        if (!is_null($mediaType) && !in_array($mediaType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mediaType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaType'] = $mediaType;

        return $this;
    }

    /**
     * Gets forecastDataPerInterval
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntradayForecastData[]
     */
    public function getForecastDataPerInterval()
    {
        return $this->container['forecastDataPerInterval'];
    }

    /**
     * Sets forecastDataPerInterval
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntradayForecastData[] $forecastDataPerInterval Forecast data for this date range
     *
     * @return $this
     */
    public function setForecastDataPerInterval($forecastDataPerInterval)
    {
        $this->container['forecastDataPerInterval'] = $forecastDataPerInterval;

        return $this;
    }

    /**
     * Gets scheduleDataPerInterval
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntradayScheduleData[]
     */
    public function getScheduleDataPerInterval()
    {
        return $this->container['scheduleDataPerInterval'];
    }

    /**
     * Sets scheduleDataPerInterval
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntradayScheduleData[] $scheduleDataPerInterval Schedule data for this date range
     *
     * @return $this
     */
    public function setScheduleDataPerInterval($scheduleDataPerInterval)
    {
        $this->container['scheduleDataPerInterval'] = $scheduleDataPerInterval;

        return $this;
    }

    /**
     * Gets historicalAgentDataPerInterval
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntradayHistoricalAgentData[]
     */
    public function getHistoricalAgentDataPerInterval()
    {
        return $this->container['historicalAgentDataPerInterval'];
    }

    /**
     * Sets historicalAgentDataPerInterval
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntradayHistoricalAgentData[] $historicalAgentDataPerInterval Historical agent data for this date range
     *
     * @return $this
     */
    public function setHistoricalAgentDataPerInterval($historicalAgentDataPerInterval)
    {
        $this->container['historicalAgentDataPerInterval'] = $historicalAgentDataPerInterval;

        return $this;
    }

    /**
     * Gets historicalQueueDataPerInterval
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntradayHistoricalQueueData[]
     */
    public function getHistoricalQueueDataPerInterval()
    {
        return $this->container['historicalQueueDataPerInterval'];
    }

    /**
     * Sets historicalQueueDataPerInterval
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntradayHistoricalQueueData[] $historicalQueueDataPerInterval Historical queue data for this date range
     *
     * @return $this
     */
    public function setHistoricalQueueDataPerInterval($historicalQueueDataPerInterval)
    {
        $this->container['historicalQueueDataPerInterval'] = $historicalQueueDataPerInterval;

        return $this;
    }

    /**
     * Gets performancePredictionAgentDataPerInterval
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntradayPerformancePredictionAgentData[]
     */
    public function getPerformancePredictionAgentDataPerInterval()
    {
        return $this->container['performancePredictionAgentDataPerInterval'];
    }

    /**
     * Sets performancePredictionAgentDataPerInterval
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntradayPerformancePredictionAgentData[] $performancePredictionAgentDataPerInterval Performance prediction data for this date range
     *
     * @return $this
     */
    public function setPerformancePredictionAgentDataPerInterval($performancePredictionAgentDataPerInterval)
    {
        $this->container['performancePredictionAgentDataPerInterval'] = $performancePredictionAgentDataPerInterval;

        return $this;
    }

    /**
     * Gets performancePredictionQueueDataPerInterval
     *
     * @return \PureCloudPlatform\Client\V2\Model\IntradayPerformancePredictionQueueData[]
     */
    public function getPerformancePredictionQueueDataPerInterval()
    {
        return $this->container['performancePredictionQueueDataPerInterval'];
    }

    /**
     * Sets performancePredictionQueueDataPerInterval
     *
     * @param \PureCloudPlatform\Client\V2\Model\IntradayPerformancePredictionQueueData[] $performancePredictionQueueDataPerInterval Performance prediction data for this date range
     *
     * @return $this
     */
    public function setPerformancePredictionQueueDataPerInterval($performancePredictionQueueDataPerInterval)
    {
        $this->container['performancePredictionQueueDataPerInterval'] = $performancePredictionQueueDataPerInterval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


