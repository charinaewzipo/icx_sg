<?php
/**
 * CommandStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CommandStatus Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CommandStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CommandStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'expiration' => '\DateTime',
        'userId' => 'string',
        'statusCode' => 'string',
        'commandType' => 'string',
        'document' => '\PureCloudPlatform\Client\V2\Model\Document',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'expiration' => 'date-time',
        'userId' => null,
        'statusCode' => null,
        'commandType' => null,
        'document' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'expiration' => 'expiration',
        'userId' => 'userId',
        'statusCode' => 'statusCode',
        'commandType' => 'commandType',
        'document' => 'document',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'expiration' => 'setExpiration',
        'userId' => 'setUserId',
        'statusCode' => 'setStatusCode',
        'commandType' => 'setCommandType',
        'document' => 'setDocument',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'expiration' => 'getExpiration',
        'userId' => 'getUserId',
        'statusCode' => 'getStatusCode',
        'commandType' => 'getCommandType',
        'document' => 'getDocument',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_CODE_INPROGRESS = 'INPROGRESS';
    const STATUS_CODE_COMPLETE = 'COMPLETE';
    const STATUS_CODE_ERROR = 'ERROR';
    const STATUS_CODE_CANCELING = 'CANCELING';
    const STATUS_CODE_CANCELED = 'CANCELED';
    const COMMAND_TYPE_UPLOAD = 'UPLOAD';
    const COMMAND_TYPE_COPYDOCUMENT = 'COPYDOCUMENT';
    const COMMAND_TYPE_MOVEDOCUMENT = 'MOVEDOCUMENT';
    const COMMAND_TYPE_DELETEWORKSPACE = 'DELETEWORKSPACE';
    const COMMAND_TYPE_DELETEDOCUMENT = 'DELETEDOCUMENT';
    const COMMAND_TYPE_DELETETAG = 'DELETETAG';
    const COMMAND_TYPE_UPDATETAG = 'UPDATETAG';
    const COMMAND_TYPE_REINDEX = 'REINDEX';
    const COMMAND_TYPE_CLEANUP = 'CLEANUP';
    const COMMAND_TYPE_REPLACEDOCUMENT = 'REPLACEDOCUMENT';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusCodeAllowableValues()
    {
        return [
            self::STATUS_CODE_INPROGRESS,
            self::STATUS_CODE_COMPLETE,
            self::STATUS_CODE_ERROR,
            self::STATUS_CODE_CANCELING,
            self::STATUS_CODE_CANCELED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCommandTypeAllowableValues()
    {
        return [
            self::COMMAND_TYPE_UPLOAD,
            self::COMMAND_TYPE_COPYDOCUMENT,
            self::COMMAND_TYPE_MOVEDOCUMENT,
            self::COMMAND_TYPE_DELETEWORKSPACE,
            self::COMMAND_TYPE_DELETEDOCUMENT,
            self::COMMAND_TYPE_DELETETAG,
            self::COMMAND_TYPE_UPDATETAG,
            self::COMMAND_TYPE_REINDEX,
            self::COMMAND_TYPE_CLEANUP,
            self::COMMAND_TYPE_REPLACEDOCUMENT,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['statusCode'] = isset($data['statusCode']) ? $data['statusCode'] : null;
        $this->container['commandType'] = isset($data['commandType']) ? $data['commandType'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($this->container['statusCode']) && !in_array($this->container['statusCode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'statusCode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCommandTypeAllowableValues();
        if (!is_null($this->container['commandType']) && !in_array($this->container['commandType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'commandType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return \DateTime
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param \DateTime $expiration Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId userId
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets statusCode
     *
     * @return string
     */
    public function getStatusCode()
    {
        return $this->container['statusCode'];
    }

    /**
     * Sets statusCode
     *
     * @param string $statusCode statusCode
     *
     * @return $this
     */
    public function setStatusCode($statusCode)
    {
        $allowedValues = $this->getStatusCodeAllowableValues();
        if (!is_null($statusCode) && !in_array($statusCode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'statusCode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['statusCode'] = $statusCode;

        return $this;
    }

    /**
     * Gets commandType
     *
     * @return string
     */
    public function getCommandType()
    {
        return $this->container['commandType'];
    }

    /**
     * Sets commandType
     *
     * @param string $commandType commandType
     *
     * @return $this
     */
    public function setCommandType($commandType)
    {
        $allowedValues = $this->getCommandTypeAllowableValues();
        if (!is_null($commandType) && !in_array($commandType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'commandType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['commandType'] = $commandType;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \PureCloudPlatform\Client\V2\Model\Document
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \PureCloudPlatform\Client\V2\Model\Document $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


