<?php
/**
 * Address
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Address implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'nameRaw' => 'string',
        'addressNormalized' => 'string',
        'addressRaw' => 'string',
        'addressDisplayable' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'nameRaw' => null,
        'addressNormalized' => null,
        'addressRaw' => null,
        'addressDisplayable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'nameRaw' => 'nameRaw',
        'addressNormalized' => 'addressNormalized',
        'addressRaw' => 'addressRaw',
        'addressDisplayable' => 'addressDisplayable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'nameRaw' => 'setNameRaw',
        'addressNormalized' => 'setAddressNormalized',
        'addressRaw' => 'setAddressRaw',
        'addressDisplayable' => 'setAddressDisplayable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'nameRaw' => 'getNameRaw',
        'addressNormalized' => 'getAddressNormalized',
        'addressRaw' => 'getAddressRaw',
        'addressDisplayable' => 'getAddressDisplayable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['nameRaw'] = isset($data['nameRaw']) ? $data['nameRaw'] : null;
        $this->container['addressNormalized'] = isset($data['addressNormalized']) ? $data['addressNormalized'] : null;
        $this->container['addressRaw'] = isset($data['addressRaw']) ? $data['addressRaw'] : null;
        $this->container['addressDisplayable'] = isset($data['addressDisplayable']) ? $data['addressDisplayable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name This will be nameRaw if present, or a locality lookup of the address field otherwise.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nameRaw
     *
     * @return string
     */
    public function getNameRaw()
    {
        return $this->container['nameRaw'];
    }

    /**
     * Sets nameRaw
     *
     * @param string $nameRaw The name as close to the bits on the wire as possible.
     *
     * @return $this
     */
    public function setNameRaw($nameRaw)
    {
        $this->container['nameRaw'] = $nameRaw;

        return $this;
    }

    /**
     * Gets addressNormalized
     *
     * @return string
     */
    public function getAddressNormalized()
    {
        return $this->container['addressNormalized'];
    }

    /**
     * Sets addressNormalized
     *
     * @param string $addressNormalized The normalized address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table.
     *
     * @return $this
     */
    public function setAddressNormalized($addressNormalized)
    {
        $this->container['addressNormalized'] = $addressNormalized;

        return $this;
    }

    /**
     * Gets addressRaw
     *
     * @return string
     */
    public function getAddressRaw()
    {
        return $this->container['addressRaw'];
    }

    /**
     * Sets addressRaw
     *
     * @param string $addressRaw The address as close to the bits on the wire as possible.
     *
     * @return $this
     */
    public function setAddressRaw($addressRaw)
    {
        $this->container['addressRaw'] = $addressRaw;

        return $this;
    }

    /**
     * Gets addressDisplayable
     *
     * @return string
     */
    public function getAddressDisplayable()
    {
        return $this->container['addressDisplayable'];
    }

    /**
     * Sets addressDisplayable
     *
     * @param string $addressDisplayable The displayable address. This field is acquired from the Address Normalization Table.  The addressRaw could have gone through some transformations, such as only using the numeric portion, before being run through the Address Normalization Table.
     *
     * @return $this
     */
    public function setAddressDisplayable($addressDisplayable)
    {
        $this->container['addressDisplayable'] = $addressDisplayable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


