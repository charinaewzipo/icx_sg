<?php
/**
 * UserConversationSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * UserConversationSummary Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserConversationSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserConversationSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'userId' => 'string',
        'call' => '\PureCloudPlatform\Client\V2\Model\MediaSummary',
        'callback' => '\PureCloudPlatform\Client\V2\Model\MediaSummary',
        'email' => '\PureCloudPlatform\Client\V2\Model\MediaSummary',
        'message' => '\PureCloudPlatform\Client\V2\Model\MediaSummary',
        'chat' => '\PureCloudPlatform\Client\V2\Model\MediaSummary',
        'socialExpression' => '\PureCloudPlatform\Client\V2\Model\MediaSummary',
        'video' => '\PureCloudPlatform\Client\V2\Model\MediaSummary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'userId' => null,
        'call' => null,
        'callback' => null,
        'email' => null,
        'message' => null,
        'chat' => null,
        'socialExpression' => null,
        'video' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userId' => 'userId',
        'call' => 'call',
        'callback' => 'callback',
        'email' => 'email',
        'message' => 'message',
        'chat' => 'chat',
        'socialExpression' => 'socialExpression',
        'video' => 'video'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userId' => 'setUserId',
        'call' => 'setCall',
        'callback' => 'setCallback',
        'email' => 'setEmail',
        'message' => 'setMessage',
        'chat' => 'setChat',
        'socialExpression' => 'setSocialExpression',
        'video' => 'setVideo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userId' => 'getUserId',
        'call' => 'getCall',
        'callback' => 'getCallback',
        'email' => 'getEmail',
        'message' => 'getMessage',
        'chat' => 'getChat',
        'socialExpression' => 'getSocialExpression',
        'video' => 'getVideo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['call'] = isset($data['call']) ? $data['call'] : null;
        $this->container['callback'] = isset($data['callback']) ? $data['callback'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['chat'] = isset($data['chat']) ? $data['chat'] : null;
        $this->container['socialExpression'] = isset($data['socialExpression']) ? $data['socialExpression'] : null;
        $this->container['video'] = isset($data['video']) ? $data['video'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId userId
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets call
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaSummary
     */
    public function getCall()
    {
        return $this->container['call'];
    }

    /**
     * Sets call
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaSummary $call call
     *
     * @return $this
     */
    public function setCall($call)
    {
        $this->container['call'] = $call;

        return $this;
    }

    /**
     * Gets callback
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaSummary
     */
    public function getCallback()
    {
        return $this->container['callback'];
    }

    /**
     * Sets callback
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaSummary $callback callback
     *
     * @return $this
     */
    public function setCallback($callback)
    {
        $this->container['callback'] = $callback;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaSummary
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaSummary $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets message
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaSummary
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaSummary $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaSummary
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaSummary $chat chat
     *
     * @return $this
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets socialExpression
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaSummary
     */
    public function getSocialExpression()
    {
        return $this->container['socialExpression'];
    }

    /**
     * Sets socialExpression
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaSummary $socialExpression socialExpression
     *
     * @return $this
     */
    public function setSocialExpression($socialExpression)
    {
        $this->container['socialExpression'] = $socialExpression;

        return $this;
    }

    /**
     * Gets video
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaSummary
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaSummary $video video
     *
     * @return $this
     */
    public function setVideo($video)
    {
        $this->container['video'] = $video;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


