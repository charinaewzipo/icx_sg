<?php
/**
 * Organization
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * Organization Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Organization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Organization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'defaultLanguage' => 'string',
        'defaultCountryCode' => 'string',
        'thirdPartyOrgName' => 'string',
        'thirdPartyURI' => 'string',
        'domain' => 'string',
        'version' => 'int',
        'state' => 'string',
        'defaultSiteId' => 'string',
        'supportURI' => 'string',
        'voicemailEnabled' => 'bool',
        'selfUri' => 'string',
        'features' => 'map[string,bool]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'defaultLanguage' => null,
        'defaultCountryCode' => null,
        'thirdPartyOrgName' => null,
        'thirdPartyURI' => 'uri',
        'domain' => null,
        'version' => 'int32',
        'state' => null,
        'defaultSiteId' => null,
        'supportURI' => null,
        'voicemailEnabled' => null,
        'selfUri' => 'uri',
        'features' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'defaultLanguage' => 'defaultLanguage',
        'defaultCountryCode' => 'defaultCountryCode',
        'thirdPartyOrgName' => 'thirdPartyOrgName',
        'thirdPartyURI' => 'thirdPartyURI',
        'domain' => 'domain',
        'version' => 'version',
        'state' => 'state',
        'defaultSiteId' => 'defaultSiteId',
        'supportURI' => 'supportURI',
        'voicemailEnabled' => 'voicemailEnabled',
        'selfUri' => 'selfUri',
        'features' => 'features'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'defaultLanguage' => 'setDefaultLanguage',
        'defaultCountryCode' => 'setDefaultCountryCode',
        'thirdPartyOrgName' => 'setThirdPartyOrgName',
        'thirdPartyURI' => 'setThirdPartyURI',
        'domain' => 'setDomain',
        'version' => 'setVersion',
        'state' => 'setState',
        'defaultSiteId' => 'setDefaultSiteId',
        'supportURI' => 'setSupportURI',
        'voicemailEnabled' => 'setVoicemailEnabled',
        'selfUri' => 'setSelfUri',
        'features' => 'setFeatures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'defaultLanguage' => 'getDefaultLanguage',
        'defaultCountryCode' => 'getDefaultCountryCode',
        'thirdPartyOrgName' => 'getThirdPartyOrgName',
        'thirdPartyURI' => 'getThirdPartyURI',
        'domain' => 'getDomain',
        'version' => 'getVersion',
        'state' => 'getState',
        'defaultSiteId' => 'getDefaultSiteId',
        'supportURI' => 'getSupportURI',
        'voicemailEnabled' => 'getVoicemailEnabled',
        'selfUri' => 'getSelfUri',
        'features' => 'getFeatures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_INACTIVE = 'inactive';
    const STATE_DELETED = 'deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_INACTIVE,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['defaultLanguage'] = isset($data['defaultLanguage']) ? $data['defaultLanguage'] : null;
        $this->container['defaultCountryCode'] = isset($data['defaultCountryCode']) ? $data['defaultCountryCode'] : null;
        $this->container['thirdPartyOrgName'] = isset($data['thirdPartyOrgName']) ? $data['thirdPartyOrgName'] : null;
        $this->container['thirdPartyURI'] = isset($data['thirdPartyURI']) ? $data['thirdPartyURI'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['defaultSiteId'] = isset($data['defaultSiteId']) ? $data['defaultSiteId'] : null;
        $this->container['supportURI'] = isset($data['supportURI']) ? $data['supportURI'] : null;
        $this->container['voicemailEnabled'] = isset($data['voicemailEnabled']) ? $data['voicemailEnabled'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
        $this->container['features'] = isset($data['features']) ? $data['features'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets defaultLanguage
     *
     * @return string
     */
    public function getDefaultLanguage()
    {
        return $this->container['defaultLanguage'];
    }

    /**
     * Sets defaultLanguage
     *
     * @param string $defaultLanguage The default language for this organization. Example: 'en'
     *
     * @return $this
     */
    public function setDefaultLanguage($defaultLanguage)
    {
        $this->container['defaultLanguage'] = $defaultLanguage;

        return $this;
    }

    /**
     * Gets defaultCountryCode
     *
     * @return string
     */
    public function getDefaultCountryCode()
    {
        return $this->container['defaultCountryCode'];
    }

    /**
     * Sets defaultCountryCode
     *
     * @param string $defaultCountryCode The default country code for this organization. Example: 'US'
     *
     * @return $this
     */
    public function setDefaultCountryCode($defaultCountryCode)
    {
        $this->container['defaultCountryCode'] = $defaultCountryCode;

        return $this;
    }

    /**
     * Gets thirdPartyOrgName
     *
     * @return string
     */
    public function getThirdPartyOrgName()
    {
        return $this->container['thirdPartyOrgName'];
    }

    /**
     * Sets thirdPartyOrgName
     *
     * @param string $thirdPartyOrgName The short name for the organization. This field is globally unique and cannot be changed.
     *
     * @return $this
     */
    public function setThirdPartyOrgName($thirdPartyOrgName)
    {
        $this->container['thirdPartyOrgName'] = $thirdPartyOrgName;

        return $this;
    }

    /**
     * Gets thirdPartyURI
     *
     * @return string
     */
    public function getThirdPartyURI()
    {
        return $this->container['thirdPartyURI'];
    }

    /**
     * Sets thirdPartyURI
     *
     * @param string $thirdPartyURI thirdPartyURI
     *
     * @return $this
     */
    public function setThirdPartyURI($thirdPartyURI)
    {
        $this->container['thirdPartyURI'] = $thirdPartyURI;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version The current version of the organization.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The current state. Examples are active, inactive, deleted.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets defaultSiteId
     *
     * @return string
     */
    public function getDefaultSiteId()
    {
        return $this->container['defaultSiteId'];
    }

    /**
     * Sets defaultSiteId
     *
     * @param string $defaultSiteId defaultSiteId
     *
     * @return $this
     */
    public function setDefaultSiteId($defaultSiteId)
    {
        $this->container['defaultSiteId'] = $defaultSiteId;

        return $this;
    }

    /**
     * Gets supportURI
     *
     * @return string
     */
    public function getSupportURI()
    {
        return $this->container['supportURI'];
    }

    /**
     * Sets supportURI
     *
     * @param string $supportURI Email address where support tickets are sent to.
     *
     * @return $this
     */
    public function setSupportURI($supportURI)
    {
        $this->container['supportURI'] = $supportURI;

        return $this;
    }

    /**
     * Gets voicemailEnabled
     *
     * @return bool
     */
    public function getVoicemailEnabled()
    {
        return $this->container['voicemailEnabled'];
    }

    /**
     * Sets voicemailEnabled
     *
     * @param bool $voicemailEnabled voicemailEnabled
     *
     * @return $this
     */
    public function setVoicemailEnabled($voicemailEnabled)
    {
        $this->container['voicemailEnabled'] = $voicemailEnabled;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }

    /**
     * Gets features
     *
     * @return map[string,bool]
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param map[string,bool] $features The state of features available for the organization.
     *
     * @return $this
     */
    public function setFeatures($features)
    {
        $this->container['features'] = $features;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


