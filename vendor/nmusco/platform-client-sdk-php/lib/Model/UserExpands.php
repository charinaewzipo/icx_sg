<?php
/**
 * UserExpands
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * UserExpands Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserExpands implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserExpands';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'routingStatus' => '\PureCloudPlatform\Client\V2\Model\RoutingStatus',
        'presence' => '\PureCloudPlatform\Client\V2\Model\UserPresence',
        'conversationSummary' => '\PureCloudPlatform\Client\V2\Model\UserConversationSummary',
        'outOfOffice' => '\PureCloudPlatform\Client\V2\Model\OutOfOffice',
        'geolocation' => '\PureCloudPlatform\Client\V2\Model\Geolocation',
        'station' => '\PureCloudPlatform\Client\V2\Model\UserStations',
        'authorization' => '\PureCloudPlatform\Client\V2\Model\UserAuthorization'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'routingStatus' => null,
        'presence' => null,
        'conversationSummary' => null,
        'outOfOffice' => null,
        'geolocation' => null,
        'station' => null,
        'authorization' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'routingStatus' => 'routingStatus',
        'presence' => 'presence',
        'conversationSummary' => 'conversationSummary',
        'outOfOffice' => 'outOfOffice',
        'geolocation' => 'geolocation',
        'station' => 'station',
        'authorization' => 'authorization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'routingStatus' => 'setRoutingStatus',
        'presence' => 'setPresence',
        'conversationSummary' => 'setConversationSummary',
        'outOfOffice' => 'setOutOfOffice',
        'geolocation' => 'setGeolocation',
        'station' => 'setStation',
        'authorization' => 'setAuthorization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'routingStatus' => 'getRoutingStatus',
        'presence' => 'getPresence',
        'conversationSummary' => 'getConversationSummary',
        'outOfOffice' => 'getOutOfOffice',
        'geolocation' => 'getGeolocation',
        'station' => 'getStation',
        'authorization' => 'getAuthorization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['routingStatus'] = isset($data['routingStatus']) ? $data['routingStatus'] : null;
        $this->container['presence'] = isset($data['presence']) ? $data['presence'] : null;
        $this->container['conversationSummary'] = isset($data['conversationSummary']) ? $data['conversationSummary'] : null;
        $this->container['outOfOffice'] = isset($data['outOfOffice']) ? $data['outOfOffice'] : null;
        $this->container['geolocation'] = isset($data['geolocation']) ? $data['geolocation'] : null;
        $this->container['station'] = isset($data['station']) ? $data['station'] : null;
        $this->container['authorization'] = isset($data['authorization']) ? $data['authorization'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets routingStatus
     *
     * @return \PureCloudPlatform\Client\V2\Model\RoutingStatus
     */
    public function getRoutingStatus()
    {
        return $this->container['routingStatus'];
    }

    /**
     * Sets routingStatus
     *
     * @param \PureCloudPlatform\Client\V2\Model\RoutingStatus $routingStatus ACD routing status
     *
     * @return $this
     */
    public function setRoutingStatus($routingStatus)
    {
        $this->container['routingStatus'] = $routingStatus;

        return $this;
    }

    /**
     * Gets presence
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserPresence
     */
    public function getPresence()
    {
        return $this->container['presence'];
    }

    /**
     * Sets presence
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserPresence $presence Active presence
     *
     * @return $this
     */
    public function setPresence($presence)
    {
        $this->container['presence'] = $presence;

        return $this;
    }

    /**
     * Gets conversationSummary
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserConversationSummary
     */
    public function getConversationSummary()
    {
        return $this->container['conversationSummary'];
    }

    /**
     * Sets conversationSummary
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserConversationSummary $conversationSummary Summary of conversion statistics for conversation types.
     *
     * @return $this
     */
    public function setConversationSummary($conversationSummary)
    {
        $this->container['conversationSummary'] = $conversationSummary;

        return $this;
    }

    /**
     * Gets outOfOffice
     *
     * @return \PureCloudPlatform\Client\V2\Model\OutOfOffice
     */
    public function getOutOfOffice()
    {
        return $this->container['outOfOffice'];
    }

    /**
     * Sets outOfOffice
     *
     * @param \PureCloudPlatform\Client\V2\Model\OutOfOffice $outOfOffice Determine if out of office is enabled
     *
     * @return $this
     */
    public function setOutOfOffice($outOfOffice)
    {
        $this->container['outOfOffice'] = $outOfOffice;

        return $this;
    }

    /**
     * Gets geolocation
     *
     * @return \PureCloudPlatform\Client\V2\Model\Geolocation
     */
    public function getGeolocation()
    {
        return $this->container['geolocation'];
    }

    /**
     * Sets geolocation
     *
     * @param \PureCloudPlatform\Client\V2\Model\Geolocation $geolocation Current geolocation position
     *
     * @return $this
     */
    public function setGeolocation($geolocation)
    {
        $this->container['geolocation'] = $geolocation;

        return $this;
    }

    /**
     * Gets station
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserStations
     */
    public function getStation()
    {
        return $this->container['station'];
    }

    /**
     * Sets station
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserStations $station Effective, default, and last station information
     *
     * @return $this
     */
    public function setStation($station)
    {
        $this->container['station'] = $station;

        return $this;
    }

    /**
     * Gets authorization
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserAuthorization
     */
    public function getAuthorization()
    {
        return $this->container['authorization'];
    }

    /**
     * Sets authorization
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserAuthorization $authorization Roles and permissions assigned to the user
     *
     * @return $this
     */
    public function setAuthorization($authorization)
    {
        $this->container['authorization'] = $authorization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


