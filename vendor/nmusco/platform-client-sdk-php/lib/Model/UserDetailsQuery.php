<?php
/**
 * UserDetailsQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * UserDetailsQuery Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserDetailsQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserDetailsQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'interval' => 'string',
        'userFilters' => '\PureCloudPlatform\Client\V2\Model\UserDetailQueryFilter[]',
        'presenceFilters' => '\PureCloudPlatform\Client\V2\Model\PresenceDetailQueryFilter[]',
        'routingStatusFilters' => '\PureCloudPlatform\Client\V2\Model\RoutingStatusDetailQueryFilter[]',
        'order' => 'string',
        'presenceAggregations' => '\PureCloudPlatform\Client\V2\Model\AnalyticsQueryAggregation[]',
        'routingStatusAggregations' => '\PureCloudPlatform\Client\V2\Model\AnalyticsQueryAggregation[]',
        'paging' => '\PureCloudPlatform\Client\V2\Model\PagingSpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'interval' => null,
        'userFilters' => null,
        'presenceFilters' => null,
        'routingStatusFilters' => null,
        'order' => null,
        'presenceAggregations' => null,
        'routingStatusAggregations' => null,
        'paging' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interval' => 'interval',
        'userFilters' => 'userFilters',
        'presenceFilters' => 'presenceFilters',
        'routingStatusFilters' => 'routingStatusFilters',
        'order' => 'order',
        'presenceAggregations' => 'presenceAggregations',
        'routingStatusAggregations' => 'routingStatusAggregations',
        'paging' => 'paging'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interval' => 'setInterval',
        'userFilters' => 'setUserFilters',
        'presenceFilters' => 'setPresenceFilters',
        'routingStatusFilters' => 'setRoutingStatusFilters',
        'order' => 'setOrder',
        'presenceAggregations' => 'setPresenceAggregations',
        'routingStatusAggregations' => 'setRoutingStatusAggregations',
        'paging' => 'setPaging'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interval' => 'getInterval',
        'userFilters' => 'getUserFilters',
        'presenceFilters' => 'getPresenceFilters',
        'routingStatusFilters' => 'getRoutingStatusFilters',
        'order' => 'getOrder',
        'presenceAggregations' => 'getPresenceAggregations',
        'routingStatusAggregations' => 'getRoutingStatusAggregations',
        'paging' => 'getPaging'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORDER_ASC = 'asc';
    const ORDER_DESC = 'desc';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderAllowableValues()
    {
        return [
            self::ORDER_ASC,
            self::ORDER_DESC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['userFilters'] = isset($data['userFilters']) ? $data['userFilters'] : null;
        $this->container['presenceFilters'] = isset($data['presenceFilters']) ? $data['presenceFilters'] : null;
        $this->container['routingStatusFilters'] = isset($data['routingStatusFilters']) ? $data['routingStatusFilters'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['presenceAggregations'] = isset($data['presenceAggregations']) ? $data['presenceAggregations'] : null;
        $this->container['routingStatusAggregations'] = isset($data['routingStatusAggregations']) ? $data['routingStatusAggregations'] : null;
        $this->container['paging'] = isset($data['paging']) ? $data['paging'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($this->container['order']) && !in_array($this->container['order'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval Specifies the date and time range of data being queried. Conversations MUST have started within this time range to potentially be included within the result set. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets userFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserDetailQueryFilter[]
     */
    public function getUserFilters()
    {
        return $this->container['userFilters'];
    }

    /**
     * Sets userFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserDetailQueryFilter[] $userFilters Filters that target the users to retrieve data for
     *
     * @return $this
     */
    public function setUserFilters($userFilters)
    {
        $this->container['userFilters'] = $userFilters;

        return $this;
    }

    /**
     * Gets presenceFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\PresenceDetailQueryFilter[]
     */
    public function getPresenceFilters()
    {
        return $this->container['presenceFilters'];
    }

    /**
     * Sets presenceFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\PresenceDetailQueryFilter[] $presenceFilters Filters that target system and organization presence-level data
     *
     * @return $this
     */
    public function setPresenceFilters($presenceFilters)
    {
        $this->container['presenceFilters'] = $presenceFilters;

        return $this;
    }

    /**
     * Gets routingStatusFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\RoutingStatusDetailQueryFilter[]
     */
    public function getRoutingStatusFilters()
    {
        return $this->container['routingStatusFilters'];
    }

    /**
     * Sets routingStatusFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\RoutingStatusDetailQueryFilter[] $routingStatusFilters Filters that target agent routing status-level data
     *
     * @return $this
     */
    public function setRoutingStatusFilters($routingStatusFilters)
    {
        $this->container['routingStatusFilters'] = $routingStatusFilters;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order Sort the result set in ascending/descending order. Default is ascending
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($order) && !in_array($order, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets presenceAggregations
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsQueryAggregation[]
     */
    public function getPresenceAggregations()
    {
        return $this->container['presenceAggregations'];
    }

    /**
     * Sets presenceAggregations
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsQueryAggregation[] $presenceAggregations Include faceted search and aggregate roll-ups of presence data in your search results. This does not function as a filter, but rather, summary data about the presence results matching your filters
     *
     * @return $this
     */
    public function setPresenceAggregations($presenceAggregations)
    {
        $this->container['presenceAggregations'] = $presenceAggregations;

        return $this;
    }

    /**
     * Gets routingStatusAggregations
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsQueryAggregation[]
     */
    public function getRoutingStatusAggregations()
    {
        return $this->container['routingStatusAggregations'];
    }

    /**
     * Sets routingStatusAggregations
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsQueryAggregation[] $routingStatusAggregations Include faceted search and aggregate roll-ups of agent routing status data in your search results. This does not function as a filter, but rather, summary data about the agent routing status results matching your filters
     *
     * @return $this
     */
    public function setRoutingStatusAggregations($routingStatusAggregations)
    {
        $this->container['routingStatusAggregations'] = $routingStatusAggregations;

        return $this;
    }

    /**
     * Gets paging
     *
     * @return \PureCloudPlatform\Client\V2\Model\PagingSpec
     */
    public function getPaging()
    {
        return $this->container['paging'];
    }

    /**
     * Sets paging
     *
     * @param \PureCloudPlatform\Client\V2\Model\PagingSpec $paging Page size and number to control iterating through large result sets. Default page size is 25
     *
     * @return $this
     */
    public function setPaging($paging)
    {
        $this->container['paging'] = $paging;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


