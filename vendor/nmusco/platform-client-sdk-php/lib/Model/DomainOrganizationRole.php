<?php
/**
 * DomainOrganizationRole
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * DomainOrganizationRole Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainOrganizationRole implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainOrganizationRole';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'defaultRoleId' => 'string',
        'permissions' => 'string[]',
        'unusedPermissions' => 'string[]',
        'permissionPolicies' => '\PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]',
        'userCount' => 'int',
        'roleNeedsUpdate' => 'bool',
        'default' => 'bool',
        'base' => 'bool',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'defaultRoleId' => null,
        'permissions' => null,
        'unusedPermissions' => null,
        'permissionPolicies' => null,
        'userCount' => 'int32',
        'roleNeedsUpdate' => null,
        'default' => null,
        'base' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'defaultRoleId' => 'defaultRoleId',
        'permissions' => 'permissions',
        'unusedPermissions' => 'unusedPermissions',
        'permissionPolicies' => 'permissionPolicies',
        'userCount' => 'userCount',
        'roleNeedsUpdate' => 'roleNeedsUpdate',
        'default' => 'default',
        'base' => 'base',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'defaultRoleId' => 'setDefaultRoleId',
        'permissions' => 'setPermissions',
        'unusedPermissions' => 'setUnusedPermissions',
        'permissionPolicies' => 'setPermissionPolicies',
        'userCount' => 'setUserCount',
        'roleNeedsUpdate' => 'setRoleNeedsUpdate',
        'default' => 'setDefault',
        'base' => 'setBase',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'defaultRoleId' => 'getDefaultRoleId',
        'permissions' => 'getPermissions',
        'unusedPermissions' => 'getUnusedPermissions',
        'permissionPolicies' => 'getPermissionPolicies',
        'userCount' => 'getUserCount',
        'roleNeedsUpdate' => 'getRoleNeedsUpdate',
        'default' => 'getDefault',
        'base' => 'getBase',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['defaultRoleId'] = isset($data['defaultRoleId']) ? $data['defaultRoleId'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['unusedPermissions'] = isset($data['unusedPermissions']) ? $data['unusedPermissions'] : null;
        $this->container['permissionPolicies'] = isset($data['permissionPolicies']) ? $data['permissionPolicies'] : null;
        $this->container['userCount'] = isset($data['userCount']) ? $data['userCount'] : null;
        $this->container['roleNeedsUpdate'] = isset($data['roleNeedsUpdate']) ? $data['roleNeedsUpdate'] : null;
        $this->container['default'] = isset($data['default']) ? $data['default'] : null;
        $this->container['base'] = isset($data['base']) ? $data['base'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets defaultRoleId
     *
     * @return string
     */
    public function getDefaultRoleId()
    {
        return $this->container['defaultRoleId'];
    }

    /**
     * Sets defaultRoleId
     *
     * @param string $defaultRoleId defaultRoleId
     *
     * @return $this
     */
    public function setDefaultRoleId($defaultRoleId)
    {
        $this->container['defaultRoleId'] = $defaultRoleId;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return string[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param string[] $permissions permissions
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets unusedPermissions
     *
     * @return string[]
     */
    public function getUnusedPermissions()
    {
        return $this->container['unusedPermissions'];
    }

    /**
     * Sets unusedPermissions
     *
     * @param string[] $unusedPermissions A collection of the permissions the role is not using
     *
     * @return $this
     */
    public function setUnusedPermissions($unusedPermissions)
    {
        $this->container['unusedPermissions'] = $unusedPermissions;

        return $this;
    }

    /**
     * Gets permissionPolicies
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]
     */
    public function getPermissionPolicies()
    {
        return $this->container['permissionPolicies'];
    }

    /**
     * Sets permissionPolicies
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[] $permissionPolicies permissionPolicies
     *
     * @return $this
     */
    public function setPermissionPolicies($permissionPolicies)
    {
        $this->container['permissionPolicies'] = $permissionPolicies;

        return $this;
    }

    /**
     * Gets userCount
     *
     * @return int
     */
    public function getUserCount()
    {
        return $this->container['userCount'];
    }

    /**
     * Sets userCount
     *
     * @param int $userCount userCount
     *
     * @return $this
     */
    public function setUserCount($userCount)
    {
        $this->container['userCount'] = $userCount;

        return $this;
    }

    /**
     * Gets roleNeedsUpdate
     *
     * @return bool
     */
    public function getRoleNeedsUpdate()
    {
        return $this->container['roleNeedsUpdate'];
    }

    /**
     * Sets roleNeedsUpdate
     *
     * @param bool $roleNeedsUpdate Optional unless patch operation.
     *
     * @return $this
     */
    public function setRoleNeedsUpdate($roleNeedsUpdate)
    {
        $this->container['roleNeedsUpdate'] = $roleNeedsUpdate;

        return $this;
    }

    /**
     * Gets default
     *
     * @return bool
     */
    public function getDefault()
    {
        return $this->container['default'];
    }

    /**
     * Sets default
     *
     * @param bool $default default
     *
     * @return $this
     */
    public function setDefault($default)
    {
        $this->container['default'] = $default;

        return $this;
    }

    /**
     * Gets base
     *
     * @return bool
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param bool $base base
     *
     * @return $this
     */
    public function setBase($base)
    {
        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


