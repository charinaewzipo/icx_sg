<?php
/**
 * OrganizationFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * OrganizationFeatures Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'realtimeCIC' => 'bool',
        'purecloud' => 'bool',
        'hipaa' => 'bool',
        'ucEnabled' => 'bool',
        'pci' => 'bool',
        'purecloudVoice' => 'bool',
        'xmppFederation' => 'bool',
        'chat' => 'bool',
        'informalPhotos' => 'bool',
        'directory' => 'bool',
        'contactCenter' => 'bool',
        'unifiedCommunications' => 'bool',
        'custserv' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'realtimeCIC' => null,
        'purecloud' => null,
        'hipaa' => null,
        'ucEnabled' => null,
        'pci' => null,
        'purecloudVoice' => null,
        'xmppFederation' => null,
        'chat' => null,
        'informalPhotos' => null,
        'directory' => null,
        'contactCenter' => null,
        'unifiedCommunications' => null,
        'custserv' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'realtimeCIC' => 'realtimeCIC',
        'purecloud' => 'purecloud',
        'hipaa' => 'hipaa',
        'ucEnabled' => 'ucEnabled',
        'pci' => 'pci',
        'purecloudVoice' => 'purecloudVoice',
        'xmppFederation' => 'xmppFederation',
        'chat' => 'chat',
        'informalPhotos' => 'informalPhotos',
        'directory' => 'directory',
        'contactCenter' => 'contactCenter',
        'unifiedCommunications' => 'unifiedCommunications',
        'custserv' => 'custserv'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'realtimeCIC' => 'setRealtimeCIC',
        'purecloud' => 'setPurecloud',
        'hipaa' => 'setHipaa',
        'ucEnabled' => 'setUcEnabled',
        'pci' => 'setPci',
        'purecloudVoice' => 'setPurecloudVoice',
        'xmppFederation' => 'setXmppFederation',
        'chat' => 'setChat',
        'informalPhotos' => 'setInformalPhotos',
        'directory' => 'setDirectory',
        'contactCenter' => 'setContactCenter',
        'unifiedCommunications' => 'setUnifiedCommunications',
        'custserv' => 'setCustserv'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'realtimeCIC' => 'getRealtimeCIC',
        'purecloud' => 'getPurecloud',
        'hipaa' => 'getHipaa',
        'ucEnabled' => 'getUcEnabled',
        'pci' => 'getPci',
        'purecloudVoice' => 'getPurecloudVoice',
        'xmppFederation' => 'getXmppFederation',
        'chat' => 'getChat',
        'informalPhotos' => 'getInformalPhotos',
        'directory' => 'getDirectory',
        'contactCenter' => 'getContactCenter',
        'unifiedCommunications' => 'getUnifiedCommunications',
        'custserv' => 'getCustserv'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['realtimeCIC'] = isset($data['realtimeCIC']) ? $data['realtimeCIC'] : null;
        $this->container['purecloud'] = isset($data['purecloud']) ? $data['purecloud'] : null;
        $this->container['hipaa'] = isset($data['hipaa']) ? $data['hipaa'] : null;
        $this->container['ucEnabled'] = isset($data['ucEnabled']) ? $data['ucEnabled'] : null;
        $this->container['pci'] = isset($data['pci']) ? $data['pci'] : null;
        $this->container['purecloudVoice'] = isset($data['purecloudVoice']) ? $data['purecloudVoice'] : null;
        $this->container['xmppFederation'] = isset($data['xmppFederation']) ? $data['xmppFederation'] : null;
        $this->container['chat'] = isset($data['chat']) ? $data['chat'] : null;
        $this->container['informalPhotos'] = isset($data['informalPhotos']) ? $data['informalPhotos'] : null;
        $this->container['directory'] = isset($data['directory']) ? $data['directory'] : null;
        $this->container['contactCenter'] = isset($data['contactCenter']) ? $data['contactCenter'] : null;
        $this->container['unifiedCommunications'] = isset($data['unifiedCommunications']) ? $data['unifiedCommunications'] : null;
        $this->container['custserv'] = isset($data['custserv']) ? $data['custserv'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets realtimeCIC
     *
     * @return bool
     */
    public function getRealtimeCIC()
    {
        return $this->container['realtimeCIC'];
    }

    /**
     * Sets realtimeCIC
     *
     * @param bool $realtimeCIC realtimeCIC
     *
     * @return $this
     */
    public function setRealtimeCIC($realtimeCIC)
    {
        $this->container['realtimeCIC'] = $realtimeCIC;

        return $this;
    }

    /**
     * Gets purecloud
     *
     * @return bool
     */
    public function getPurecloud()
    {
        return $this->container['purecloud'];
    }

    /**
     * Sets purecloud
     *
     * @param bool $purecloud purecloud
     *
     * @return $this
     */
    public function setPurecloud($purecloud)
    {
        $this->container['purecloud'] = $purecloud;

        return $this;
    }

    /**
     * Gets hipaa
     *
     * @return bool
     */
    public function getHipaa()
    {
        return $this->container['hipaa'];
    }

    /**
     * Sets hipaa
     *
     * @param bool $hipaa hipaa
     *
     * @return $this
     */
    public function setHipaa($hipaa)
    {
        $this->container['hipaa'] = $hipaa;

        return $this;
    }

    /**
     * Gets ucEnabled
     *
     * @return bool
     */
    public function getUcEnabled()
    {
        return $this->container['ucEnabled'];
    }

    /**
     * Sets ucEnabled
     *
     * @param bool $ucEnabled ucEnabled
     *
     * @return $this
     */
    public function setUcEnabled($ucEnabled)
    {
        $this->container['ucEnabled'] = $ucEnabled;

        return $this;
    }

    /**
     * Gets pci
     *
     * @return bool
     */
    public function getPci()
    {
        return $this->container['pci'];
    }

    /**
     * Sets pci
     *
     * @param bool $pci pci
     *
     * @return $this
     */
    public function setPci($pci)
    {
        $this->container['pci'] = $pci;

        return $this;
    }

    /**
     * Gets purecloudVoice
     *
     * @return bool
     */
    public function getPurecloudVoice()
    {
        return $this->container['purecloudVoice'];
    }

    /**
     * Sets purecloudVoice
     *
     * @param bool $purecloudVoice purecloudVoice
     *
     * @return $this
     */
    public function setPurecloudVoice($purecloudVoice)
    {
        $this->container['purecloudVoice'] = $purecloudVoice;

        return $this;
    }

    /**
     * Gets xmppFederation
     *
     * @return bool
     */
    public function getXmppFederation()
    {
        return $this->container['xmppFederation'];
    }

    /**
     * Sets xmppFederation
     *
     * @param bool $xmppFederation xmppFederation
     *
     * @return $this
     */
    public function setXmppFederation($xmppFederation)
    {
        $this->container['xmppFederation'] = $xmppFederation;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return bool
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param bool $chat chat
     *
     * @return $this
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets informalPhotos
     *
     * @return bool
     */
    public function getInformalPhotos()
    {
        return $this->container['informalPhotos'];
    }

    /**
     * Sets informalPhotos
     *
     * @param bool $informalPhotos informalPhotos
     *
     * @return $this
     */
    public function setInformalPhotos($informalPhotos)
    {
        $this->container['informalPhotos'] = $informalPhotos;

        return $this;
    }

    /**
     * Gets directory
     *
     * @return bool
     */
    public function getDirectory()
    {
        return $this->container['directory'];
    }

    /**
     * Sets directory
     *
     * @param bool $directory directory
     *
     * @return $this
     */
    public function setDirectory($directory)
    {
        $this->container['directory'] = $directory;

        return $this;
    }

    /**
     * Gets contactCenter
     *
     * @return bool
     */
    public function getContactCenter()
    {
        return $this->container['contactCenter'];
    }

    /**
     * Sets contactCenter
     *
     * @param bool $contactCenter contactCenter
     *
     * @return $this
     */
    public function setContactCenter($contactCenter)
    {
        $this->container['contactCenter'] = $contactCenter;

        return $this;
    }

    /**
     * Gets unifiedCommunications
     *
     * @return bool
     */
    public function getUnifiedCommunications()
    {
        return $this->container['unifiedCommunications'];
    }

    /**
     * Sets unifiedCommunications
     *
     * @param bool $unifiedCommunications unifiedCommunications
     *
     * @return $this
     */
    public function setUnifiedCommunications($unifiedCommunications)
    {
        $this->container['unifiedCommunications'] = $unifiedCommunications;

        return $this;
    }

    /**
     * Gets custserv
     *
     * @return bool
     */
    public function getCustserv()
    {
        return $this->container['custserv'];
    }

    /**
     * Sets custserv
     *
     * @param bool $custserv custserv
     *
     * @return $this
     */
    public function setCustserv($custserv)
    {
        $this->container['custserv'] = $custserv;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


