<?php
/**
 * FieldList
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * FieldList Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FieldList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FieldList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customLabels' => 'bool',
        'instructionText' => 'string',
        'key' => 'string',
        'labelKeys' => 'string[]',
        'params' => 'map[string,object]',
        'repeatable' => 'bool',
        'state' => 'string',
        'type' => 'string',
        'required' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customLabels' => null,
        'instructionText' => null,
        'key' => null,
        'labelKeys' => null,
        'params' => null,
        'repeatable' => null,
        'state' => null,
        'type' => null,
        'required' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customLabels' => 'customLabels',
        'instructionText' => 'instructionText',
        'key' => 'key',
        'labelKeys' => 'labelKeys',
        'params' => 'params',
        'repeatable' => 'repeatable',
        'state' => 'state',
        'type' => 'type',
        'required' => 'required'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customLabels' => 'setCustomLabels',
        'instructionText' => 'setInstructionText',
        'key' => 'setKey',
        'labelKeys' => 'setLabelKeys',
        'params' => 'setParams',
        'repeatable' => 'setRepeatable',
        'state' => 'setState',
        'type' => 'setType',
        'required' => 'setRequired'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customLabels' => 'getCustomLabels',
        'instructionText' => 'getInstructionText',
        'key' => 'getKey',
        'labelKeys' => 'getLabelKeys',
        'params' => 'getParams',
        'repeatable' => 'getRepeatable',
        'state' => 'getState',
        'type' => 'getType',
        'required' => 'getRequired'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customLabels'] = isset($data['customLabels']) ? $data['customLabels'] : null;
        $this->container['instructionText'] = isset($data['instructionText']) ? $data['instructionText'] : null;
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['labelKeys'] = isset($data['labelKeys']) ? $data['labelKeys'] : null;
        $this->container['params'] = isset($data['params']) ? $data['params'] : null;
        $this->container['repeatable'] = isset($data['repeatable']) ? $data['repeatable'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['required'] = isset($data['required']) ? $data['required'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customLabels
     *
     * @return bool
     */
    public function getCustomLabels()
    {
        return $this->container['customLabels'];
    }

    /**
     * Sets customLabels
     *
     * @param bool $customLabels customLabels
     *
     * @return $this
     */
    public function setCustomLabels($customLabels)
    {
        $this->container['customLabels'] = $customLabels;

        return $this;
    }

    /**
     * Gets instructionText
     *
     * @return string
     */
    public function getInstructionText()
    {
        return $this->container['instructionText'];
    }

    /**
     * Sets instructionText
     *
     * @param string $instructionText instructionText
     *
     * @return $this
     */
    public function setInstructionText($instructionText)
    {
        $this->container['instructionText'] = $instructionText;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets labelKeys
     *
     * @return string[]
     */
    public function getLabelKeys()
    {
        return $this->container['labelKeys'];
    }

    /**
     * Sets labelKeys
     *
     * @param string[] $labelKeys labelKeys
     *
     * @return $this
     */
    public function setLabelKeys($labelKeys)
    {
        $this->container['labelKeys'] = $labelKeys;

        return $this;
    }

    /**
     * Gets params
     *
     * @return map[string,object]
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param map[string,object] $params params
     *
     * @return $this
     */
    public function setParams($params)
    {
        $this->container['params'] = $params;

        return $this;
    }

    /**
     * Gets repeatable
     *
     * @return bool
     */
    public function getRepeatable()
    {
        return $this->container['repeatable'];
    }

    /**
     * Sets repeatable
     *
     * @param bool $repeatable repeatable
     *
     * @return $this
     */
    public function setRepeatable($repeatable)
    {
        $this->container['repeatable'] = $repeatable;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool $required required
     *
     * @return $this
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


