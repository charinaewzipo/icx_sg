<?php
/**
 * RouteGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * RouteGroup Class Doc Comment
 *
 * @category Class
 * @description Route group for calculated forecasts
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RouteGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attributes' => '\PureCloudPlatform\Client\V2\Model\RouteGroupAttributes',
        'offeredPerInterval' => 'double[]',
        'averageTalkTimeSecondsPerInterval' => 'double[]',
        'averageAfterCallWorkSecondsPerInterval' => 'double[]',
        'completedPerInterval' => 'double[]',
        'abandonedPerInterval' => 'double[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attributes' => null,
        'offeredPerInterval' => 'double',
        'averageTalkTimeSecondsPerInterval' => 'double',
        'averageAfterCallWorkSecondsPerInterval' => 'double',
        'completedPerInterval' => 'double',
        'abandonedPerInterval' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attributes' => 'attributes',
        'offeredPerInterval' => 'offeredPerInterval',
        'averageTalkTimeSecondsPerInterval' => 'averageTalkTimeSecondsPerInterval',
        'averageAfterCallWorkSecondsPerInterval' => 'averageAfterCallWorkSecondsPerInterval',
        'completedPerInterval' => 'completedPerInterval',
        'abandonedPerInterval' => 'abandonedPerInterval'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attributes' => 'setAttributes',
        'offeredPerInterval' => 'setOfferedPerInterval',
        'averageTalkTimeSecondsPerInterval' => 'setAverageTalkTimeSecondsPerInterval',
        'averageAfterCallWorkSecondsPerInterval' => 'setAverageAfterCallWorkSecondsPerInterval',
        'completedPerInterval' => 'setCompletedPerInterval',
        'abandonedPerInterval' => 'setAbandonedPerInterval'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attributes' => 'getAttributes',
        'offeredPerInterval' => 'getOfferedPerInterval',
        'averageTalkTimeSecondsPerInterval' => 'getAverageTalkTimeSecondsPerInterval',
        'averageAfterCallWorkSecondsPerInterval' => 'getAverageAfterCallWorkSecondsPerInterval',
        'completedPerInterval' => 'getCompletedPerInterval',
        'abandonedPerInterval' => 'getAbandonedPerInterval'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['offeredPerInterval'] = isset($data['offeredPerInterval']) ? $data['offeredPerInterval'] : null;
        $this->container['averageTalkTimeSecondsPerInterval'] = isset($data['averageTalkTimeSecondsPerInterval']) ? $data['averageTalkTimeSecondsPerInterval'] : null;
        $this->container['averageAfterCallWorkSecondsPerInterval'] = isset($data['averageAfterCallWorkSecondsPerInterval']) ? $data['averageAfterCallWorkSecondsPerInterval'] : null;
        $this->container['completedPerInterval'] = isset($data['completedPerInterval']) ? $data['completedPerInterval'] : null;
        $this->container['abandonedPerInterval'] = isset($data['abandonedPerInterval']) ? $data['abandonedPerInterval'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['offeredPerInterval'] === null) {
            $invalidProperties[] = "'offeredPerInterval' can't be null";
        }
        if ($this->container['averageTalkTimeSecondsPerInterval'] === null) {
            $invalidProperties[] = "'averageTalkTimeSecondsPerInterval' can't be null";
        }
        if ($this->container['averageAfterCallWorkSecondsPerInterval'] === null) {
            $invalidProperties[] = "'averageAfterCallWorkSecondsPerInterval' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attributes
     *
     * @return \PureCloudPlatform\Client\V2\Model\RouteGroupAttributes
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \PureCloudPlatform\Client\V2\Model\RouteGroupAttributes $attributes The attributes that describe this route group
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets offeredPerInterval
     *
     * @return double[]
     */
    public function getOfferedPerInterval()
    {
        return $this->container['offeredPerInterval'];
    }

    /**
     * Sets offeredPerInterval
     *
     * @param double[] $offeredPerInterval Interactions offered per 15 minute interval
     *
     * @return $this
     */
    public function setOfferedPerInterval($offeredPerInterval)
    {
        $this->container['offeredPerInterval'] = $offeredPerInterval;

        return $this;
    }

    /**
     * Gets averageTalkTimeSecondsPerInterval
     *
     * @return double[]
     */
    public function getAverageTalkTimeSecondsPerInterval()
    {
        return $this->container['averageTalkTimeSecondsPerInterval'];
    }

    /**
     * Sets averageTalkTimeSecondsPerInterval
     *
     * @param double[] $averageTalkTimeSecondsPerInterval Average talk time in seconds per 15 minute interval
     *
     * @return $this
     */
    public function setAverageTalkTimeSecondsPerInterval($averageTalkTimeSecondsPerInterval)
    {
        $this->container['averageTalkTimeSecondsPerInterval'] = $averageTalkTimeSecondsPerInterval;

        return $this;
    }

    /**
     * Gets averageAfterCallWorkSecondsPerInterval
     *
     * @return double[]
     */
    public function getAverageAfterCallWorkSecondsPerInterval()
    {
        return $this->container['averageAfterCallWorkSecondsPerInterval'];
    }

    /**
     * Sets averageAfterCallWorkSecondsPerInterval
     *
     * @param double[] $averageAfterCallWorkSecondsPerInterval Average after call work in seconds per 15 minute interval
     *
     * @return $this
     */
    public function setAverageAfterCallWorkSecondsPerInterval($averageAfterCallWorkSecondsPerInterval)
    {
        $this->container['averageAfterCallWorkSecondsPerInterval'] = $averageAfterCallWorkSecondsPerInterval;

        return $this;
    }

    /**
     * Gets completedPerInterval
     *
     * @return double[]
     */
    public function getCompletedPerInterval()
    {
        return $this->container['completedPerInterval'];
    }

    /**
     * Sets completedPerInterval
     *
     * @param double[] $completedPerInterval Interactions completed per 15 minute interval
     *
     * @return $this
     */
    public function setCompletedPerInterval($completedPerInterval)
    {
        $this->container['completedPerInterval'] = $completedPerInterval;

        return $this;
    }

    /**
     * Gets abandonedPerInterval
     *
     * @return double[]
     */
    public function getAbandonedPerInterval()
    {
        return $this->container['abandonedPerInterval'];
    }

    /**
     * Sets abandonedPerInterval
     *
     * @param double[] $abandonedPerInterval Interactions abandoned per 15 minute interval
     *
     * @return $this
     */
    public function setAbandonedPerInterval($abandonedPerInterval)
    {
        $this->container['abandonedPerInterval'] = $abandonedPerInterval;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


