<?php
/**
 * EvaluationQuestionGroup
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * EvaluationQuestionGroup Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluationQuestionGroup implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EvaluationQuestionGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'defaultAnswersToHighest' => 'bool',
        'defaultAnswersToNA' => 'bool',
        'naEnabled' => 'bool',
        'weight' => 'float',
        'manualWeight' => 'bool',
        'questions' => '\PureCloudPlatform\Client\V2\Model\EvaluationQuestion[]',
        'visibilityCondition' => '\PureCloudPlatform\Client\V2\Model\VisibilityCondition'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'defaultAnswersToHighest' => null,
        'defaultAnswersToNA' => null,
        'naEnabled' => null,
        'weight' => 'float',
        'manualWeight' => null,
        'questions' => null,
        'visibilityCondition' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'defaultAnswersToHighest' => 'defaultAnswersToHighest',
        'defaultAnswersToNA' => 'defaultAnswersToNA',
        'naEnabled' => 'naEnabled',
        'weight' => 'weight',
        'manualWeight' => 'manualWeight',
        'questions' => 'questions',
        'visibilityCondition' => 'visibilityCondition'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'defaultAnswersToHighest' => 'setDefaultAnswersToHighest',
        'defaultAnswersToNA' => 'setDefaultAnswersToNA',
        'naEnabled' => 'setNaEnabled',
        'weight' => 'setWeight',
        'manualWeight' => 'setManualWeight',
        'questions' => 'setQuestions',
        'visibilityCondition' => 'setVisibilityCondition'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'defaultAnswersToHighest' => 'getDefaultAnswersToHighest',
        'defaultAnswersToNA' => 'getDefaultAnswersToNA',
        'naEnabled' => 'getNaEnabled',
        'weight' => 'getWeight',
        'manualWeight' => 'getManualWeight',
        'questions' => 'getQuestions',
        'visibilityCondition' => 'getVisibilityCondition'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['defaultAnswersToHighest'] = isset($data['defaultAnswersToHighest']) ? $data['defaultAnswersToHighest'] : null;
        $this->container['defaultAnswersToNA'] = isset($data['defaultAnswersToNA']) ? $data['defaultAnswersToNA'] : null;
        $this->container['naEnabled'] = isset($data['naEnabled']) ? $data['naEnabled'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['manualWeight'] = isset($data['manualWeight']) ? $data['manualWeight'] : null;
        $this->container['questions'] = isset($data['questions']) ? $data['questions'] : null;
        $this->container['visibilityCondition'] = isset($data['visibilityCondition']) ? $data['visibilityCondition'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets defaultAnswersToHighest
     *
     * @return bool
     */
    public function getDefaultAnswersToHighest()
    {
        return $this->container['defaultAnswersToHighest'];
    }

    /**
     * Sets defaultAnswersToHighest
     *
     * @param bool $defaultAnswersToHighest defaultAnswersToHighest
     *
     * @return $this
     */
    public function setDefaultAnswersToHighest($defaultAnswersToHighest)
    {
        $this->container['defaultAnswersToHighest'] = $defaultAnswersToHighest;

        return $this;
    }

    /**
     * Gets defaultAnswersToNA
     *
     * @return bool
     */
    public function getDefaultAnswersToNA()
    {
        return $this->container['defaultAnswersToNA'];
    }

    /**
     * Sets defaultAnswersToNA
     *
     * @param bool $defaultAnswersToNA defaultAnswersToNA
     *
     * @return $this
     */
    public function setDefaultAnswersToNA($defaultAnswersToNA)
    {
        $this->container['defaultAnswersToNA'] = $defaultAnswersToNA;

        return $this;
    }

    /**
     * Gets naEnabled
     *
     * @return bool
     */
    public function getNaEnabled()
    {
        return $this->container['naEnabled'];
    }

    /**
     * Sets naEnabled
     *
     * @param bool $naEnabled naEnabled
     *
     * @return $this
     */
    public function setNaEnabled($naEnabled)
    {
        $this->container['naEnabled'] = $naEnabled;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets manualWeight
     *
     * @return bool
     */
    public function getManualWeight()
    {
        return $this->container['manualWeight'];
    }

    /**
     * Sets manualWeight
     *
     * @param bool $manualWeight manualWeight
     *
     * @return $this
     */
    public function setManualWeight($manualWeight)
    {
        $this->container['manualWeight'] = $manualWeight;

        return $this;
    }

    /**
     * Gets questions
     *
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationQuestion[]
     */
    public function getQuestions()
    {
        return $this->container['questions'];
    }

    /**
     * Sets questions
     *
     * @param \PureCloudPlatform\Client\V2\Model\EvaluationQuestion[] $questions questions
     *
     * @return $this
     */
    public function setQuestions($questions)
    {
        $this->container['questions'] = $questions;

        return $this;
    }

    /**
     * Gets visibilityCondition
     *
     * @return \PureCloudPlatform\Client\V2\Model\VisibilityCondition
     */
    public function getVisibilityCondition()
    {
        return $this->container['visibilityCondition'];
    }

    /**
     * Sets visibilityCondition
     *
     * @param \PureCloudPlatform\Client\V2\Model\VisibilityCondition $visibilityCondition visibilityCondition
     *
     * @return $this
     */
    public function setVisibilityCondition($visibilityCondition)
    {
        $this->container['visibilityCondition'] = $visibilityCondition;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


