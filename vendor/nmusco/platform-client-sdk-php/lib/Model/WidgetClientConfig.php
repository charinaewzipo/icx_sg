<?php
/**
 * WidgetClientConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * WidgetClientConfig Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WidgetClientConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WidgetClientConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'v1' => '\PureCloudPlatform\Client\V2\Model\WidgetClientConfigV1',
        'v2' => '\PureCloudPlatform\Client\V2\Model\WidgetClientConfigV2',
        'v1Http' => '\PureCloudPlatform\Client\V2\Model\WidgetClientConfigV1Http',
        'thirdParty' => '\PureCloudPlatform\Client\V2\Model\WidgetClientConfigThirdParty'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'v1' => null,
        'v2' => null,
        'v1Http' => null,
        'thirdParty' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'v1' => 'v1',
        'v2' => 'v2',
        'v1Http' => 'v1-http',
        'thirdParty' => 'third-party'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'v1' => 'setV1',
        'v2' => 'setV2',
        'v1Http' => 'setV1Http',
        'thirdParty' => 'setThirdParty'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'v1' => 'getV1',
        'v2' => 'getV2',
        'v1Http' => 'getV1Http',
        'thirdParty' => 'getThirdParty'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['v1'] = isset($data['v1']) ? $data['v1'] : null;
        $this->container['v2'] = isset($data['v2']) ? $data['v2'] : null;
        $this->container['v1Http'] = isset($data['v1Http']) ? $data['v1Http'] : null;
        $this->container['thirdParty'] = isset($data['thirdParty']) ? $data['thirdParty'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets v1
     *
     * @return \PureCloudPlatform\Client\V2\Model\WidgetClientConfigV1
     */
    public function getV1()
    {
        return $this->container['v1'];
    }

    /**
     * Sets v1
     *
     * @param \PureCloudPlatform\Client\V2\Model\WidgetClientConfigV1 $v1 v1
     *
     * @return $this
     */
    public function setV1($v1)
    {
        $this->container['v1'] = $v1;

        return $this;
    }

    /**
     * Gets v2
     *
     * @return \PureCloudPlatform\Client\V2\Model\WidgetClientConfigV2
     */
    public function getV2()
    {
        return $this->container['v2'];
    }

    /**
     * Sets v2
     *
     * @param \PureCloudPlatform\Client\V2\Model\WidgetClientConfigV2 $v2 v2
     *
     * @return $this
     */
    public function setV2($v2)
    {
        $this->container['v2'] = $v2;

        return $this;
    }

    /**
     * Gets v1Http
     *
     * @return \PureCloudPlatform\Client\V2\Model\WidgetClientConfigV1Http
     */
    public function getV1Http()
    {
        return $this->container['v1Http'];
    }

    /**
     * Sets v1Http
     *
     * @param \PureCloudPlatform\Client\V2\Model\WidgetClientConfigV1Http $v1Http v1Http
     *
     * @return $this
     */
    public function setV1Http($v1Http)
    {
        $this->container['v1Http'] = $v1Http;

        return $this;
    }

    /**
     * Gets thirdParty
     *
     * @return \PureCloudPlatform\Client\V2\Model\WidgetClientConfigThirdParty
     */
    public function getThirdParty()
    {
        return $this->container['thirdParty'];
    }

    /**
     * Sets thirdParty
     *
     * @param \PureCloudPlatform\Client\V2\Model\WidgetClientConfigThirdParty $thirdParty thirdParty
     *
     * @return $this
     */
    public function setThirdParty($thirdParty)
    {
        $this->container['thirdParty'] = $thirdParty;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


