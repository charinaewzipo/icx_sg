<?php
/**
 * EdgeInterface
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * EdgeInterface Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EdgeInterface implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EdgeInterface';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'ipAddress' => 'string',
        'name' => 'string',
        'macAddress' => 'string',
        'ifName' => 'string',
        'endpoints' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef[]',
        'lineTypes' => 'string[]',
        'addressFamilyId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'ipAddress' => null,
        'name' => null,
        'macAddress' => null,
        'ifName' => null,
        'endpoints' => null,
        'lineTypes' => null,
        'addressFamilyId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'ipAddress' => 'ipAddress',
        'name' => 'name',
        'macAddress' => 'macAddress',
        'ifName' => 'ifName',
        'endpoints' => 'endpoints',
        'lineTypes' => 'lineTypes',
        'addressFamilyId' => 'addressFamilyId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'ipAddress' => 'setIpAddress',
        'name' => 'setName',
        'macAddress' => 'setMacAddress',
        'ifName' => 'setIfName',
        'endpoints' => 'setEndpoints',
        'lineTypes' => 'setLineTypes',
        'addressFamilyId' => 'setAddressFamilyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'ipAddress' => 'getIpAddress',
        'name' => 'getName',
        'macAddress' => 'getMacAddress',
        'ifName' => 'getIfName',
        'endpoints' => 'getEndpoints',
        'lineTypes' => 'getLineTypes',
        'addressFamilyId' => 'getAddressFamilyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LINE_TYPES_TIE = 'TIE';
    const LINE_TYPES_NETWORK = 'NETWORK';
    const LINE_TYPES_TRUNK = 'TRUNK';
    const LINE_TYPES_STATION = 'STATION';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLineTypesAllowableValues()
    {
        return [
            self::LINE_TYPES_TIE,
            self::LINE_TYPES_NETWORK,
            self::LINE_TYPES_TRUNK,
            self::LINE_TYPES_STATION,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['ipAddress'] = isset($data['ipAddress']) ? $data['ipAddress'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['macAddress'] = isset($data['macAddress']) ? $data['macAddress'] : null;
        $this->container['ifName'] = isset($data['ifName']) ? $data['ifName'] : null;
        $this->container['endpoints'] = isset($data['endpoints']) ? $data['endpoints'] : null;
        $this->container['lineTypes'] = isset($data['lineTypes']) ? $data['lineTypes'] : null;
        $this->container['addressFamilyId'] = isset($data['addressFamilyId']) ? $data['addressFamilyId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ipAddress
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ipAddress'];
    }

    /**
     * Sets ipAddress
     *
     * @param string $ipAddress ipAddress
     *
     * @return $this
     */
    public function setIpAddress($ipAddress)
    {
        $this->container['ipAddress'] = $ipAddress;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets macAddress
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['macAddress'];
    }

    /**
     * Sets macAddress
     *
     * @param string $macAddress macAddress
     *
     * @return $this
     */
    public function setMacAddress($macAddress)
    {
        $this->container['macAddress'] = $macAddress;

        return $this;
    }

    /**
     * Gets ifName
     *
     * @return string
     */
    public function getIfName()
    {
        return $this->container['ifName'];
    }

    /**
     * Sets ifName
     *
     * @param string $ifName ifName
     *
     * @return $this
     */
    public function setIfName($ifName)
    {
        $this->container['ifName'] = $ifName;

        return $this;
    }

    /**
     * Gets endpoints
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef[]
     */
    public function getEndpoints()
    {
        return $this->container['endpoints'];
    }

    /**
     * Sets endpoints
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef[] $endpoints endpoints
     *
     * @return $this
     */
    public function setEndpoints($endpoints)
    {
        $this->container['endpoints'] = $endpoints;

        return $this;
    }

    /**
     * Gets lineTypes
     *
     * @return string[]
     */
    public function getLineTypes()
    {
        return $this->container['lineTypes'];
    }

    /**
     * Sets lineTypes
     *
     * @param string[] $lineTypes lineTypes
     *
     * @return $this
     */
    public function setLineTypes($lineTypes)
    {
        $allowedValues = $this->getLineTypesAllowableValues();
        if (!is_null($lineTypes) && array_diff($lineTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'lineTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lineTypes'] = $lineTypes;

        return $this;
    }

    /**
     * Gets addressFamilyId
     *
     * @return string
     */
    public function getAddressFamilyId()
    {
        return $this->container['addressFamilyId'];
    }

    /**
     * Sets addressFamilyId
     *
     * @param string $addressFamilyId addressFamilyId
     *
     * @return $this
     */
    public function setAddressFamilyId($addressFamilyId)
    {
        $this->container['addressFamilyId'] = $addressFamilyId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


