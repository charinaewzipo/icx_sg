<?php
/**
 * CallHistoryParticipant
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CallHistoryParticipant Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallHistoryParticipant implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallHistoryParticipant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'address' => 'string',
        'startTime' => '\DateTime',
        'endTime' => '\DateTime',
        'purpose' => 'string',
        'direction' => 'string',
        'ani' => 'string',
        'dnis' => 'string',
        'user' => '\PureCloudPlatform\Client\V2\Model\User',
        'queue' => '\PureCloudPlatform\Client\V2\Model\Queue',
        'group' => '\PureCloudPlatform\Client\V2\Model\Group',
        'disconnectType' => 'string',
        'externalContact' => '\PureCloudPlatform\Client\V2\Model\ExternalContact',
        'externalOrganization' => '\PureCloudPlatform\Client\V2\Model\ExternalOrganization',
        'didInteract' => 'bool',
        'sipResponseCodes' => 'int[]',
        'flaggedReason' => 'string',
        'outboundCampaign' => '\PureCloudPlatform\Client\V2\Model\Campaign'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'address' => null,
        'startTime' => 'date-time',
        'endTime' => 'date-time',
        'purpose' => null,
        'direction' => null,
        'ani' => null,
        'dnis' => null,
        'user' => null,
        'queue' => null,
        'group' => null,
        'disconnectType' => null,
        'externalContact' => null,
        'externalOrganization' => null,
        'didInteract' => null,
        'sipResponseCodes' => 'int64',
        'flaggedReason' => null,
        'outboundCampaign' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'address' => 'address',
        'startTime' => 'startTime',
        'endTime' => 'endTime',
        'purpose' => 'purpose',
        'direction' => 'direction',
        'ani' => 'ani',
        'dnis' => 'dnis',
        'user' => 'user',
        'queue' => 'queue',
        'group' => 'group',
        'disconnectType' => 'disconnectType',
        'externalContact' => 'externalContact',
        'externalOrganization' => 'externalOrganization',
        'didInteract' => 'didInteract',
        'sipResponseCodes' => 'sipResponseCodes',
        'flaggedReason' => 'flaggedReason',
        'outboundCampaign' => 'outboundCampaign'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'address' => 'setAddress',
        'startTime' => 'setStartTime',
        'endTime' => 'setEndTime',
        'purpose' => 'setPurpose',
        'direction' => 'setDirection',
        'ani' => 'setAni',
        'dnis' => 'setDnis',
        'user' => 'setUser',
        'queue' => 'setQueue',
        'group' => 'setGroup',
        'disconnectType' => 'setDisconnectType',
        'externalContact' => 'setExternalContact',
        'externalOrganization' => 'setExternalOrganization',
        'didInteract' => 'setDidInteract',
        'sipResponseCodes' => 'setSipResponseCodes',
        'flaggedReason' => 'setFlaggedReason',
        'outboundCampaign' => 'setOutboundCampaign'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'address' => 'getAddress',
        'startTime' => 'getStartTime',
        'endTime' => 'getEndTime',
        'purpose' => 'getPurpose',
        'direction' => 'getDirection',
        'ani' => 'getAni',
        'dnis' => 'getDnis',
        'user' => 'getUser',
        'queue' => 'getQueue',
        'group' => 'getGroup',
        'disconnectType' => 'getDisconnectType',
        'externalContact' => 'getExternalContact',
        'externalOrganization' => 'getExternalOrganization',
        'didInteract' => 'getDidInteract',
        'sipResponseCodes' => 'getSipResponseCodes',
        'flaggedReason' => 'getFlaggedReason',
        'outboundCampaign' => 'getOutboundCampaign'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECTION_INBOUND = 'inbound';
    const DIRECTION_OUTBOUND = 'outbound';
    const DISCONNECT_TYPE_ENDPOINT = 'endpoint';
    const DISCONNECT_TYPE_CLIENT = 'client';
    const DISCONNECT_TYPE_SYSTEM = 'system';
    const DISCONNECT_TYPE_TRANSFER = 'transfer';
    const DISCONNECT_TYPE_TRANSFERCONFERENCE = 'transfer.conference';
    const DISCONNECT_TYPE_TRANSFERCONSULT = 'transfer.consult';
    const DISCONNECT_TYPE_TRANSFERFORWARD = 'transfer.forward';
    const DISCONNECT_TYPE_TRANSFERNOANSWER = 'transfer.noanswer';
    const DISCONNECT_TYPE_TRANSFERNOTAVAILABLE = 'transfer.notavailable';
    const DISCONNECT_TYPE_TRANSPORTFAILURE = 'transport.failure';
    const DISCONNECT_TYPE_ERROR = 'error';
    const DISCONNECT_TYPE_PEER = 'peer';
    const DISCONNECT_TYPE_OTHER = 'other';
    const DISCONNECT_TYPE_SPAM = 'spam';
    const FLAGGED_REASON_GENERAL = 'general';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INBOUND,
            self::DIRECTION_OUTBOUND,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisconnectTypeAllowableValues()
    {
        return [
            self::DISCONNECT_TYPE_ENDPOINT,
            self::DISCONNECT_TYPE_CLIENT,
            self::DISCONNECT_TYPE_SYSTEM,
            self::DISCONNECT_TYPE_TRANSFER,
            self::DISCONNECT_TYPE_TRANSFERCONFERENCE,
            self::DISCONNECT_TYPE_TRANSFERCONSULT,
            self::DISCONNECT_TYPE_TRANSFERFORWARD,
            self::DISCONNECT_TYPE_TRANSFERNOANSWER,
            self::DISCONNECT_TYPE_TRANSFERNOTAVAILABLE,
            self::DISCONNECT_TYPE_TRANSPORTFAILURE,
            self::DISCONNECT_TYPE_ERROR,
            self::DISCONNECT_TYPE_PEER,
            self::DISCONNECT_TYPE_OTHER,
            self::DISCONNECT_TYPE_SPAM,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFlaggedReasonAllowableValues()
    {
        return [
            self::FLAGGED_REASON_GENERAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['endTime'] = isset($data['endTime']) ? $data['endTime'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['ani'] = isset($data['ani']) ? $data['ani'] : null;
        $this->container['dnis'] = isset($data['dnis']) ? $data['dnis'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['queue'] = isset($data['queue']) ? $data['queue'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['disconnectType'] = isset($data['disconnectType']) ? $data['disconnectType'] : null;
        $this->container['externalContact'] = isset($data['externalContact']) ? $data['externalContact'] : null;
        $this->container['externalOrganization'] = isset($data['externalOrganization']) ? $data['externalOrganization'] : null;
        $this->container['didInteract'] = isset($data['didInteract']) ? $data['didInteract'] : null;
        $this->container['sipResponseCodes'] = isset($data['sipResponseCodes']) ? $data['sipResponseCodes'] : null;
        $this->container['flaggedReason'] = isset($data['flaggedReason']) ? $data['flaggedReason'] : null;
        $this->container['outboundCampaign'] = isset($data['outboundCampaign']) ? $data['outboundCampaign'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDisconnectTypeAllowableValues();
        if (!is_null($this->container['disconnectType']) && !in_array($this->container['disconnectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'disconnectType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFlaggedReasonAllowableValues();
        if (!is_null($this->container['flaggedReason']) && !in_array($this->container['flaggedReason'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'flaggedReason', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique participant ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The display friendly name of the participant.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address The participant address.
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime The time when this participant first joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets endTime
     *
     * @return \DateTime
     */
    public function getEndTime()
    {
        return $this->container['endTime'];
    }

    /**
     * Sets endTime
     *
     * @param \DateTime $endTime The time when this participant went disconnected for this media (eg: video disconnected time). Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setEndTime($endTime)
    {
        $this->container['endTime'] = $endTime;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose The participant's purpose.  Values can be: 'agent', 'user', 'customer', 'external', 'acd', 'ivr
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction The participant's direction.  Values can be: 'inbound' or 'outbound'
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets ani
     *
     * @return string
     */
    public function getAni()
    {
        return $this->container['ani'];
    }

    /**
     * Sets ani
     *
     * @param string $ani The call ANI.
     *
     * @return $this
     */
    public function setAni($ani)
    {
        $this->container['ani'] = $ani;

        return $this;
    }

    /**
     * Gets dnis
     *
     * @return string
     */
    public function getDnis()
    {
        return $this->container['dnis'];
    }

    /**
     * Sets dnis
     *
     * @param string $dnis The call DNIS.
     *
     * @return $this
     */
    public function setDnis($dnis)
    {
        $this->container['dnis'] = $dnis;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $user The PureCloud user for this participant.
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return \PureCloudPlatform\Client\V2\Model\Queue
     */
    public function getQueue()
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param \PureCloudPlatform\Client\V2\Model\Queue $queue The PureCloud queue for this participant.
     *
     * @return $this
     */
    public function setQueue($queue)
    {
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \PureCloudPlatform\Client\V2\Model\Group
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \PureCloudPlatform\Client\V2\Model\Group $group The group involved in the group ring call.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets disconnectType
     *
     * @return string
     */
    public function getDisconnectType()
    {
        return $this->container['disconnectType'];
    }

    /**
     * Sets disconnectType
     *
     * @param string $disconnectType The reason the participant was disconnected from the conversation.
     *
     * @return $this
     */
    public function setDisconnectType($disconnectType)
    {
        $allowedValues = $this->getDisconnectTypeAllowableValues();
        if (!is_null($disconnectType) && !in_array($disconnectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'disconnectType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disconnectType'] = $disconnectType;

        return $this;
    }

    /**
     * Gets externalContact
     *
     * @return \PureCloudPlatform\Client\V2\Model\ExternalContact
     */
    public function getExternalContact()
    {
        return $this->container['externalContact'];
    }

    /**
     * Sets externalContact
     *
     * @param \PureCloudPlatform\Client\V2\Model\ExternalContact $externalContact The PureCloud external contact
     *
     * @return $this
     */
    public function setExternalContact($externalContact)
    {
        $this->container['externalContact'] = $externalContact;

        return $this;
    }

    /**
     * Gets externalOrganization
     *
     * @return \PureCloudPlatform\Client\V2\Model\ExternalOrganization
     */
    public function getExternalOrganization()
    {
        return $this->container['externalOrganization'];
    }

    /**
     * Sets externalOrganization
     *
     * @param \PureCloudPlatform\Client\V2\Model\ExternalOrganization $externalOrganization The PureCloud external organization
     *
     * @return $this
     */
    public function setExternalOrganization($externalOrganization)
    {
        $this->container['externalOrganization'] = $externalOrganization;

        return $this;
    }

    /**
     * Gets didInteract
     *
     * @return bool
     */
    public function getDidInteract()
    {
        return $this->container['didInteract'];
    }

    /**
     * Sets didInteract
     *
     * @param bool $didInteract Indicates whether the contact ever connected
     *
     * @return $this
     */
    public function setDidInteract($didInteract)
    {
        $this->container['didInteract'] = $didInteract;

        return $this;
    }

    /**
     * Gets sipResponseCodes
     *
     * @return int[]
     */
    public function getSipResponseCodes()
    {
        return $this->container['sipResponseCodes'];
    }

    /**
     * Sets sipResponseCodes
     *
     * @param int[] $sipResponseCodes Indicates SIP Response codes associated with the participant
     *
     * @return $this
     */
    public function setSipResponseCodes($sipResponseCodes)
    {
        $this->container['sipResponseCodes'] = $sipResponseCodes;

        return $this;
    }

    /**
     * Gets flaggedReason
     *
     * @return string
     */
    public function getFlaggedReason()
    {
        return $this->container['flaggedReason'];
    }

    /**
     * Sets flaggedReason
     *
     * @param string $flaggedReason The reason specifying why participant flagged the conversation.
     *
     * @return $this
     */
    public function setFlaggedReason($flaggedReason)
    {
        $allowedValues = $this->getFlaggedReasonAllowableValues();
        if (!is_null($flaggedReason) && !in_array($flaggedReason, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'flaggedReason', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['flaggedReason'] = $flaggedReason;

        return $this;
    }

    /**
     * Gets outboundCampaign
     *
     * @return \PureCloudPlatform\Client\V2\Model\Campaign
     */
    public function getOutboundCampaign()
    {
        return $this->container['outboundCampaign'];
    }

    /**
     * Sets outboundCampaign
     *
     * @param \PureCloudPlatform\Client\V2\Model\Campaign $outboundCampaign The outbound campaign associated with the participant
     *
     * @return $this
     */
    public function setOutboundCampaign($outboundCampaign)
    {
        $this->container['outboundCampaign'] = $outboundCampaign;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


