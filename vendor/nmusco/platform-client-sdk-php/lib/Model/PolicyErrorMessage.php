<?php
/**
 * PolicyErrorMessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * PolicyErrorMessage Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PolicyErrorMessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PolicyErrorMessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'statusCode' => 'int',
        'userMessage' => 'object',
        'userParamsMessage' => 'string',
        'errorCode' => 'string',
        'correlationId' => 'string',
        'userParams' => '\PureCloudPlatform\Client\V2\Model\UserParam[]',
        'insertDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'statusCode' => 'int32',
        'userMessage' => null,
        'userParamsMessage' => null,
        'errorCode' => null,
        'correlationId' => null,
        'userParams' => null,
        'insertDate' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'statusCode' => 'statusCode',
        'userMessage' => 'userMessage',
        'userParamsMessage' => 'userParamsMessage',
        'errorCode' => 'errorCode',
        'correlationId' => 'correlationId',
        'userParams' => 'userParams',
        'insertDate' => 'insertDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'statusCode' => 'setStatusCode',
        'userMessage' => 'setUserMessage',
        'userParamsMessage' => 'setUserParamsMessage',
        'errorCode' => 'setErrorCode',
        'correlationId' => 'setCorrelationId',
        'userParams' => 'setUserParams',
        'insertDate' => 'setInsertDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'statusCode' => 'getStatusCode',
        'userMessage' => 'getUserMessage',
        'userParamsMessage' => 'getUserParamsMessage',
        'errorCode' => 'getErrorCode',
        'correlationId' => 'getCorrelationId',
        'userParams' => 'getUserParams',
        'insertDate' => 'getInsertDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['statusCode'] = isset($data['statusCode']) ? $data['statusCode'] : null;
        $this->container['userMessage'] = isset($data['userMessage']) ? $data['userMessage'] : null;
        $this->container['userParamsMessage'] = isset($data['userParamsMessage']) ? $data['userParamsMessage'] : null;
        $this->container['errorCode'] = isset($data['errorCode']) ? $data['errorCode'] : null;
        $this->container['correlationId'] = isset($data['correlationId']) ? $data['correlationId'] : null;
        $this->container['userParams'] = isset($data['userParams']) ? $data['userParams'] : null;
        $this->container['insertDate'] = isset($data['insertDate']) ? $data['insertDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets statusCode
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['statusCode'];
    }

    /**
     * Sets statusCode
     *
     * @param int $statusCode statusCode
     *
     * @return $this
     */
    public function setStatusCode($statusCode)
    {
        $this->container['statusCode'] = $statusCode;

        return $this;
    }

    /**
     * Gets userMessage
     *
     * @return object
     */
    public function getUserMessage()
    {
        return $this->container['userMessage'];
    }

    /**
     * Sets userMessage
     *
     * @param object $userMessage userMessage
     *
     * @return $this
     */
    public function setUserMessage($userMessage)
    {
        $this->container['userMessage'] = $userMessage;

        return $this;
    }

    /**
     * Gets userParamsMessage
     *
     * @return string
     */
    public function getUserParamsMessage()
    {
        return $this->container['userParamsMessage'];
    }

    /**
     * Sets userParamsMessage
     *
     * @param string $userParamsMessage userParamsMessage
     *
     * @return $this
     */
    public function setUserParamsMessage($userParamsMessage)
    {
        $this->container['userParamsMessage'] = $userParamsMessage;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param string $errorCode errorCode
     *
     * @return $this
     */
    public function setErrorCode($errorCode)
    {
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets correlationId
     *
     * @return string
     */
    public function getCorrelationId()
    {
        return $this->container['correlationId'];
    }

    /**
     * Sets correlationId
     *
     * @param string $correlationId correlationId
     *
     * @return $this
     */
    public function setCorrelationId($correlationId)
    {
        $this->container['correlationId'] = $correlationId;

        return $this;
    }

    /**
     * Gets userParams
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserParam[]
     */
    public function getUserParams()
    {
        return $this->container['userParams'];
    }

    /**
     * Sets userParams
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserParam[] $userParams userParams
     *
     * @return $this
     */
    public function setUserParams($userParams)
    {
        $this->container['userParams'] = $userParams;

        return $this;
    }

    /**
     * Gets insertDate
     *
     * @return \DateTime
     */
    public function getInsertDate()
    {
        return $this->container['insertDate'];
    }

    /**
     * Sets insertDate
     *
     * @param \DateTime $insertDate Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setInsertDate($insertDate)
    {
        $this->container['insertDate'] = $insertDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


