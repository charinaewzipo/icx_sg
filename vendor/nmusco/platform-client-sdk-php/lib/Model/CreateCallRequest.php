<?php
/**
 * CreateCallRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CreateCallRequest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateCallRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateCallRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'phoneNumber' => 'string',
        'callerId' => 'string',
        'callerIdName' => 'string',
        'callFromQueueId' => 'string',
        'callQueueId' => 'string',
        'callUserId' => 'string',
        'priority' => 'int',
        'languageId' => 'string',
        'routingSkillsIds' => 'string[]',
        'conversationIds' => 'string[]',
        'participants' => '\PureCloudPlatform\Client\V2\Model\Destination[]',
        'uuiData' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'phoneNumber' => null,
        'callerId' => null,
        'callerIdName' => null,
        'callFromQueueId' => null,
        'callQueueId' => null,
        'callUserId' => null,
        'priority' => 'int32',
        'languageId' => null,
        'routingSkillsIds' => null,
        'conversationIds' => null,
        'participants' => null,
        'uuiData' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'phoneNumber' => 'phoneNumber',
        'callerId' => 'callerId',
        'callerIdName' => 'callerIdName',
        'callFromQueueId' => 'callFromQueueId',
        'callQueueId' => 'callQueueId',
        'callUserId' => 'callUserId',
        'priority' => 'priority',
        'languageId' => 'languageId',
        'routingSkillsIds' => 'routingSkillsIds',
        'conversationIds' => 'conversationIds',
        'participants' => 'participants',
        'uuiData' => 'uuiData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'phoneNumber' => 'setPhoneNumber',
        'callerId' => 'setCallerId',
        'callerIdName' => 'setCallerIdName',
        'callFromQueueId' => 'setCallFromQueueId',
        'callQueueId' => 'setCallQueueId',
        'callUserId' => 'setCallUserId',
        'priority' => 'setPriority',
        'languageId' => 'setLanguageId',
        'routingSkillsIds' => 'setRoutingSkillsIds',
        'conversationIds' => 'setConversationIds',
        'participants' => 'setParticipants',
        'uuiData' => 'setUuiData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'phoneNumber' => 'getPhoneNumber',
        'callerId' => 'getCallerId',
        'callerIdName' => 'getCallerIdName',
        'callFromQueueId' => 'getCallFromQueueId',
        'callQueueId' => 'getCallQueueId',
        'callUserId' => 'getCallUserId',
        'priority' => 'getPriority',
        'languageId' => 'getLanguageId',
        'routingSkillsIds' => 'getRoutingSkillsIds',
        'conversationIds' => 'getConversationIds',
        'participants' => 'getParticipants',
        'uuiData' => 'getUuiData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['phoneNumber'] = isset($data['phoneNumber']) ? $data['phoneNumber'] : null;
        $this->container['callerId'] = isset($data['callerId']) ? $data['callerId'] : null;
        $this->container['callerIdName'] = isset($data['callerIdName']) ? $data['callerIdName'] : null;
        $this->container['callFromQueueId'] = isset($data['callFromQueueId']) ? $data['callFromQueueId'] : null;
        $this->container['callQueueId'] = isset($data['callQueueId']) ? $data['callQueueId'] : null;
        $this->container['callUserId'] = isset($data['callUserId']) ? $data['callUserId'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['languageId'] = isset($data['languageId']) ? $data['languageId'] : null;
        $this->container['routingSkillsIds'] = isset($data['routingSkillsIds']) ? $data['routingSkillsIds'] : null;
        $this->container['conversationIds'] = isset($data['conversationIds']) ? $data['conversationIds'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['uuiData'] = isset($data['uuiData']) ? $data['uuiData'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets phoneNumber
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phoneNumber'];
    }

    /**
     * Sets phoneNumber
     *
     * @param string $phoneNumber The phone number to dial.
     *
     * @return $this
     */
    public function setPhoneNumber($phoneNumber)
    {
        $this->container['phoneNumber'] = $phoneNumber;

        return $this;
    }

    /**
     * Gets callerId
     *
     * @return string
     */
    public function getCallerId()
    {
        return $this->container['callerId'];
    }

    /**
     * Sets callerId
     *
     * @param string $callerId The caller id phone number for this outbound call.
     *
     * @return $this
     */
    public function setCallerId($callerId)
    {
        $this->container['callerId'] = $callerId;

        return $this;
    }

    /**
     * Gets callerIdName
     *
     * @return string
     */
    public function getCallerIdName()
    {
        return $this->container['callerIdName'];
    }

    /**
     * Sets callerIdName
     *
     * @param string $callerIdName The caller id name for this outbound call.
     *
     * @return $this
     */
    public function setCallerIdName($callerIdName)
    {
        $this->container['callerIdName'] = $callerIdName;

        return $this;
    }

    /**
     * Gets callFromQueueId
     *
     * @return string
     */
    public function getCallFromQueueId()
    {
        return $this->container['callFromQueueId'];
    }

    /**
     * Sets callFromQueueId
     *
     * @param string $callFromQueueId The queue ID to call on behalf of.
     *
     * @return $this
     */
    public function setCallFromQueueId($callFromQueueId)
    {
        $this->container['callFromQueueId'] = $callFromQueueId;

        return $this;
    }

    /**
     * Gets callQueueId
     *
     * @return string
     */
    public function getCallQueueId()
    {
        return $this->container['callQueueId'];
    }

    /**
     * Sets callQueueId
     *
     * @param string $callQueueId The queue ID to call.
     *
     * @return $this
     */
    public function setCallQueueId($callQueueId)
    {
        $this->container['callQueueId'] = $callQueueId;

        return $this;
    }

    /**
     * Gets callUserId
     *
     * @return string
     */
    public function getCallUserId()
    {
        return $this->container['callUserId'];
    }

    /**
     * Sets callUserId
     *
     * @param string $callUserId The user ID to call.
     *
     * @return $this
     */
    public function setCallUserId($callUserId)
    {
        $this->container['callUserId'] = $callUserId;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority The priority to assign to this call (if calling a queue).
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets languageId
     *
     * @return string
     */
    public function getLanguageId()
    {
        return $this->container['languageId'];
    }

    /**
     * Sets languageId
     *
     * @param string $languageId The language skill ID to use for routing this call (if calling a queue).
     *
     * @return $this
     */
    public function setLanguageId($languageId)
    {
        $this->container['languageId'] = $languageId;

        return $this;
    }

    /**
     * Gets routingSkillsIds
     *
     * @return string[]
     */
    public function getRoutingSkillsIds()
    {
        return $this->container['routingSkillsIds'];
    }

    /**
     * Sets routingSkillsIds
     *
     * @param string[] $routingSkillsIds The skill ID's to use for routing this call (if calling a queue).
     *
     * @return $this
     */
    public function setRoutingSkillsIds($routingSkillsIds)
    {
        $this->container['routingSkillsIds'] = $routingSkillsIds;

        return $this;
    }

    /**
     * Gets conversationIds
     *
     * @return string[]
     */
    public function getConversationIds()
    {
        return $this->container['conversationIds'];
    }

    /**
     * Sets conversationIds
     *
     * @param string[] $conversationIds The list of existing call conversations to merge into a new ad-hoc conference.
     *
     * @return $this
     */
    public function setConversationIds($conversationIds)
    {
        $this->container['conversationIds'] = $conversationIds;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \PureCloudPlatform\Client\V2\Model\Destination[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \PureCloudPlatform\Client\V2\Model\Destination[] $participants The list of participants to call to create a new ad-hoc conference.
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets uuiData
     *
     * @return string
     */
    public function getUuiData()
    {
        return $this->container['uuiData'];
    }

    /**
     * Sets uuiData
     *
     * @param string $uuiData User to User Information (UUI) data managed by SIP session application.
     *
     * @return $this
     */
    public function setUuiData($uuiData)
    {
        $this->container['uuiData'] = $uuiData;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


