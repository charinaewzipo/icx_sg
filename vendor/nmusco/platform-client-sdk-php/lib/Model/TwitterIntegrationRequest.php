<?php
/**
 * TwitterIntegrationRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * TwitterIntegrationRequest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TwitterIntegrationRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TwitterIntegrationRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'accessTokenKey' => 'string',
        'accessTokenSecret' => 'string',
        'consumerKey' => 'string',
        'consumerSecret' => 'string',
        'tier' => 'string',
        'envName' => 'string',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'accessTokenKey' => null,
        'accessTokenSecret' => null,
        'consumerKey' => null,
        'consumerSecret' => null,
        'tier' => null,
        'envName' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'accessTokenKey' => 'accessTokenKey',
        'accessTokenSecret' => 'accessTokenSecret',
        'consumerKey' => 'consumerKey',
        'consumerSecret' => 'consumerSecret',
        'tier' => 'tier',
        'envName' => 'envName',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'accessTokenKey' => 'setAccessTokenKey',
        'accessTokenSecret' => 'setAccessTokenSecret',
        'consumerKey' => 'setConsumerKey',
        'consumerSecret' => 'setConsumerSecret',
        'tier' => 'setTier',
        'envName' => 'setEnvName',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'accessTokenKey' => 'getAccessTokenKey',
        'accessTokenSecret' => 'getAccessTokenSecret',
        'consumerKey' => 'getConsumerKey',
        'consumerSecret' => 'getConsumerSecret',
        'tier' => 'getTier',
        'envName' => 'getEnvName',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIER_PREMIUM = 'premium';
    const TIER_ENTERPRISE = 'enterprise';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTierAllowableValues()
    {
        return [
            self::TIER_PREMIUM,
            self::TIER_ENTERPRISE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['accessTokenKey'] = isset($data['accessTokenKey']) ? $data['accessTokenKey'] : null;
        $this->container['accessTokenSecret'] = isset($data['accessTokenSecret']) ? $data['accessTokenSecret'] : null;
        $this->container['consumerKey'] = isset($data['consumerKey']) ? $data['consumerKey'] : null;
        $this->container['consumerSecret'] = isset($data['consumerSecret']) ? $data['consumerSecret'] : null;
        $this->container['tier'] = isset($data['tier']) ? $data['tier'] : null;
        $this->container['envName'] = isset($data['envName']) ? $data['envName'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['accessTokenKey'] === null) {
            $invalidProperties[] = "'accessTokenKey' can't be null";
        }
        if ($this->container['accessTokenSecret'] === null) {
            $invalidProperties[] = "'accessTokenSecret' can't be null";
        }
        if ($this->container['consumerKey'] === null) {
            $invalidProperties[] = "'consumerKey' can't be null";
        }
        if ($this->container['consumerSecret'] === null) {
            $invalidProperties[] = "'consumerSecret' can't be null";
        }
        if ($this->container['tier'] === null) {
            $invalidProperties[] = "'tier' can't be null";
        }
        $allowedValues = $this->getTierAllowableValues();
        if (!is_null($this->container['tier']) && !in_array($this->container['tier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the Twitter Integration
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets accessTokenKey
     *
     * @return string
     */
    public function getAccessTokenKey()
    {
        return $this->container['accessTokenKey'];
    }

    /**
     * Sets accessTokenKey
     *
     * @param string $accessTokenKey The Access Token Key from Twitter messenger
     *
     * @return $this
     */
    public function setAccessTokenKey($accessTokenKey)
    {
        $this->container['accessTokenKey'] = $accessTokenKey;

        return $this;
    }

    /**
     * Gets accessTokenSecret
     *
     * @return string
     */
    public function getAccessTokenSecret()
    {
        return $this->container['accessTokenSecret'];
    }

    /**
     * Sets accessTokenSecret
     *
     * @param string $accessTokenSecret The Access Token Secret from Twitter messenger
     *
     * @return $this
     */
    public function setAccessTokenSecret($accessTokenSecret)
    {
        $this->container['accessTokenSecret'] = $accessTokenSecret;

        return $this;
    }

    /**
     * Gets consumerKey
     *
     * @return string
     */
    public function getConsumerKey()
    {
        return $this->container['consumerKey'];
    }

    /**
     * Sets consumerKey
     *
     * @param string $consumerKey The Consumer Key from Twitter messenger
     *
     * @return $this
     */
    public function setConsumerKey($consumerKey)
    {
        $this->container['consumerKey'] = $consumerKey;

        return $this;
    }

    /**
     * Gets consumerSecret
     *
     * @return string
     */
    public function getConsumerSecret()
    {
        return $this->container['consumerSecret'];
    }

    /**
     * Sets consumerSecret
     *
     * @param string $consumerSecret The Consumer Secret from Twitter messenger
     *
     * @return $this
     */
    public function setConsumerSecret($consumerSecret)
    {
        $this->container['consumerSecret'] = $consumerSecret;

        return $this;
    }

    /**
     * Gets tier
     *
     * @return string
     */
    public function getTier()
    {
        return $this->container['tier'];
    }

    /**
     * Sets tier
     *
     * @param string $tier The type of twitter account to be used for the integration
     *
     * @return $this
     */
    public function setTier($tier)
    {
        $allowedValues = $this->getTierAllowableValues();
        if (!in_array($tier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tier'] = $tier;

        return $this;
    }

    /**
     * Gets envName
     *
     * @return string
     */
    public function getEnvName()
    {
        return $this->container['envName'];
    }

    /**
     * Sets envName
     *
     * @param string $envName The Twitter environment name, e.g.: env-beta (required for premium tier)
     *
     * @return $this
     */
    public function setEnvName($envName)
    {
        $this->container['envName'] = $envName;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


