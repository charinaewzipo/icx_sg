<?php
/**
 * Station
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * Station Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Station implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Station';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'status' => 'string',
        'userId' => 'string',
        'webRtcUserId' => 'string',
        'primaryEdge' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'secondaryEdge' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'type' => 'string',
        'lineAppearanceId' => 'string',
        'webRtcMediaDscp' => 'int',
        'webRtcPersistentEnabled' => 'bool',
        'webRtcForceTurn' => 'bool',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'status' => null,
        'userId' => null,
        'webRtcUserId' => null,
        'primaryEdge' => null,
        'secondaryEdge' => null,
        'type' => null,
        'lineAppearanceId' => null,
        'webRtcMediaDscp' => 'int32',
        'webRtcPersistentEnabled' => null,
        'webRtcForceTurn' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'status' => 'status',
        'userId' => 'userId',
        'webRtcUserId' => 'webRtcUserId',
        'primaryEdge' => 'primaryEdge',
        'secondaryEdge' => 'secondaryEdge',
        'type' => 'type',
        'lineAppearanceId' => 'lineAppearanceId',
        'webRtcMediaDscp' => 'webRtcMediaDscp',
        'webRtcPersistentEnabled' => 'webRtcPersistentEnabled',
        'webRtcForceTurn' => 'webRtcForceTurn',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'userId' => 'setUserId',
        'webRtcUserId' => 'setWebRtcUserId',
        'primaryEdge' => 'setPrimaryEdge',
        'secondaryEdge' => 'setSecondaryEdge',
        'type' => 'setType',
        'lineAppearanceId' => 'setLineAppearanceId',
        'webRtcMediaDscp' => 'setWebRtcMediaDscp',
        'webRtcPersistentEnabled' => 'setWebRtcPersistentEnabled',
        'webRtcForceTurn' => 'setWebRtcForceTurn',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'userId' => 'getUserId',
        'webRtcUserId' => 'getWebRtcUserId',
        'primaryEdge' => 'getPrimaryEdge',
        'secondaryEdge' => 'getSecondaryEdge',
        'type' => 'getType',
        'lineAppearanceId' => 'getLineAppearanceId',
        'webRtcMediaDscp' => 'getWebRtcMediaDscp',
        'webRtcPersistentEnabled' => 'getWebRtcPersistentEnabled',
        'webRtcForceTurn' => 'getWebRtcForceTurn',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_AVAILABLE = 'AVAILABLE';
    const STATUS_ASSOCIATED = 'ASSOCIATED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_AVAILABLE,
            self::STATUS_ASSOCIATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['userId'] = isset($data['userId']) ? $data['userId'] : null;
        $this->container['webRtcUserId'] = isset($data['webRtcUserId']) ? $data['webRtcUserId'] : null;
        $this->container['primaryEdge'] = isset($data['primaryEdge']) ? $data['primaryEdge'] : null;
        $this->container['secondaryEdge'] = isset($data['secondaryEdge']) ? $data['secondaryEdge'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['lineAppearanceId'] = isset($data['lineAppearanceId']) ? $data['lineAppearanceId'] : null;
        $this->container['webRtcMediaDscp'] = isset($data['webRtcMediaDscp']) ? $data['webRtcMediaDscp'] : null;
        $this->container['webRtcPersistentEnabled'] = isset($data['webRtcPersistentEnabled']) ? $data['webRtcPersistentEnabled'] : null;
        $this->container['webRtcForceTurn'] = isset($data['webRtcForceTurn']) ? $data['webRtcForceTurn'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId The Id of the user currently logged in and associated with the station.
     *
     * @return $this
     */
    public function setUserId($userId)
    {
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets webRtcUserId
     *
     * @return string
     */
    public function getWebRtcUserId()
    {
        return $this->container['webRtcUserId'];
    }

    /**
     * Sets webRtcUserId
     *
     * @param string $webRtcUserId The Id of the user configured for the station if it is of type inin_webrtc_softphone. Empty if station type is not inin_webrtc_softphone.
     *
     * @return $this
     */
    public function setWebRtcUserId($webRtcUserId)
    {
        $this->container['webRtcUserId'] = $webRtcUserId;

        return $this;
    }

    /**
     * Gets primaryEdge
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getPrimaryEdge()
    {
        return $this->container['primaryEdge'];
    }

    /**
     * Sets primaryEdge
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $primaryEdge primaryEdge
     *
     * @return $this
     */
    public function setPrimaryEdge($primaryEdge)
    {
        $this->container['primaryEdge'] = $primaryEdge;

        return $this;
    }

    /**
     * Gets secondaryEdge
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getSecondaryEdge()
    {
        return $this->container['secondaryEdge'];
    }

    /**
     * Sets secondaryEdge
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $secondaryEdge secondaryEdge
     *
     * @return $this
     */
    public function setSecondaryEdge($secondaryEdge)
    {
        $this->container['secondaryEdge'] = $secondaryEdge;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets lineAppearanceId
     *
     * @return string
     */
    public function getLineAppearanceId()
    {
        return $this->container['lineAppearanceId'];
    }

    /**
     * Sets lineAppearanceId
     *
     * @param string $lineAppearanceId lineAppearanceId
     *
     * @return $this
     */
    public function setLineAppearanceId($lineAppearanceId)
    {
        $this->container['lineAppearanceId'] = $lineAppearanceId;

        return $this;
    }

    /**
     * Gets webRtcMediaDscp
     *
     * @return int
     */
    public function getWebRtcMediaDscp()
    {
        return $this->container['webRtcMediaDscp'];
    }

    /**
     * Sets webRtcMediaDscp
     *
     * @param int $webRtcMediaDscp The default or configured value of media dscp for the station. Empty if station type is not inin_webrtc_softphone.
     *
     * @return $this
     */
    public function setWebRtcMediaDscp($webRtcMediaDscp)
    {
        $this->container['webRtcMediaDscp'] = $webRtcMediaDscp;

        return $this;
    }

    /**
     * Gets webRtcPersistentEnabled
     *
     * @return bool
     */
    public function getWebRtcPersistentEnabled()
    {
        return $this->container['webRtcPersistentEnabled'];
    }

    /**
     * Sets webRtcPersistentEnabled
     *
     * @param bool $webRtcPersistentEnabled The default or configured value of persistent connection setting for the station. Empty if station type is not inin_webrtc_softphone.
     *
     * @return $this
     */
    public function setWebRtcPersistentEnabled($webRtcPersistentEnabled)
    {
        $this->container['webRtcPersistentEnabled'] = $webRtcPersistentEnabled;

        return $this;
    }

    /**
     * Gets webRtcForceTurn
     *
     * @return bool
     */
    public function getWebRtcForceTurn()
    {
        return $this->container['webRtcForceTurn'];
    }

    /**
     * Sets webRtcForceTurn
     *
     * @param bool $webRtcForceTurn Whether the station is configured to require TURN for routing WebRTC calls. Empty if station type is not inin_webrtc_softphone.
     *
     * @return $this
     */
    public function setWebRtcForceTurn($webRtcForceTurn)
    {
        $this->container['webRtcForceTurn'] = $webRtcForceTurn;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


