<?php
/**
 * WfmForecastModificationAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * WfmForecastModificationAttributes Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WfmForecastModificationAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WfmForecastModificationAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'queues' => '\PureCloudPlatform\Client\V2\Model\QueueReference[]',
        'mediaTypes' => 'string[]',
        'languages' => '\PureCloudPlatform\Client\V2\Model\LanguageReference[]',
        'skillSets' => '\PureCloudPlatform\Client\V2\Model\RoutingSkillReference[][]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'queues' => null,
        'mediaTypes' => null,
        'languages' => null,
        'skillSets' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'queues' => 'queues',
        'mediaTypes' => 'mediaTypes',
        'languages' => 'languages',
        'skillSets' => 'skillSets'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'queues' => 'setQueues',
        'mediaTypes' => 'setMediaTypes',
        'languages' => 'setLanguages',
        'skillSets' => 'setSkillSets'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'queues' => 'getQueues',
        'mediaTypes' => 'getMediaTypes',
        'languages' => 'getLanguages',
        'skillSets' => 'getSkillSets'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEDIA_TYPES_VOICE = 'Voice';
    const MEDIA_TYPES_CHAT = 'Chat';
    const MEDIA_TYPES_EMAIL = 'Email';
    const MEDIA_TYPES_CALLBACK = 'Callback';
    const MEDIA_TYPES_MESSAGE = 'Message';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaTypesAllowableValues()
    {
        return [
            self::MEDIA_TYPES_VOICE,
            self::MEDIA_TYPES_CHAT,
            self::MEDIA_TYPES_EMAIL,
            self::MEDIA_TYPES_CALLBACK,
            self::MEDIA_TYPES_MESSAGE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['queues'] = isset($data['queues']) ? $data['queues'] : null;
        $this->container['mediaTypes'] = isset($data['mediaTypes']) ? $data['mediaTypes'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['skillSets'] = isset($data['skillSets']) ? $data['skillSets'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets queues
     *
     * @return \PureCloudPlatform\Client\V2\Model\QueueReference[]
     */
    public function getQueues()
    {
        return $this->container['queues'];
    }

    /**
     * Sets queues
     *
     * @param \PureCloudPlatform\Client\V2\Model\QueueReference[] $queues The queues to which to apply a modification
     *
     * @return $this
     */
    public function setQueues($queues)
    {
        $this->container['queues'] = $queues;

        return $this;
    }

    /**
     * Gets mediaTypes
     *
     * @return string[]
     */
    public function getMediaTypes()
    {
        return $this->container['mediaTypes'];
    }

    /**
     * Sets mediaTypes
     *
     * @param string[] $mediaTypes The media types to which to apply a modification
     *
     * @return $this
     */
    public function setMediaTypes($mediaTypes)
    {
        $allowedValues = $this->getMediaTypesAllowableValues();
        if (!is_null($mediaTypes) && array_diff($mediaTypes, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mediaTypes', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaTypes'] = $mediaTypes;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return \PureCloudPlatform\Client\V2\Model\LanguageReference[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param \PureCloudPlatform\Client\V2\Model\LanguageReference[] $languages The languages to which to apply a modification
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets skillSets
     *
     * @return \PureCloudPlatform\Client\V2\Model\RoutingSkillReference[][]
     */
    public function getSkillSets()
    {
        return $this->container['skillSets'];
    }

    /**
     * Sets skillSets
     *
     * @param \PureCloudPlatform\Client\V2\Model\RoutingSkillReference[][] $skillSets The skill sets to which to apply a modification
     *
     * @return $this
     */
    public function setSkillSets($skillSets)
    {
        $this->container['skillSets'] = $skillSets;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


