<?php
/**
 * CampaignDiagnostics
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CampaignDiagnostics Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignDiagnostics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignDiagnostics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'callableContacts' => '\PureCloudPlatform\Client\V2\Model\CallableContactsDiagnostic',
        'queueUtilizationDiagnostic' => '\PureCloudPlatform\Client\V2\Model\QueueUtilizationDiagnostic',
        'ruleSetDiagnostics' => '\PureCloudPlatform\Client\V2\Model\RuleSetDiagnostic[]',
        'outstandingInteractionsCount' => 'int',
        'scheduledInteractionsCount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'callableContacts' => null,
        'queueUtilizationDiagnostic' => null,
        'ruleSetDiagnostics' => null,
        'outstandingInteractionsCount' => 'int32',
        'scheduledInteractionsCount' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'callableContacts' => 'callableContacts',
        'queueUtilizationDiagnostic' => 'queueUtilizationDiagnostic',
        'ruleSetDiagnostics' => 'ruleSetDiagnostics',
        'outstandingInteractionsCount' => 'outstandingInteractionsCount',
        'scheduledInteractionsCount' => 'scheduledInteractionsCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'callableContacts' => 'setCallableContacts',
        'queueUtilizationDiagnostic' => 'setQueueUtilizationDiagnostic',
        'ruleSetDiagnostics' => 'setRuleSetDiagnostics',
        'outstandingInteractionsCount' => 'setOutstandingInteractionsCount',
        'scheduledInteractionsCount' => 'setScheduledInteractionsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'callableContacts' => 'getCallableContacts',
        'queueUtilizationDiagnostic' => 'getQueueUtilizationDiagnostic',
        'ruleSetDiagnostics' => 'getRuleSetDiagnostics',
        'outstandingInteractionsCount' => 'getOutstandingInteractionsCount',
        'scheduledInteractionsCount' => 'getScheduledInteractionsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['callableContacts'] = isset($data['callableContacts']) ? $data['callableContacts'] : null;
        $this->container['queueUtilizationDiagnostic'] = isset($data['queueUtilizationDiagnostic']) ? $data['queueUtilizationDiagnostic'] : null;
        $this->container['ruleSetDiagnostics'] = isset($data['ruleSetDiagnostics']) ? $data['ruleSetDiagnostics'] : null;
        $this->container['outstandingInteractionsCount'] = isset($data['outstandingInteractionsCount']) ? $data['outstandingInteractionsCount'] : null;
        $this->container['scheduledInteractionsCount'] = isset($data['scheduledInteractionsCount']) ? $data['scheduledInteractionsCount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets callableContacts
     *
     * @return \PureCloudPlatform\Client\V2\Model\CallableContactsDiagnostic
     */
    public function getCallableContacts()
    {
        return $this->container['callableContacts'];
    }

    /**
     * Sets callableContacts
     *
     * @param \PureCloudPlatform\Client\V2\Model\CallableContactsDiagnostic $callableContacts Campaign properties that can impact which contacts are callable
     *
     * @return $this
     */
    public function setCallableContacts($callableContacts)
    {
        $this->container['callableContacts'] = $callableContacts;

        return $this;
    }

    /**
     * Gets queueUtilizationDiagnostic
     *
     * @return \PureCloudPlatform\Client\V2\Model\QueueUtilizationDiagnostic
     */
    public function getQueueUtilizationDiagnostic()
    {
        return $this->container['queueUtilizationDiagnostic'];
    }

    /**
     * Sets queueUtilizationDiagnostic
     *
     * @param \PureCloudPlatform\Client\V2\Model\QueueUtilizationDiagnostic $queueUtilizationDiagnostic Information regarding the campaign's queue
     *
     * @return $this
     */
    public function setQueueUtilizationDiagnostic($queueUtilizationDiagnostic)
    {
        $this->container['queueUtilizationDiagnostic'] = $queueUtilizationDiagnostic;

        return $this;
    }

    /**
     * Gets ruleSetDiagnostics
     *
     * @return \PureCloudPlatform\Client\V2\Model\RuleSetDiagnostic[]
     */
    public function getRuleSetDiagnostics()
    {
        return $this->container['ruleSetDiagnostics'];
    }

    /**
     * Sets ruleSetDiagnostics
     *
     * @param \PureCloudPlatform\Client\V2\Model\RuleSetDiagnostic[] $ruleSetDiagnostics Information regarding the campaign's rule sets
     *
     * @return $this
     */
    public function setRuleSetDiagnostics($ruleSetDiagnostics)
    {
        $this->container['ruleSetDiagnostics'] = $ruleSetDiagnostics;

        return $this;
    }

    /**
     * Gets outstandingInteractionsCount
     *
     * @return int
     */
    public function getOutstandingInteractionsCount()
    {
        return $this->container['outstandingInteractionsCount'];
    }

    /**
     * Sets outstandingInteractionsCount
     *
     * @param int $outstandingInteractionsCount Current number of outstanding interactions on the campaign
     *
     * @return $this
     */
    public function setOutstandingInteractionsCount($outstandingInteractionsCount)
    {
        $this->container['outstandingInteractionsCount'] = $outstandingInteractionsCount;

        return $this;
    }

    /**
     * Gets scheduledInteractionsCount
     *
     * @return int
     */
    public function getScheduledInteractionsCount()
    {
        return $this->container['scheduledInteractionsCount'];
    }

    /**
     * Sets scheduledInteractionsCount
     *
     * @param int $scheduledInteractionsCount Current number of scheduled interactions on the campaign
     *
     * @return $this
     */
    public function setScheduledInteractionsCount($scheduledInteractionsCount)
    {
        $this->container['scheduledInteractionsCount'] = $scheduledInteractionsCount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


