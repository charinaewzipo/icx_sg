<?php
/**
 * Calibration
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * Calibration Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Calibration implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Calibration';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'calibrator' => '\PureCloudPlatform\Client\V2\Model\User',
        'agent' => '\PureCloudPlatform\Client\V2\Model\User',
        'conversation' => '\PureCloudPlatform\Client\V2\Model\Conversation',
        'evaluationForm' => '\PureCloudPlatform\Client\V2\Model\EvaluationForm',
        'contextId' => 'string',
        'averageScore' => 'int',
        'highScore' => 'int',
        'lowScore' => 'int',
        'createdDate' => '\DateTime',
        'evaluations' => '\PureCloudPlatform\Client\V2\Model\Evaluation[]',
        'evaluators' => '\PureCloudPlatform\Client\V2\Model\User[]',
        'scoringIndex' => '\PureCloudPlatform\Client\V2\Model\Evaluation',
        'expertEvaluator' => '\PureCloudPlatform\Client\V2\Model\User',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'calibrator' => null,
        'agent' => null,
        'conversation' => null,
        'evaluationForm' => null,
        'contextId' => null,
        'averageScore' => 'int32',
        'highScore' => 'int32',
        'lowScore' => 'int32',
        'createdDate' => 'date-time',
        'evaluations' => null,
        'evaluators' => null,
        'scoringIndex' => null,
        'expertEvaluator' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'calibrator' => 'calibrator',
        'agent' => 'agent',
        'conversation' => 'conversation',
        'evaluationForm' => 'evaluationForm',
        'contextId' => 'contextId',
        'averageScore' => 'averageScore',
        'highScore' => 'highScore',
        'lowScore' => 'lowScore',
        'createdDate' => 'createdDate',
        'evaluations' => 'evaluations',
        'evaluators' => 'evaluators',
        'scoringIndex' => 'scoringIndex',
        'expertEvaluator' => 'expertEvaluator',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'calibrator' => 'setCalibrator',
        'agent' => 'setAgent',
        'conversation' => 'setConversation',
        'evaluationForm' => 'setEvaluationForm',
        'contextId' => 'setContextId',
        'averageScore' => 'setAverageScore',
        'highScore' => 'setHighScore',
        'lowScore' => 'setLowScore',
        'createdDate' => 'setCreatedDate',
        'evaluations' => 'setEvaluations',
        'evaluators' => 'setEvaluators',
        'scoringIndex' => 'setScoringIndex',
        'expertEvaluator' => 'setExpertEvaluator',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'calibrator' => 'getCalibrator',
        'agent' => 'getAgent',
        'conversation' => 'getConversation',
        'evaluationForm' => 'getEvaluationForm',
        'contextId' => 'getContextId',
        'averageScore' => 'getAverageScore',
        'highScore' => 'getHighScore',
        'lowScore' => 'getLowScore',
        'createdDate' => 'getCreatedDate',
        'evaluations' => 'getEvaluations',
        'evaluators' => 'getEvaluators',
        'scoringIndex' => 'getScoringIndex',
        'expertEvaluator' => 'getExpertEvaluator',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['calibrator'] = isset($data['calibrator']) ? $data['calibrator'] : null;
        $this->container['agent'] = isset($data['agent']) ? $data['agent'] : null;
        $this->container['conversation'] = isset($data['conversation']) ? $data['conversation'] : null;
        $this->container['evaluationForm'] = isset($data['evaluationForm']) ? $data['evaluationForm'] : null;
        $this->container['contextId'] = isset($data['contextId']) ? $data['contextId'] : null;
        $this->container['averageScore'] = isset($data['averageScore']) ? $data['averageScore'] : null;
        $this->container['highScore'] = isset($data['highScore']) ? $data['highScore'] : null;
        $this->container['lowScore'] = isset($data['lowScore']) ? $data['lowScore'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['evaluations'] = isset($data['evaluations']) ? $data['evaluations'] : null;
        $this->container['evaluators'] = isset($data['evaluators']) ? $data['evaluators'] : null;
        $this->container['scoringIndex'] = isset($data['scoringIndex']) ? $data['scoringIndex'] : null;
        $this->container['expertEvaluator'] = isset($data['expertEvaluator']) ? $data['expertEvaluator'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets calibrator
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getCalibrator()
    {
        return $this->container['calibrator'];
    }

    /**
     * Sets calibrator
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $calibrator calibrator
     *
     * @return $this
     */
    public function setCalibrator($calibrator)
    {
        $this->container['calibrator'] = $calibrator;

        return $this;
    }

    /**
     * Gets agent
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getAgent()
    {
        return $this->container['agent'];
    }

    /**
     * Sets agent
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $agent agent
     *
     * @return $this
     */
    public function setAgent($agent)
    {
        $this->container['agent'] = $agent;

        return $this;
    }

    /**
     * Gets conversation
     *
     * @return \PureCloudPlatform\Client\V2\Model\Conversation
     */
    public function getConversation()
    {
        return $this->container['conversation'];
    }

    /**
     * Sets conversation
     *
     * @param \PureCloudPlatform\Client\V2\Model\Conversation $conversation conversation
     *
     * @return $this
     */
    public function setConversation($conversation)
    {
        $this->container['conversation'] = $conversation;

        return $this;
    }

    /**
     * Gets evaluationForm
     *
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationForm
     */
    public function getEvaluationForm()
    {
        return $this->container['evaluationForm'];
    }

    /**
     * Sets evaluationForm
     *
     * @param \PureCloudPlatform\Client\V2\Model\EvaluationForm $evaluationForm evaluationForm
     *
     * @return $this
     */
    public function setEvaluationForm($evaluationForm)
    {
        $this->container['evaluationForm'] = $evaluationForm;

        return $this;
    }

    /**
     * Gets contextId
     *
     * @return string
     */
    public function getContextId()
    {
        return $this->container['contextId'];
    }

    /**
     * Sets contextId
     *
     * @param string $contextId contextId
     *
     * @return $this
     */
    public function setContextId($contextId)
    {
        $this->container['contextId'] = $contextId;

        return $this;
    }

    /**
     * Gets averageScore
     *
     * @return int
     */
    public function getAverageScore()
    {
        return $this->container['averageScore'];
    }

    /**
     * Sets averageScore
     *
     * @param int $averageScore averageScore
     *
     * @return $this
     */
    public function setAverageScore($averageScore)
    {
        $this->container['averageScore'] = $averageScore;

        return $this;
    }

    /**
     * Gets highScore
     *
     * @return int
     */
    public function getHighScore()
    {
        return $this->container['highScore'];
    }

    /**
     * Sets highScore
     *
     * @param int $highScore highScore
     *
     * @return $this
     */
    public function setHighScore($highScore)
    {
        $this->container['highScore'] = $highScore;

        return $this;
    }

    /**
     * Gets lowScore
     *
     * @return int
     */
    public function getLowScore()
    {
        return $this->container['lowScore'];
    }

    /**
     * Sets lowScore
     *
     * @param int $lowScore lowScore
     *
     * @return $this
     */
    public function setLowScore($lowScore)
    {
        $this->container['lowScore'] = $lowScore;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets evaluations
     *
     * @return \PureCloudPlatform\Client\V2\Model\Evaluation[]
     */
    public function getEvaluations()
    {
        return $this->container['evaluations'];
    }

    /**
     * Sets evaluations
     *
     * @param \PureCloudPlatform\Client\V2\Model\Evaluation[] $evaluations evaluations
     *
     * @return $this
     */
    public function setEvaluations($evaluations)
    {
        $this->container['evaluations'] = $evaluations;

        return $this;
    }

    /**
     * Gets evaluators
     *
     * @return \PureCloudPlatform\Client\V2\Model\User[]
     */
    public function getEvaluators()
    {
        return $this->container['evaluators'];
    }

    /**
     * Sets evaluators
     *
     * @param \PureCloudPlatform\Client\V2\Model\User[] $evaluators evaluators
     *
     * @return $this
     */
    public function setEvaluators($evaluators)
    {
        $this->container['evaluators'] = $evaluators;

        return $this;
    }

    /**
     * Gets scoringIndex
     *
     * @return \PureCloudPlatform\Client\V2\Model\Evaluation
     */
    public function getScoringIndex()
    {
        return $this->container['scoringIndex'];
    }

    /**
     * Sets scoringIndex
     *
     * @param \PureCloudPlatform\Client\V2\Model\Evaluation $scoringIndex scoringIndex
     *
     * @return $this
     */
    public function setScoringIndex($scoringIndex)
    {
        $this->container['scoringIndex'] = $scoringIndex;

        return $this;
    }

    /**
     * Gets expertEvaluator
     *
     * @return \PureCloudPlatform\Client\V2\Model\User
     */
    public function getExpertEvaluator()
    {
        return $this->container['expertEvaluator'];
    }

    /**
     * Sets expertEvaluator
     *
     * @param \PureCloudPlatform\Client\V2\Model\User $expertEvaluator expertEvaluator
     *
     * @return $this
     */
    public function setExpertEvaluator($expertEvaluator)
    {
        $this->container['expertEvaluator'] = $expertEvaluator;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


