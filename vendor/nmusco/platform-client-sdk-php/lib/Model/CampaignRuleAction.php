<?php
/**
 * CampaignRuleAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CampaignRuleAction Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignRuleAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignRuleAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'parameters' => '\PureCloudPlatform\Client\V2\Model\CampaignRuleParameters',
        'actionType' => 'string',
        'campaignRuleActionEntities' => '\PureCloudPlatform\Client\V2\Model\CampaignRuleActionEntities'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'parameters' => null,
        'actionType' => null,
        'campaignRuleActionEntities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'parameters' => 'parameters',
        'actionType' => 'actionType',
        'campaignRuleActionEntities' => 'campaignRuleActionEntities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'parameters' => 'setParameters',
        'actionType' => 'setActionType',
        'campaignRuleActionEntities' => 'setCampaignRuleActionEntities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'parameters' => 'getParameters',
        'actionType' => 'getActionType',
        'campaignRuleActionEntities' => 'getCampaignRuleActionEntities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTION_TYPE_TURN_ON_CAMPAIGN = 'turnOnCampaign';
    const ACTION_TYPE_TURN_OFF_CAMPAIGN = 'turnOffCampaign';
    const ACTION_TYPE_TURN_ON_SEQUENCE = 'turnOnSequence';
    const ACTION_TYPE_TURN_OFF_SEQUENCE = 'turnOffSequence';
    const ACTION_TYPE_SET_CAMPAIGN_PRIORITY = 'setCampaignPriority';
    const ACTION_TYPE_RECYCLE_CAMPAIGN = 'recycleCampaign';
    const ACTION_TYPE_SET_CAMPAIGN_DIALING_MODE = 'setCampaignDialingMode';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionTypeAllowableValues()
    {
        return [
            self::ACTION_TYPE_TURN_ON_CAMPAIGN,
            self::ACTION_TYPE_TURN_OFF_CAMPAIGN,
            self::ACTION_TYPE_TURN_ON_SEQUENCE,
            self::ACTION_TYPE_TURN_OFF_SEQUENCE,
            self::ACTION_TYPE_SET_CAMPAIGN_PRIORITY,
            self::ACTION_TYPE_RECYCLE_CAMPAIGN,
            self::ACTION_TYPE_SET_CAMPAIGN_DIALING_MODE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['actionType'] = isset($data['actionType']) ? $data['actionType'] : null;
        $this->container['campaignRuleActionEntities'] = isset($data['campaignRuleActionEntities']) ? $data['campaignRuleActionEntities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['actionType'] === null) {
            $invalidProperties[] = "'actionType' can't be null";
        }
        $allowedValues = $this->getActionTypeAllowableValues();
        if (!is_null($this->container['actionType']) && !in_array($this->container['actionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'actionType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['campaignRuleActionEntities'] === null) {
            $invalidProperties[] = "'campaignRuleActionEntities' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignRuleParameters
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignRuleParameters $parameters The parameters for the CampaignRuleAction. Required for certain actionTypes.
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets actionType
     *
     * @return string
     */
    public function getActionType()
    {
        return $this->container['actionType'];
    }

    /**
     * Sets actionType
     *
     * @param string $actionType The action to take on the campaignRuleActionEntities.
     *
     * @return $this
     */
    public function setActionType($actionType)
    {
        $allowedValues = $this->getActionTypeAllowableValues();
        if (!in_array($actionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actionType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actionType'] = $actionType;

        return $this;
    }

    /**
     * Gets campaignRuleActionEntities
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignRuleActionEntities
     */
    public function getCampaignRuleActionEntities()
    {
        return $this->container['campaignRuleActionEntities'];
    }

    /**
     * Sets campaignRuleActionEntities
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignRuleActionEntities $campaignRuleActionEntities The list of entities that this action will apply to.
     *
     * @return $this
     */
    public function setCampaignRuleActionEntities($campaignRuleActionEntities)
    {
        $this->container['campaignRuleActionEntities'] = $campaignRuleActionEntities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


