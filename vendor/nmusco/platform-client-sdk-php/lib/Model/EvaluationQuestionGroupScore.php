<?php
/**
 * EvaluationQuestionGroupScore
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * EvaluationQuestionGroupScore Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EvaluationQuestionGroupScore implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EvaluationQuestionGroupScore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'questionGroupId' => 'string',
        'totalScore' => 'float',
        'maxTotalScore' => 'float',
        'markedNA' => 'bool',
        'totalCriticalScore' => 'float',
        'maxTotalCriticalScore' => 'float',
        'totalScoreUnweighted' => 'float',
        'maxTotalScoreUnweighted' => 'float',
        'totalCriticalScoreUnweighted' => 'float',
        'maxTotalCriticalScoreUnweighted' => 'float',
        'questionScores' => '\PureCloudPlatform\Client\V2\Model\EvaluationQuestionScore[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'questionGroupId' => null,
        'totalScore' => 'float',
        'maxTotalScore' => 'float',
        'markedNA' => null,
        'totalCriticalScore' => 'float',
        'maxTotalCriticalScore' => 'float',
        'totalScoreUnweighted' => 'float',
        'maxTotalScoreUnweighted' => 'float',
        'totalCriticalScoreUnweighted' => 'float',
        'maxTotalCriticalScoreUnweighted' => 'float',
        'questionScores' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'questionGroupId' => 'questionGroupId',
        'totalScore' => 'totalScore',
        'maxTotalScore' => 'maxTotalScore',
        'markedNA' => 'markedNA',
        'totalCriticalScore' => 'totalCriticalScore',
        'maxTotalCriticalScore' => 'maxTotalCriticalScore',
        'totalScoreUnweighted' => 'totalScoreUnweighted',
        'maxTotalScoreUnweighted' => 'maxTotalScoreUnweighted',
        'totalCriticalScoreUnweighted' => 'totalCriticalScoreUnweighted',
        'maxTotalCriticalScoreUnweighted' => 'maxTotalCriticalScoreUnweighted',
        'questionScores' => 'questionScores'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'questionGroupId' => 'setQuestionGroupId',
        'totalScore' => 'setTotalScore',
        'maxTotalScore' => 'setMaxTotalScore',
        'markedNA' => 'setMarkedNA',
        'totalCriticalScore' => 'setTotalCriticalScore',
        'maxTotalCriticalScore' => 'setMaxTotalCriticalScore',
        'totalScoreUnweighted' => 'setTotalScoreUnweighted',
        'maxTotalScoreUnweighted' => 'setMaxTotalScoreUnweighted',
        'totalCriticalScoreUnweighted' => 'setTotalCriticalScoreUnweighted',
        'maxTotalCriticalScoreUnweighted' => 'setMaxTotalCriticalScoreUnweighted',
        'questionScores' => 'setQuestionScores'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'questionGroupId' => 'getQuestionGroupId',
        'totalScore' => 'getTotalScore',
        'maxTotalScore' => 'getMaxTotalScore',
        'markedNA' => 'getMarkedNA',
        'totalCriticalScore' => 'getTotalCriticalScore',
        'maxTotalCriticalScore' => 'getMaxTotalCriticalScore',
        'totalScoreUnweighted' => 'getTotalScoreUnweighted',
        'maxTotalScoreUnweighted' => 'getMaxTotalScoreUnweighted',
        'totalCriticalScoreUnweighted' => 'getTotalCriticalScoreUnweighted',
        'maxTotalCriticalScoreUnweighted' => 'getMaxTotalCriticalScoreUnweighted',
        'questionScores' => 'getQuestionScores'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['questionGroupId'] = isset($data['questionGroupId']) ? $data['questionGroupId'] : null;
        $this->container['totalScore'] = isset($data['totalScore']) ? $data['totalScore'] : null;
        $this->container['maxTotalScore'] = isset($data['maxTotalScore']) ? $data['maxTotalScore'] : null;
        $this->container['markedNA'] = isset($data['markedNA']) ? $data['markedNA'] : null;
        $this->container['totalCriticalScore'] = isset($data['totalCriticalScore']) ? $data['totalCriticalScore'] : null;
        $this->container['maxTotalCriticalScore'] = isset($data['maxTotalCriticalScore']) ? $data['maxTotalCriticalScore'] : null;
        $this->container['totalScoreUnweighted'] = isset($data['totalScoreUnweighted']) ? $data['totalScoreUnweighted'] : null;
        $this->container['maxTotalScoreUnweighted'] = isset($data['maxTotalScoreUnweighted']) ? $data['maxTotalScoreUnweighted'] : null;
        $this->container['totalCriticalScoreUnweighted'] = isset($data['totalCriticalScoreUnweighted']) ? $data['totalCriticalScoreUnweighted'] : null;
        $this->container['maxTotalCriticalScoreUnweighted'] = isset($data['maxTotalCriticalScoreUnweighted']) ? $data['maxTotalCriticalScoreUnweighted'] : null;
        $this->container['questionScores'] = isset($data['questionScores']) ? $data['questionScores'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets questionGroupId
     *
     * @return string
     */
    public function getQuestionGroupId()
    {
        return $this->container['questionGroupId'];
    }

    /**
     * Sets questionGroupId
     *
     * @param string $questionGroupId questionGroupId
     *
     * @return $this
     */
    public function setQuestionGroupId($questionGroupId)
    {
        $this->container['questionGroupId'] = $questionGroupId;

        return $this;
    }

    /**
     * Gets totalScore
     *
     * @return float
     */
    public function getTotalScore()
    {
        return $this->container['totalScore'];
    }

    /**
     * Sets totalScore
     *
     * @param float $totalScore totalScore
     *
     * @return $this
     */
    public function setTotalScore($totalScore)
    {
        $this->container['totalScore'] = $totalScore;

        return $this;
    }

    /**
     * Gets maxTotalScore
     *
     * @return float
     */
    public function getMaxTotalScore()
    {
        return $this->container['maxTotalScore'];
    }

    /**
     * Sets maxTotalScore
     *
     * @param float $maxTotalScore maxTotalScore
     *
     * @return $this
     */
    public function setMaxTotalScore($maxTotalScore)
    {
        $this->container['maxTotalScore'] = $maxTotalScore;

        return $this;
    }

    /**
     * Gets markedNA
     *
     * @return bool
     */
    public function getMarkedNA()
    {
        return $this->container['markedNA'];
    }

    /**
     * Sets markedNA
     *
     * @param bool $markedNA markedNA
     *
     * @return $this
     */
    public function setMarkedNA($markedNA)
    {
        $this->container['markedNA'] = $markedNA;

        return $this;
    }

    /**
     * Gets totalCriticalScore
     *
     * @return float
     */
    public function getTotalCriticalScore()
    {
        return $this->container['totalCriticalScore'];
    }

    /**
     * Sets totalCriticalScore
     *
     * @param float $totalCriticalScore totalCriticalScore
     *
     * @return $this
     */
    public function setTotalCriticalScore($totalCriticalScore)
    {
        $this->container['totalCriticalScore'] = $totalCriticalScore;

        return $this;
    }

    /**
     * Gets maxTotalCriticalScore
     *
     * @return float
     */
    public function getMaxTotalCriticalScore()
    {
        return $this->container['maxTotalCriticalScore'];
    }

    /**
     * Sets maxTotalCriticalScore
     *
     * @param float $maxTotalCriticalScore maxTotalCriticalScore
     *
     * @return $this
     */
    public function setMaxTotalCriticalScore($maxTotalCriticalScore)
    {
        $this->container['maxTotalCriticalScore'] = $maxTotalCriticalScore;

        return $this;
    }

    /**
     * Gets totalScoreUnweighted
     *
     * @return float
     */
    public function getTotalScoreUnweighted()
    {
        return $this->container['totalScoreUnweighted'];
    }

    /**
     * Sets totalScoreUnweighted
     *
     * @param float $totalScoreUnweighted totalScoreUnweighted
     *
     * @return $this
     */
    public function setTotalScoreUnweighted($totalScoreUnweighted)
    {
        $this->container['totalScoreUnweighted'] = $totalScoreUnweighted;

        return $this;
    }

    /**
     * Gets maxTotalScoreUnweighted
     *
     * @return float
     */
    public function getMaxTotalScoreUnweighted()
    {
        return $this->container['maxTotalScoreUnweighted'];
    }

    /**
     * Sets maxTotalScoreUnweighted
     *
     * @param float $maxTotalScoreUnweighted maxTotalScoreUnweighted
     *
     * @return $this
     */
    public function setMaxTotalScoreUnweighted($maxTotalScoreUnweighted)
    {
        $this->container['maxTotalScoreUnweighted'] = $maxTotalScoreUnweighted;

        return $this;
    }

    /**
     * Gets totalCriticalScoreUnweighted
     *
     * @return float
     */
    public function getTotalCriticalScoreUnweighted()
    {
        return $this->container['totalCriticalScoreUnweighted'];
    }

    /**
     * Sets totalCriticalScoreUnweighted
     *
     * @param float $totalCriticalScoreUnweighted totalCriticalScoreUnweighted
     *
     * @return $this
     */
    public function setTotalCriticalScoreUnweighted($totalCriticalScoreUnweighted)
    {
        $this->container['totalCriticalScoreUnweighted'] = $totalCriticalScoreUnweighted;

        return $this;
    }

    /**
     * Gets maxTotalCriticalScoreUnweighted
     *
     * @return float
     */
    public function getMaxTotalCriticalScoreUnweighted()
    {
        return $this->container['maxTotalCriticalScoreUnweighted'];
    }

    /**
     * Sets maxTotalCriticalScoreUnweighted
     *
     * @param float $maxTotalCriticalScoreUnweighted maxTotalCriticalScoreUnweighted
     *
     * @return $this
     */
    public function setMaxTotalCriticalScoreUnweighted($maxTotalCriticalScoreUnweighted)
    {
        $this->container['maxTotalCriticalScoreUnweighted'] = $maxTotalCriticalScoreUnweighted;

        return $this;
    }

    /**
     * Gets questionScores
     *
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationQuestionScore[]
     */
    public function getQuestionScores()
    {
        return $this->container['questionScores'];
    }

    /**
     * Sets questionScores
     *
     * @param \PureCloudPlatform\Client\V2\Model\EvaluationQuestionScore[] $questionScores questionScores
     *
     * @return $this
     */
    public function setQuestionScores($questionScores)
    {
        $this->container['questionScores'] = $questionScores;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


