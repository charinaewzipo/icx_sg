<?php
/**
 * AsyncConversationQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * AsyncConversationQuery Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AsyncConversationQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AsyncConversationQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'interval' => 'string',
        'conversationFilters' => '\PureCloudPlatform\Client\V2\Model\ConversationDetailQueryFilter[]',
        'segmentFilters' => '\PureCloudPlatform\Client\V2\Model\SegmentDetailQueryFilter[]',
        'evaluationFilters' => '\PureCloudPlatform\Client\V2\Model\EvaluationDetailQueryFilter[]',
        'mediaEndpointStatFilters' => '\PureCloudPlatform\Client\V2\Model\MediaEndpointStatDetailQueryFilter[]',
        'surveyFilters' => '\PureCloudPlatform\Client\V2\Model\SurveyDetailQueryFilter[]',
        'order' => 'string',
        'orderBy' => 'string',
        'limit' => 'int',
        'startOfDayIntervalMatching' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'interval' => null,
        'conversationFilters' => null,
        'segmentFilters' => null,
        'evaluationFilters' => null,
        'mediaEndpointStatFilters' => null,
        'surveyFilters' => null,
        'order' => null,
        'orderBy' => null,
        'limit' => 'int32',
        'startOfDayIntervalMatching' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'interval' => 'interval',
        'conversationFilters' => 'conversationFilters',
        'segmentFilters' => 'segmentFilters',
        'evaluationFilters' => 'evaluationFilters',
        'mediaEndpointStatFilters' => 'mediaEndpointStatFilters',
        'surveyFilters' => 'surveyFilters',
        'order' => 'order',
        'orderBy' => 'orderBy',
        'limit' => 'limit',
        'startOfDayIntervalMatching' => 'startOfDayIntervalMatching'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'interval' => 'setInterval',
        'conversationFilters' => 'setConversationFilters',
        'segmentFilters' => 'setSegmentFilters',
        'evaluationFilters' => 'setEvaluationFilters',
        'mediaEndpointStatFilters' => 'setMediaEndpointStatFilters',
        'surveyFilters' => 'setSurveyFilters',
        'order' => 'setOrder',
        'orderBy' => 'setOrderBy',
        'limit' => 'setLimit',
        'startOfDayIntervalMatching' => 'setStartOfDayIntervalMatching'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'interval' => 'getInterval',
        'conversationFilters' => 'getConversationFilters',
        'segmentFilters' => 'getSegmentFilters',
        'evaluationFilters' => 'getEvaluationFilters',
        'mediaEndpointStatFilters' => 'getMediaEndpointStatFilters',
        'surveyFilters' => 'getSurveyFilters',
        'order' => 'getOrder',
        'orderBy' => 'getOrderBy',
        'limit' => 'getLimit',
        'startOfDayIntervalMatching' => 'getStartOfDayIntervalMatching'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ORDER_ASC = 'asc';
    const ORDER_DESC = 'desc';
    const ORDER_BY_CONVERSATION_START = 'conversationStart';
    const ORDER_BY_CONVERSATION_END = 'conversationEnd';
    const ORDER_BY_SEGMENT_START = 'segmentStart';
    const ORDER_BY_SEGMENT_END = 'segmentEnd';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderAllowableValues()
    {
        return [
            self::ORDER_ASC,
            self::ORDER_DESC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOrderByAllowableValues()
    {
        return [
            self::ORDER_BY_CONVERSATION_START,
            self::ORDER_BY_CONVERSATION_END,
            self::ORDER_BY_SEGMENT_START,
            self::ORDER_BY_SEGMENT_END,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['conversationFilters'] = isset($data['conversationFilters']) ? $data['conversationFilters'] : null;
        $this->container['segmentFilters'] = isset($data['segmentFilters']) ? $data['segmentFilters'] : null;
        $this->container['evaluationFilters'] = isset($data['evaluationFilters']) ? $data['evaluationFilters'] : null;
        $this->container['mediaEndpointStatFilters'] = isset($data['mediaEndpointStatFilters']) ? $data['mediaEndpointStatFilters'] : null;
        $this->container['surveyFilters'] = isset($data['surveyFilters']) ? $data['surveyFilters'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['orderBy'] = isset($data['orderBy']) ? $data['orderBy'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['startOfDayIntervalMatching'] = isset($data['startOfDayIntervalMatching']) ? $data['startOfDayIntervalMatching'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($this->container['order']) && !in_array($this->container['order'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'order', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($this->container['orderBy']) && !in_array($this->container['orderBy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'orderBy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval Specifies the date and time range of data being queried. Results will include conversations that both started on a day touched by the interval AND either started, ended, or any activity during the interval. Intervals are represented as an ISO-8601 string. For example: YYYY-MM-DDThh:mm:ss/YYYY-MM-DDThh:mm:ss
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets conversationFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\ConversationDetailQueryFilter[]
     */
    public function getConversationFilters()
    {
        return $this->container['conversationFilters'];
    }

    /**
     * Sets conversationFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\ConversationDetailQueryFilter[] $conversationFilters Filters that target conversation-level data
     *
     * @return $this
     */
    public function setConversationFilters($conversationFilters)
    {
        $this->container['conversationFilters'] = $conversationFilters;

        return $this;
    }

    /**
     * Gets segmentFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\SegmentDetailQueryFilter[]
     */
    public function getSegmentFilters()
    {
        return $this->container['segmentFilters'];
    }

    /**
     * Sets segmentFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\SegmentDetailQueryFilter[] $segmentFilters Filters that target individual segments within a conversation
     *
     * @return $this
     */
    public function setSegmentFilters($segmentFilters)
    {
        $this->container['segmentFilters'] = $segmentFilters;

        return $this;
    }

    /**
     * Gets evaluationFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationDetailQueryFilter[]
     */
    public function getEvaluationFilters()
    {
        return $this->container['evaluationFilters'];
    }

    /**
     * Sets evaluationFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\EvaluationDetailQueryFilter[] $evaluationFilters Filters that target evaluations
     *
     * @return $this
     */
    public function setEvaluationFilters($evaluationFilters)
    {
        $this->container['evaluationFilters'] = $evaluationFilters;

        return $this;
    }

    /**
     * Gets mediaEndpointStatFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaEndpointStatDetailQueryFilter[]
     */
    public function getMediaEndpointStatFilters()
    {
        return $this->container['mediaEndpointStatFilters'];
    }

    /**
     * Sets mediaEndpointStatFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaEndpointStatDetailQueryFilter[] $mediaEndpointStatFilters Filters that target mediaEndpointStats
     *
     * @return $this
     */
    public function setMediaEndpointStatFilters($mediaEndpointStatFilters)
    {
        $this->container['mediaEndpointStatFilters'] = $mediaEndpointStatFilters;

        return $this;
    }

    /**
     * Gets surveyFilters
     *
     * @return \PureCloudPlatform\Client\V2\Model\SurveyDetailQueryFilter[]
     */
    public function getSurveyFilters()
    {
        return $this->container['surveyFilters'];
    }

    /**
     * Sets surveyFilters
     *
     * @param \PureCloudPlatform\Client\V2\Model\SurveyDetailQueryFilter[] $surveyFilters Filters that target surveys
     *
     * @return $this
     */
    public function setSurveyFilters($surveyFilters)
    {
        $this->container['surveyFilters'] = $surveyFilters;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order Sort the result set in ascending/descending order. Default is ascending
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $allowedValues = $this->getOrderAllowableValues();
        if (!is_null($order) && !in_array($order, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'order', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets orderBy
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['orderBy'];
    }

    /**
     * Sets orderBy
     *
     * @param string $orderBy Specify which data element within the result set to use for sorting. The options  to use as a basis for sorting the results: conversationStart, segmentStart, and segmentEnd. If not specified, the default is conversationStart
     *
     * @return $this
     */
    public function setOrderBy($orderBy)
    {
        $allowedValues = $this->getOrderByAllowableValues();
        if (!is_null($orderBy) && !in_array($orderBy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'orderBy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['orderBy'] = $orderBy;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Specify number of results to be returned
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets startOfDayIntervalMatching
     *
     * @return bool
     */
    public function getStartOfDayIntervalMatching()
    {
        return $this->container['startOfDayIntervalMatching'];
    }

    /**
     * Sets startOfDayIntervalMatching
     *
     * @param bool $startOfDayIntervalMatching Add a filter to only include conversations that started after the beginning of the interval start date (UTC)
     *
     * @return $this
     */
    public function setStartOfDayIntervalMatching($startOfDayIntervalMatching)
    {
        $this->container['startOfDayIntervalMatching'] = $startOfDayIntervalMatching;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


