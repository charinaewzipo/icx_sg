<?php
/**
 * PolicyActions
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * PolicyActions Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PolicyActions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PolicyActions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'retainRecording' => 'bool',
        'deleteRecording' => 'bool',
        'alwaysDelete' => 'bool',
        'assignEvaluations' => '\PureCloudPlatform\Client\V2\Model\EvaluationAssignment[]',
        'assignMeteredEvaluations' => '\PureCloudPlatform\Client\V2\Model\MeteredEvaluationAssignment[]',
        'assignMeteredAssignmentByAgent' => '\PureCloudPlatform\Client\V2\Model\MeteredAssignmentByAgent[]',
        'assignCalibrations' => '\PureCloudPlatform\Client\V2\Model\CalibrationAssignment[]',
        'assignSurveys' => '\PureCloudPlatform\Client\V2\Model\SurveyAssignment[]',
        'retentionDuration' => '\PureCloudPlatform\Client\V2\Model\RetentionDuration',
        'initiateScreenRecording' => '\PureCloudPlatform\Client\V2\Model\InitiateScreenRecording',
        'mediaTranscriptions' => '\PureCloudPlatform\Client\V2\Model\MediaTranscription[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'retainRecording' => null,
        'deleteRecording' => null,
        'alwaysDelete' => null,
        'assignEvaluations' => null,
        'assignMeteredEvaluations' => null,
        'assignMeteredAssignmentByAgent' => null,
        'assignCalibrations' => null,
        'assignSurveys' => null,
        'retentionDuration' => null,
        'initiateScreenRecording' => null,
        'mediaTranscriptions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retainRecording' => 'retainRecording',
        'deleteRecording' => 'deleteRecording',
        'alwaysDelete' => 'alwaysDelete',
        'assignEvaluations' => 'assignEvaluations',
        'assignMeteredEvaluations' => 'assignMeteredEvaluations',
        'assignMeteredAssignmentByAgent' => 'assignMeteredAssignmentByAgent',
        'assignCalibrations' => 'assignCalibrations',
        'assignSurveys' => 'assignSurveys',
        'retentionDuration' => 'retentionDuration',
        'initiateScreenRecording' => 'initiateScreenRecording',
        'mediaTranscriptions' => 'mediaTranscriptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retainRecording' => 'setRetainRecording',
        'deleteRecording' => 'setDeleteRecording',
        'alwaysDelete' => 'setAlwaysDelete',
        'assignEvaluations' => 'setAssignEvaluations',
        'assignMeteredEvaluations' => 'setAssignMeteredEvaluations',
        'assignMeteredAssignmentByAgent' => 'setAssignMeteredAssignmentByAgent',
        'assignCalibrations' => 'setAssignCalibrations',
        'assignSurveys' => 'setAssignSurveys',
        'retentionDuration' => 'setRetentionDuration',
        'initiateScreenRecording' => 'setInitiateScreenRecording',
        'mediaTranscriptions' => 'setMediaTranscriptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retainRecording' => 'getRetainRecording',
        'deleteRecording' => 'getDeleteRecording',
        'alwaysDelete' => 'getAlwaysDelete',
        'assignEvaluations' => 'getAssignEvaluations',
        'assignMeteredEvaluations' => 'getAssignMeteredEvaluations',
        'assignMeteredAssignmentByAgent' => 'getAssignMeteredAssignmentByAgent',
        'assignCalibrations' => 'getAssignCalibrations',
        'assignSurveys' => 'getAssignSurveys',
        'retentionDuration' => 'getRetentionDuration',
        'initiateScreenRecording' => 'getInitiateScreenRecording',
        'mediaTranscriptions' => 'getMediaTranscriptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['retainRecording'] = isset($data['retainRecording']) ? $data['retainRecording'] : null;
        $this->container['deleteRecording'] = isset($data['deleteRecording']) ? $data['deleteRecording'] : null;
        $this->container['alwaysDelete'] = isset($data['alwaysDelete']) ? $data['alwaysDelete'] : null;
        $this->container['assignEvaluations'] = isset($data['assignEvaluations']) ? $data['assignEvaluations'] : null;
        $this->container['assignMeteredEvaluations'] = isset($data['assignMeteredEvaluations']) ? $data['assignMeteredEvaluations'] : null;
        $this->container['assignMeteredAssignmentByAgent'] = isset($data['assignMeteredAssignmentByAgent']) ? $data['assignMeteredAssignmentByAgent'] : null;
        $this->container['assignCalibrations'] = isset($data['assignCalibrations']) ? $data['assignCalibrations'] : null;
        $this->container['assignSurveys'] = isset($data['assignSurveys']) ? $data['assignSurveys'] : null;
        $this->container['retentionDuration'] = isset($data['retentionDuration']) ? $data['retentionDuration'] : null;
        $this->container['initiateScreenRecording'] = isset($data['initiateScreenRecording']) ? $data['initiateScreenRecording'] : null;
        $this->container['mediaTranscriptions'] = isset($data['mediaTranscriptions']) ? $data['mediaTranscriptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retainRecording
     *
     * @return bool
     */
    public function getRetainRecording()
    {
        return $this->container['retainRecording'];
    }

    /**
     * Sets retainRecording
     *
     * @param bool $retainRecording true to retain the recording associated with the conversation. Default = true
     *
     * @return $this
     */
    public function setRetainRecording($retainRecording)
    {
        $this->container['retainRecording'] = $retainRecording;

        return $this;
    }

    /**
     * Gets deleteRecording
     *
     * @return bool
     */
    public function getDeleteRecording()
    {
        return $this->container['deleteRecording'];
    }

    /**
     * Sets deleteRecording
     *
     * @param bool $deleteRecording true to delete the recording associated with the conversation. If retainRecording = true, this will be ignored. Default = false
     *
     * @return $this
     */
    public function setDeleteRecording($deleteRecording)
    {
        $this->container['deleteRecording'] = $deleteRecording;

        return $this;
    }

    /**
     * Gets alwaysDelete
     *
     * @return bool
     */
    public function getAlwaysDelete()
    {
        return $this->container['alwaysDelete'];
    }

    /**
     * Sets alwaysDelete
     *
     * @param bool $alwaysDelete true to delete the recording associated with the conversation regardless of the values of retainRecording or deleteRecording. Default = false
     *
     * @return $this
     */
    public function setAlwaysDelete($alwaysDelete)
    {
        $this->container['alwaysDelete'] = $alwaysDelete;

        return $this;
    }

    /**
     * Gets assignEvaluations
     *
     * @return \PureCloudPlatform\Client\V2\Model\EvaluationAssignment[]
     */
    public function getAssignEvaluations()
    {
        return $this->container['assignEvaluations'];
    }

    /**
     * Sets assignEvaluations
     *
     * @param \PureCloudPlatform\Client\V2\Model\EvaluationAssignment[] $assignEvaluations assignEvaluations
     *
     * @return $this
     */
    public function setAssignEvaluations($assignEvaluations)
    {
        $this->container['assignEvaluations'] = $assignEvaluations;

        return $this;
    }

    /**
     * Gets assignMeteredEvaluations
     *
     * @return \PureCloudPlatform\Client\V2\Model\MeteredEvaluationAssignment[]
     */
    public function getAssignMeteredEvaluations()
    {
        return $this->container['assignMeteredEvaluations'];
    }

    /**
     * Sets assignMeteredEvaluations
     *
     * @param \PureCloudPlatform\Client\V2\Model\MeteredEvaluationAssignment[] $assignMeteredEvaluations assignMeteredEvaluations
     *
     * @return $this
     */
    public function setAssignMeteredEvaluations($assignMeteredEvaluations)
    {
        $this->container['assignMeteredEvaluations'] = $assignMeteredEvaluations;

        return $this;
    }

    /**
     * Gets assignMeteredAssignmentByAgent
     *
     * @return \PureCloudPlatform\Client\V2\Model\MeteredAssignmentByAgent[]
     */
    public function getAssignMeteredAssignmentByAgent()
    {
        return $this->container['assignMeteredAssignmentByAgent'];
    }

    /**
     * Sets assignMeteredAssignmentByAgent
     *
     * @param \PureCloudPlatform\Client\V2\Model\MeteredAssignmentByAgent[] $assignMeteredAssignmentByAgent assignMeteredAssignmentByAgent
     *
     * @return $this
     */
    public function setAssignMeteredAssignmentByAgent($assignMeteredAssignmentByAgent)
    {
        $this->container['assignMeteredAssignmentByAgent'] = $assignMeteredAssignmentByAgent;

        return $this;
    }

    /**
     * Gets assignCalibrations
     *
     * @return \PureCloudPlatform\Client\V2\Model\CalibrationAssignment[]
     */
    public function getAssignCalibrations()
    {
        return $this->container['assignCalibrations'];
    }

    /**
     * Sets assignCalibrations
     *
     * @param \PureCloudPlatform\Client\V2\Model\CalibrationAssignment[] $assignCalibrations assignCalibrations
     *
     * @return $this
     */
    public function setAssignCalibrations($assignCalibrations)
    {
        $this->container['assignCalibrations'] = $assignCalibrations;

        return $this;
    }

    /**
     * Gets assignSurveys
     *
     * @return \PureCloudPlatform\Client\V2\Model\SurveyAssignment[]
     */
    public function getAssignSurveys()
    {
        return $this->container['assignSurveys'];
    }

    /**
     * Sets assignSurveys
     *
     * @param \PureCloudPlatform\Client\V2\Model\SurveyAssignment[] $assignSurveys assignSurveys
     *
     * @return $this
     */
    public function setAssignSurveys($assignSurveys)
    {
        $this->container['assignSurveys'] = $assignSurveys;

        return $this;
    }

    /**
     * Gets retentionDuration
     *
     * @return \PureCloudPlatform\Client\V2\Model\RetentionDuration
     */
    public function getRetentionDuration()
    {
        return $this->container['retentionDuration'];
    }

    /**
     * Sets retentionDuration
     *
     * @param \PureCloudPlatform\Client\V2\Model\RetentionDuration $retentionDuration retentionDuration
     *
     * @return $this
     */
    public function setRetentionDuration($retentionDuration)
    {
        $this->container['retentionDuration'] = $retentionDuration;

        return $this;
    }

    /**
     * Gets initiateScreenRecording
     *
     * @return \PureCloudPlatform\Client\V2\Model\InitiateScreenRecording
     */
    public function getInitiateScreenRecording()
    {
        return $this->container['initiateScreenRecording'];
    }

    /**
     * Sets initiateScreenRecording
     *
     * @param \PureCloudPlatform\Client\V2\Model\InitiateScreenRecording $initiateScreenRecording initiateScreenRecording
     *
     * @return $this
     */
    public function setInitiateScreenRecording($initiateScreenRecording)
    {
        $this->container['initiateScreenRecording'] = $initiateScreenRecording;

        return $this;
    }

    /**
     * Gets mediaTranscriptions
     *
     * @return \PureCloudPlatform\Client\V2\Model\MediaTranscription[]
     */
    public function getMediaTranscriptions()
    {
        return $this->container['mediaTranscriptions'];
    }

    /**
     * Sets mediaTranscriptions
     *
     * @param \PureCloudPlatform\Client\V2\Model\MediaTranscription[] $mediaTranscriptions mediaTranscriptions
     *
     * @return $this
     */
    public function setMediaTranscriptions($mediaTranscriptions)
    {
        $this->container['mediaTranscriptions'] = $mediaTranscriptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


