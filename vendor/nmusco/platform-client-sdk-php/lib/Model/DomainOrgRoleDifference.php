<?php
/**
 * DomainOrgRoleDifference
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * DomainOrgRoleDifference Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainOrgRoleDifference implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainOrgRoleDifference';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'removedPermissionPolicies' => '\PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]',
        'addedPermissionPolicies' => '\PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]',
        'samePermissionPolicies' => '\PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]',
        'userOrgRole' => '\PureCloudPlatform\Client\V2\Model\DomainOrganizationRole',
        'roleFromDefault' => '\PureCloudPlatform\Client\V2\Model\DomainOrganizationRole'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'removedPermissionPolicies' => null,
        'addedPermissionPolicies' => null,
        'samePermissionPolicies' => null,
        'userOrgRole' => null,
        'roleFromDefault' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'removedPermissionPolicies' => 'removedPermissionPolicies',
        'addedPermissionPolicies' => 'addedPermissionPolicies',
        'samePermissionPolicies' => 'samePermissionPolicies',
        'userOrgRole' => 'userOrgRole',
        'roleFromDefault' => 'roleFromDefault'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'removedPermissionPolicies' => 'setRemovedPermissionPolicies',
        'addedPermissionPolicies' => 'setAddedPermissionPolicies',
        'samePermissionPolicies' => 'setSamePermissionPolicies',
        'userOrgRole' => 'setUserOrgRole',
        'roleFromDefault' => 'setRoleFromDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'removedPermissionPolicies' => 'getRemovedPermissionPolicies',
        'addedPermissionPolicies' => 'getAddedPermissionPolicies',
        'samePermissionPolicies' => 'getSamePermissionPolicies',
        'userOrgRole' => 'getUserOrgRole',
        'roleFromDefault' => 'getRoleFromDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['removedPermissionPolicies'] = isset($data['removedPermissionPolicies']) ? $data['removedPermissionPolicies'] : null;
        $this->container['addedPermissionPolicies'] = isset($data['addedPermissionPolicies']) ? $data['addedPermissionPolicies'] : null;
        $this->container['samePermissionPolicies'] = isset($data['samePermissionPolicies']) ? $data['samePermissionPolicies'] : null;
        $this->container['userOrgRole'] = isset($data['userOrgRole']) ? $data['userOrgRole'] : null;
        $this->container['roleFromDefault'] = isset($data['roleFromDefault']) ? $data['roleFromDefault'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets removedPermissionPolicies
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]
     */
    public function getRemovedPermissionPolicies()
    {
        return $this->container['removedPermissionPolicies'];
    }

    /**
     * Sets removedPermissionPolicies
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[] $removedPermissionPolicies removedPermissionPolicies
     *
     * @return $this
     */
    public function setRemovedPermissionPolicies($removedPermissionPolicies)
    {
        $this->container['removedPermissionPolicies'] = $removedPermissionPolicies;

        return $this;
    }

    /**
     * Gets addedPermissionPolicies
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]
     */
    public function getAddedPermissionPolicies()
    {
        return $this->container['addedPermissionPolicies'];
    }

    /**
     * Sets addedPermissionPolicies
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[] $addedPermissionPolicies addedPermissionPolicies
     *
     * @return $this
     */
    public function setAddedPermissionPolicies($addedPermissionPolicies)
    {
        $this->container['addedPermissionPolicies'] = $addedPermissionPolicies;

        return $this;
    }

    /**
     * Gets samePermissionPolicies
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[]
     */
    public function getSamePermissionPolicies()
    {
        return $this->container['samePermissionPolicies'];
    }

    /**
     * Sets samePermissionPolicies
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainPermissionPolicy[] $samePermissionPolicies samePermissionPolicies
     *
     * @return $this
     */
    public function setSamePermissionPolicies($samePermissionPolicies)
    {
        $this->container['samePermissionPolicies'] = $samePermissionPolicies;

        return $this;
    }

    /**
     * Gets userOrgRole
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainOrganizationRole
     */
    public function getUserOrgRole()
    {
        return $this->container['userOrgRole'];
    }

    /**
     * Sets userOrgRole
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainOrganizationRole $userOrgRole userOrgRole
     *
     * @return $this
     */
    public function setUserOrgRole($userOrgRole)
    {
        $this->container['userOrgRole'] = $userOrgRole;

        return $this;
    }

    /**
     * Gets roleFromDefault
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainOrganizationRole
     */
    public function getRoleFromDefault()
    {
        return $this->container['roleFromDefault'];
    }

    /**
     * Sets roleFromDefault
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainOrganizationRole $roleFromDefault roleFromDefault
     *
     * @return $this
     */
    public function setRoleFromDefault($roleFromDefault)
    {
        $this->container['roleFromDefault'] = $roleFromDefault;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


