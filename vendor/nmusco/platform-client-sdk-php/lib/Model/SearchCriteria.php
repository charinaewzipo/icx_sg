<?php
/**
 * SearchCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * SearchCriteria Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'endValue' => 'string',
        'values' => 'string[]',
        'startValue' => 'string',
        'fields' => 'string[]',
        'value' => 'string',
        'operator' => 'string',
        'group' => '\PureCloudPlatform\Client\V2\Model\SearchCriteria[]',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'endValue' => null,
        'values' => null,
        'startValue' => null,
        'fields' => null,
        'value' => null,
        'operator' => null,
        'group' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endValue' => 'endValue',
        'values' => 'values',
        'startValue' => 'startValue',
        'fields' => 'fields',
        'value' => 'value',
        'operator' => 'operator',
        'group' => 'group',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endValue' => 'setEndValue',
        'values' => 'setValues',
        'startValue' => 'setStartValue',
        'fields' => 'setFields',
        'value' => 'setValue',
        'operator' => 'setOperator',
        'group' => 'setGroup',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endValue' => 'getEndValue',
        'values' => 'getValues',
        'startValue' => 'getStartValue',
        'fields' => 'getFields',
        'value' => 'getValue',
        'operator' => 'getOperator',
        'group' => 'getGroup',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATOR__AND = 'AND';
    const OPERATOR__OR = 'OR';
    const OPERATOR_NOT = 'NOT';
    const TYPE_EXACT = 'EXACT';
    const TYPE_CONTAINS = 'CONTAINS';
    const TYPE_STARTS_WITH = 'STARTS_WITH';
    const TYPE_REQUIRED_FIELDS = 'REQUIRED_FIELDS';
    const TYPE_RANGE = 'RANGE';
    const TYPE_DATE_RANGE = 'DATE_RANGE';
    const TYPE_LESS_THAN = 'LESS_THAN';
    const TYPE_LESS_THAN_EQUAL_TO = 'LESS_THAN_EQUAL_TO';
    const TYPE_GREATER_THAN = 'GREATER_THAN';
    const TYPE_GREATER_THAN_EQUAL_TO = 'GREATER_THAN_EQUAL_TO';
    const TYPE_SIMPLE = 'SIMPLE';
    const TYPE_TERM = 'TERM';
    const TYPE_TERMS = 'TERMS';
    const TYPE_QUERY_STRING = 'QUERY_STRING';
    const TYPE_MATCH_ALL = 'MATCH_ALL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR__AND,
            self::OPERATOR__OR,
            self::OPERATOR_NOT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_EXACT,
            self::TYPE_CONTAINS,
            self::TYPE_STARTS_WITH,
            self::TYPE_REQUIRED_FIELDS,
            self::TYPE_RANGE,
            self::TYPE_DATE_RANGE,
            self::TYPE_LESS_THAN,
            self::TYPE_LESS_THAN_EQUAL_TO,
            self::TYPE_GREATER_THAN,
            self::TYPE_GREATER_THAN_EQUAL_TO,
            self::TYPE_SIMPLE,
            self::TYPE_TERM,
            self::TYPE_TERMS,
            self::TYPE_QUERY_STRING,
            self::TYPE_MATCH_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endValue'] = isset($data['endValue']) ? $data['endValue'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['startValue'] = isset($data['startValue']) ? $data['startValue'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endValue
     *
     * @return string
     */
    public function getEndValue()
    {
        return $this->container['endValue'];
    }

    /**
     * Sets endValue
     *
     * @param string $endValue The end value of the range. This field is used for range search types.
     *
     * @return $this
     */
    public function setEndValue($endValue)
    {
        $this->container['endValue'] = $endValue;

        return $this;
    }

    /**
     * Gets values
     *
     * @return string[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param string[] $values A list of values for the search to match against
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets startValue
     *
     * @return string
     */
    public function getStartValue()
    {
        return $this->container['startValue'];
    }

    /**
     * Sets startValue
     *
     * @param string $startValue The start value of the range. This field is used for range search types.
     *
     * @return $this
     */
    public function setStartValue($startValue)
    {
        $this->container['startValue'] = $startValue;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[] $fields Field names to search against
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value A value for the search to match against
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator How to apply this search criteria against other criteria
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($operator) && !in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \PureCloudPlatform\Client\V2\Model\SearchCriteria[]
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \PureCloudPlatform\Client\V2\Model\SearchCriteria[] $group Groups multiple conditions
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


