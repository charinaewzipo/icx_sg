<?php
/**
 * PhoneCapabilities
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * PhoneCapabilities Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneCapabilities implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhoneCapabilities';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'provisions' => 'bool',
        'registers' => 'bool',
        'dualRegisters' => 'bool',
        'hardwareIdType' => 'string',
        'allowReboot' => 'bool',
        'noRebalance' => 'bool',
        'noCloudProvisioning' => 'bool',
        'mediaCodecs' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'provisions' => null,
        'registers' => null,
        'dualRegisters' => null,
        'hardwareIdType' => null,
        'allowReboot' => null,
        'noRebalance' => null,
        'noCloudProvisioning' => null,
        'mediaCodecs' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'provisions' => 'provisions',
        'registers' => 'registers',
        'dualRegisters' => 'dualRegisters',
        'hardwareIdType' => 'hardwareIdType',
        'allowReboot' => 'allowReboot',
        'noRebalance' => 'noRebalance',
        'noCloudProvisioning' => 'noCloudProvisioning',
        'mediaCodecs' => 'mediaCodecs'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'provisions' => 'setProvisions',
        'registers' => 'setRegisters',
        'dualRegisters' => 'setDualRegisters',
        'hardwareIdType' => 'setHardwareIdType',
        'allowReboot' => 'setAllowReboot',
        'noRebalance' => 'setNoRebalance',
        'noCloudProvisioning' => 'setNoCloudProvisioning',
        'mediaCodecs' => 'setMediaCodecs'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'provisions' => 'getProvisions',
        'registers' => 'getRegisters',
        'dualRegisters' => 'getDualRegisters',
        'hardwareIdType' => 'getHardwareIdType',
        'allowReboot' => 'getAllowReboot',
        'noRebalance' => 'getNoRebalance',
        'noCloudProvisioning' => 'getNoCloudProvisioning',
        'mediaCodecs' => 'getMediaCodecs'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEDIA_CODECS_OPUS = 'audio/opus';
    const MEDIA_CODECS_PCMU = 'audio/pcmu';
    const MEDIA_CODECS_PCMA = 'audio/pcma';
    const MEDIA_CODECS_G729 = 'audio/g729';
    const MEDIA_CODECS_G722 = 'audio/g722';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMediaCodecsAllowableValues()
    {
        return [
            self::MEDIA_CODECS_OPUS,
            self::MEDIA_CODECS_PCMU,
            self::MEDIA_CODECS_PCMA,
            self::MEDIA_CODECS_G729,
            self::MEDIA_CODECS_G722,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['provisions'] = isset($data['provisions']) ? $data['provisions'] : null;
        $this->container['registers'] = isset($data['registers']) ? $data['registers'] : null;
        $this->container['dualRegisters'] = isset($data['dualRegisters']) ? $data['dualRegisters'] : null;
        $this->container['hardwareIdType'] = isset($data['hardwareIdType']) ? $data['hardwareIdType'] : null;
        $this->container['allowReboot'] = isset($data['allowReboot']) ? $data['allowReboot'] : null;
        $this->container['noRebalance'] = isset($data['noRebalance']) ? $data['noRebalance'] : null;
        $this->container['noCloudProvisioning'] = isset($data['noCloudProvisioning']) ? $data['noCloudProvisioning'] : null;
        $this->container['mediaCodecs'] = isset($data['mediaCodecs']) ? $data['mediaCodecs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets provisions
     *
     * @return bool
     */
    public function getProvisions()
    {
        return $this->container['provisions'];
    }

    /**
     * Sets provisions
     *
     * @param bool $provisions provisions
     *
     * @return $this
     */
    public function setProvisions($provisions)
    {
        $this->container['provisions'] = $provisions;

        return $this;
    }

    /**
     * Gets registers
     *
     * @return bool
     */
    public function getRegisters()
    {
        return $this->container['registers'];
    }

    /**
     * Sets registers
     *
     * @param bool $registers registers
     *
     * @return $this
     */
    public function setRegisters($registers)
    {
        $this->container['registers'] = $registers;

        return $this;
    }

    /**
     * Gets dualRegisters
     *
     * @return bool
     */
    public function getDualRegisters()
    {
        return $this->container['dualRegisters'];
    }

    /**
     * Sets dualRegisters
     *
     * @param bool $dualRegisters dualRegisters
     *
     * @return $this
     */
    public function setDualRegisters($dualRegisters)
    {
        $this->container['dualRegisters'] = $dualRegisters;

        return $this;
    }

    /**
     * Gets hardwareIdType
     *
     * @return string
     */
    public function getHardwareIdType()
    {
        return $this->container['hardwareIdType'];
    }

    /**
     * Sets hardwareIdType
     *
     * @param string $hardwareIdType hardwareIdType
     *
     * @return $this
     */
    public function setHardwareIdType($hardwareIdType)
    {
        $this->container['hardwareIdType'] = $hardwareIdType;

        return $this;
    }

    /**
     * Gets allowReboot
     *
     * @return bool
     */
    public function getAllowReboot()
    {
        return $this->container['allowReboot'];
    }

    /**
     * Sets allowReboot
     *
     * @param bool $allowReboot allowReboot
     *
     * @return $this
     */
    public function setAllowReboot($allowReboot)
    {
        $this->container['allowReboot'] = $allowReboot;

        return $this;
    }

    /**
     * Gets noRebalance
     *
     * @return bool
     */
    public function getNoRebalance()
    {
        return $this->container['noRebalance'];
    }

    /**
     * Sets noRebalance
     *
     * @param bool $noRebalance noRebalance
     *
     * @return $this
     */
    public function setNoRebalance($noRebalance)
    {
        $this->container['noRebalance'] = $noRebalance;

        return $this;
    }

    /**
     * Gets noCloudProvisioning
     *
     * @return bool
     */
    public function getNoCloudProvisioning()
    {
        return $this->container['noCloudProvisioning'];
    }

    /**
     * Sets noCloudProvisioning
     *
     * @param bool $noCloudProvisioning noCloudProvisioning
     *
     * @return $this
     */
    public function setNoCloudProvisioning($noCloudProvisioning)
    {
        $this->container['noCloudProvisioning'] = $noCloudProvisioning;

        return $this;
    }

    /**
     * Gets mediaCodecs
     *
     * @return string[]
     */
    public function getMediaCodecs()
    {
        return $this->container['mediaCodecs'];
    }

    /**
     * Sets mediaCodecs
     *
     * @param string[] $mediaCodecs mediaCodecs
     *
     * @return $this
     */
    public function setMediaCodecs($mediaCodecs)
    {
        $allowedValues = $this->getMediaCodecsAllowableValues();
        if (!is_null($mediaCodecs) && array_diff($mediaCodecs, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mediaCodecs', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mediaCodecs'] = $mediaCodecs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


