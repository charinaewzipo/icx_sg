<?php
/**
 * PhoneStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * PhoneStatus Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PhoneStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PhoneStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'operationalStatus' => 'string',
        'edgesStatus' => 'string',
        'eventCreationTime' => 'string',
        'provision' => '\PureCloudPlatform\Client\V2\Model\ProvisionInfo',
        'lineStatuses' => '\PureCloudPlatform\Client\V2\Model\LineStatus[]',
        'phoneAssignmentToEdgeType' => 'string',
        'edge' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'operationalStatus' => null,
        'edgesStatus' => null,
        'eventCreationTime' => null,
        'provision' => null,
        'lineStatuses' => null,
        'phoneAssignmentToEdgeType' => null,
        'edge' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'operationalStatus' => 'operationalStatus',
        'edgesStatus' => 'edgesStatus',
        'eventCreationTime' => 'eventCreationTime',
        'provision' => 'provision',
        'lineStatuses' => 'lineStatuses',
        'phoneAssignmentToEdgeType' => 'phoneAssignmentToEdgeType',
        'edge' => 'edge',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'operationalStatus' => 'setOperationalStatus',
        'edgesStatus' => 'setEdgesStatus',
        'eventCreationTime' => 'setEventCreationTime',
        'provision' => 'setProvision',
        'lineStatuses' => 'setLineStatuses',
        'phoneAssignmentToEdgeType' => 'setPhoneAssignmentToEdgeType',
        'edge' => 'setEdge',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'operationalStatus' => 'getOperationalStatus',
        'edgesStatus' => 'getEdgesStatus',
        'eventCreationTime' => 'getEventCreationTime',
        'provision' => 'getProvision',
        'lineStatuses' => 'getLineStatuses',
        'phoneAssignmentToEdgeType' => 'getPhoneAssignmentToEdgeType',
        'edge' => 'getEdge',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATIONAL_STATUS_OPERATIONAL = 'OPERATIONAL';
    const OPERATIONAL_STATUS_DEGRADED = 'DEGRADED';
    const OPERATIONAL_STATUS_OFFLINE = 'OFFLINE';
    const EDGES_STATUS_IN_SERVICE = 'IN_SERVICE';
    const EDGES_STATUS_MIXED_SERVICE = 'MIXED_SERVICE';
    const EDGES_STATUS_OUT_OF_SERVICE = 'OUT_OF_SERVICE';
    const EDGES_STATUS_NO_EDGES = 'NO_EDGES';
    const PHONE_ASSIGNMENT_TO_EDGE_TYPE_PRIMARY = 'PRIMARY';
    const PHONE_ASSIGNMENT_TO_EDGE_TYPE_SECONDARY = 'SECONDARY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperationalStatusAllowableValues()
    {
        return [
            self::OPERATIONAL_STATUS_OPERATIONAL,
            self::OPERATIONAL_STATUS_DEGRADED,
            self::OPERATIONAL_STATUS_OFFLINE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEdgesStatusAllowableValues()
    {
        return [
            self::EDGES_STATUS_IN_SERVICE,
            self::EDGES_STATUS_MIXED_SERVICE,
            self::EDGES_STATUS_OUT_OF_SERVICE,
            self::EDGES_STATUS_NO_EDGES,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPhoneAssignmentToEdgeTypeAllowableValues()
    {
        return [
            self::PHONE_ASSIGNMENT_TO_EDGE_TYPE_PRIMARY,
            self::PHONE_ASSIGNMENT_TO_EDGE_TYPE_SECONDARY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['operationalStatus'] = isset($data['operationalStatus']) ? $data['operationalStatus'] : null;
        $this->container['edgesStatus'] = isset($data['edgesStatus']) ? $data['edgesStatus'] : null;
        $this->container['eventCreationTime'] = isset($data['eventCreationTime']) ? $data['eventCreationTime'] : null;
        $this->container['provision'] = isset($data['provision']) ? $data['provision'] : null;
        $this->container['lineStatuses'] = isset($data['lineStatuses']) ? $data['lineStatuses'] : null;
        $this->container['phoneAssignmentToEdgeType'] = isset($data['phoneAssignmentToEdgeType']) ? $data['phoneAssignmentToEdgeType'] : null;
        $this->container['edge'] = isset($data['edge']) ? $data['edge'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperationalStatusAllowableValues();
        if (!is_null($this->container['operationalStatus']) && !in_array($this->container['operationalStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operationalStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEdgesStatusAllowableValues();
        if (!is_null($this->container['edgesStatus']) && !in_array($this->container['edgesStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'edgesStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPhoneAssignmentToEdgeTypeAllowableValues();
        if (!is_null($this->container['phoneAssignmentToEdgeType']) && !in_array($this->container['phoneAssignmentToEdgeType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'phoneAssignmentToEdgeType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets operationalStatus
     *
     * @return string
     */
    public function getOperationalStatus()
    {
        return $this->container['operationalStatus'];
    }

    /**
     * Sets operationalStatus
     *
     * @param string $operationalStatus The Operational Status of this phone
     *
     * @return $this
     */
    public function setOperationalStatus($operationalStatus)
    {
        $allowedValues = $this->getOperationalStatusAllowableValues();
        if (!is_null($operationalStatus) && !in_array($operationalStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operationalStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operationalStatus'] = $operationalStatus;

        return $this;
    }

    /**
     * Gets edgesStatus
     *
     * @return string
     */
    public function getEdgesStatus()
    {
        return $this->container['edgesStatus'];
    }

    /**
     * Sets edgesStatus
     *
     * @param string $edgesStatus The status of the primary or secondary Edges assigned to the phone lines.
     *
     * @return $this
     */
    public function setEdgesStatus($edgesStatus)
    {
        $allowedValues = $this->getEdgesStatusAllowableValues();
        if (!is_null($edgesStatus) && !in_array($edgesStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'edgesStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['edgesStatus'] = $edgesStatus;

        return $this;
    }

    /**
     * Gets eventCreationTime
     *
     * @return string
     */
    public function getEventCreationTime()
    {
        return $this->container['eventCreationTime'];
    }

    /**
     * Sets eventCreationTime
     *
     * @param string $eventCreationTime Event Creation Time represents an ISO-8601 string. For example: UTC, UTC+01:00, or Europe/London
     *
     * @return $this
     */
    public function setEventCreationTime($eventCreationTime)
    {
        $this->container['eventCreationTime'] = $eventCreationTime;

        return $this;
    }

    /**
     * Gets provision
     *
     * @return \PureCloudPlatform\Client\V2\Model\ProvisionInfo
     */
    public function getProvision()
    {
        return $this->container['provision'];
    }

    /**
     * Sets provision
     *
     * @param \PureCloudPlatform\Client\V2\Model\ProvisionInfo $provision Provision information for this phone
     *
     * @return $this
     */
    public function setProvision($provision)
    {
        $this->container['provision'] = $provision;

        return $this;
    }

    /**
     * Gets lineStatuses
     *
     * @return \PureCloudPlatform\Client\V2\Model\LineStatus[]
     */
    public function getLineStatuses()
    {
        return $this->container['lineStatuses'];
    }

    /**
     * Sets lineStatuses
     *
     * @param \PureCloudPlatform\Client\V2\Model\LineStatus[] $lineStatuses A list of LineStatus information for each of the lines of this phone
     *
     * @return $this
     */
    public function setLineStatuses($lineStatuses)
    {
        $this->container['lineStatuses'] = $lineStatuses;

        return $this;
    }

    /**
     * Gets phoneAssignmentToEdgeType
     *
     * @return string
     */
    public function getPhoneAssignmentToEdgeType()
    {
        return $this->container['phoneAssignmentToEdgeType'];
    }

    /**
     * Sets phoneAssignmentToEdgeType
     *
     * @param string $phoneAssignmentToEdgeType The phone status's edge assignment type.
     *
     * @return $this
     */
    public function setPhoneAssignmentToEdgeType($phoneAssignmentToEdgeType)
    {
        $allowedValues = $this->getPhoneAssignmentToEdgeTypeAllowableValues();
        if (!is_null($phoneAssignmentToEdgeType) && !in_array($phoneAssignmentToEdgeType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'phoneAssignmentToEdgeType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['phoneAssignmentToEdgeType'] = $phoneAssignmentToEdgeType;

        return $this;
    }

    /**
     * Gets edge
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getEdge()
    {
        return $this->container['edge'];
    }

    /**
     * Sets edge
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $edge The URI of the edge that provided this status information.
     *
     * @return $this
     */
    public function setEdge($edge)
    {
        $this->container['edge'] = $edge;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


