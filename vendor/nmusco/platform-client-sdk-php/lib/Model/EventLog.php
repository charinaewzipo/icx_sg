<?php
/**
 * EventLog
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * EventLog Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EventLog implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EventLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'errorEntity' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'relatedEntity' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'timestamp' => '\DateTime',
        'level' => 'string',
        'category' => 'string',
        'correlationId' => 'string',
        'eventMessage' => '\PureCloudPlatform\Client\V2\Model\EventMessage',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'errorEntity' => null,
        'relatedEntity' => null,
        'timestamp' => 'date-time',
        'level' => null,
        'category' => null,
        'correlationId' => null,
        'eventMessage' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'errorEntity' => 'errorEntity',
        'relatedEntity' => 'relatedEntity',
        'timestamp' => 'timestamp',
        'level' => 'level',
        'category' => 'category',
        'correlationId' => 'correlationId',
        'eventMessage' => 'eventMessage',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'errorEntity' => 'setErrorEntity',
        'relatedEntity' => 'setRelatedEntity',
        'timestamp' => 'setTimestamp',
        'level' => 'setLevel',
        'category' => 'setCategory',
        'correlationId' => 'setCorrelationId',
        'eventMessage' => 'setEventMessage',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'errorEntity' => 'getErrorEntity',
        'relatedEntity' => 'getRelatedEntity',
        'timestamp' => 'getTimestamp',
        'level' => 'getLevel',
        'category' => 'getCategory',
        'correlationId' => 'getCorrelationId',
        'eventMessage' => 'getEventMessage',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LEVEL_INFO = 'INFO';
    const LEVEL_WARNING = 'WARNING';
    const LEVEL_ERROR = 'ERROR';
    const CATEGORY_CALLBACK = 'CALLBACK';
    const CATEGORY_CALL_RESTRICTION = 'CALL_RESTRICTION';
    const CATEGORY_CALL_RULE = 'CALL_RULE';
    const CATEGORY_CAMPAIGN = 'CAMPAIGN';
    const CATEGORY_CAMPAIGN_RULE = 'CAMPAIGN_RULE';
    const CATEGORY_CONTACT = 'CONTACT';
    const CATEGORY_CONTACT_LIST_FILTER = 'CONTACT_LIST_FILTER';
    const CATEGORY_DNC_LIST = 'DNC_LIST';
    const CATEGORY_ENTITY_LIMIT = 'ENTITY_LIMIT';
    const CATEGORY_IMPORT_ERROR = 'IMPORT_ERROR';
    const CATEGORY_ORGANIZATION_CONFIGURATION = 'ORGANIZATION_CONFIGURATION';
    const CATEGORY_SCHEDULE = 'SCHEDULE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLevelAllowableValues()
    {
        return [
            self::LEVEL_INFO,
            self::LEVEL_WARNING,
            self::LEVEL_ERROR,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCategoryAllowableValues()
    {
        return [
            self::CATEGORY_CALLBACK,
            self::CATEGORY_CALL_RESTRICTION,
            self::CATEGORY_CALL_RULE,
            self::CATEGORY_CAMPAIGN,
            self::CATEGORY_CAMPAIGN_RULE,
            self::CATEGORY_CONTACT,
            self::CATEGORY_CONTACT_LIST_FILTER,
            self::CATEGORY_DNC_LIST,
            self::CATEGORY_ENTITY_LIMIT,
            self::CATEGORY_IMPORT_ERROR,
            self::CATEGORY_ORGANIZATION_CONFIGURATION,
            self::CATEGORY_SCHEDULE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['errorEntity'] = isset($data['errorEntity']) ? $data['errorEntity'] : null;
        $this->container['relatedEntity'] = isset($data['relatedEntity']) ? $data['relatedEntity'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['correlationId'] = isset($data['correlationId']) ? $data['correlationId'] : null;
        $this->container['eventMessage'] = isset($data['eventMessage']) ? $data['eventMessage'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($this->container['level']) && !in_array($this->container['level'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'level', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($this->container['category']) && !in_array($this->container['category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets errorEntity
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getErrorEntity()
    {
        return $this->container['errorEntity'];
    }

    /**
     * Sets errorEntity
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $errorEntity errorEntity
     *
     * @return $this
     */
    public function setErrorEntity($errorEntity)
    {
        $this->container['errorEntity'] = $errorEntity;

        return $this;
    }

    /**
     * Gets relatedEntity
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getRelatedEntity()
    {
        return $this->container['relatedEntity'];
    }

    /**
     * Sets relatedEntity
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $relatedEntity relatedEntity
     *
     * @return $this
     */
    public function setRelatedEntity($relatedEntity)
    {
        $this->container['relatedEntity'] = $relatedEntity;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level level
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $allowedValues = $this->getLevelAllowableValues();
        if (!is_null($level) && !in_array($level, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'level', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $allowedValues = $this->getCategoryAllowableValues();
        if (!is_null($category) && !in_array($category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets correlationId
     *
     * @return string
     */
    public function getCorrelationId()
    {
        return $this->container['correlationId'];
    }

    /**
     * Sets correlationId
     *
     * @param string $correlationId correlationId
     *
     * @return $this
     */
    public function setCorrelationId($correlationId)
    {
        $this->container['correlationId'] = $correlationId;

        return $this;
    }

    /**
     * Gets eventMessage
     *
     * @return \PureCloudPlatform\Client\V2\Model\EventMessage
     */
    public function getEventMessage()
    {
        return $this->container['eventMessage'];
    }

    /**
     * Sets eventMessage
     *
     * @param \PureCloudPlatform\Client\V2\Model\EventMessage $eventMessage eventMessage
     *
     * @return $this
     */
    public function setEventMessage($eventMessage)
    {
        $this->container['eventMessage'] = $eventMessage;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


