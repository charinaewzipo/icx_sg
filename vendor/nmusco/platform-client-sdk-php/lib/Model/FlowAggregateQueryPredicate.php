<?php
/**
 * FlowAggregateQueryPredicate
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * FlowAggregateQueryPredicate Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FlowAggregateQueryPredicate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FlowAggregateQueryPredicate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'dimension' => 'string',
        'operator' => 'string',
        'value' => 'string',
        'range' => '\PureCloudPlatform\Client\V2\Model\NumericRange'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'dimension' => null,
        'operator' => null,
        'value' => null,
        'range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'dimension' => 'dimension',
        'operator' => 'operator',
        'value' => 'value',
        'range' => 'range'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'dimension' => 'setDimension',
        'operator' => 'setOperator',
        'value' => 'setValue',
        'range' => 'setRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'dimension' => 'getDimension',
        'operator' => 'getOperator',
        'value' => 'getValue',
        'range' => 'getRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_DIMENSION = 'dimension';
    const TYPE_PROPERTY = 'property';
    const TYPE_METRIC = 'metric';
    const DIMENSION_ADDRESS_FROM = 'addressFrom';
    const DIMENSION_ADDRESS_TO = 'addressTo';
    const DIMENSION_AGENT_SCORE = 'agentScore';
    const DIMENSION_ANI = 'ani';
    const DIMENSION_CONVERSATION_ID = 'conversationId';
    const DIMENSION_CONVERTED_FROM = 'convertedFrom';
    const DIMENSION_CONVERTED_TO = 'convertedTo';
    const DIMENSION_DIRECTION = 'direction';
    const DIMENSION_DISCONNECT_TYPE = 'disconnectType';
    const DIMENSION_DIVISION_ID = 'divisionId';
    const DIMENSION_DNIS = 'dnis';
    const DIMENSION_EDGE_ID = 'edgeId';
    const DIMENSION_ENDING_LANGUAGE = 'endingLanguage';
    const DIMENSION_ENTRY_REASON = 'entryReason';
    const DIMENSION_ENTRY_TYPE = 'entryType';
    const DIMENSION_EXIT_REASON = 'exitReason';
    const DIMENSION_EXTERNAL_ORGANIZATION_ID = 'externalOrganizationId';
    const DIMENSION_FLAGGED_REASON = 'flaggedReason';
    const DIMENSION_FLOW_ID = 'flowId';
    const DIMENSION_FLOW_NAME = 'flowName';
    const DIMENSION_FLOW_OUT_TYPE = 'flowOutType';
    const DIMENSION_FLOW_OUTCOME = 'flowOutcome';
    const DIMENSION_FLOW_OUTCOME_ID = 'flowOutcomeId';
    const DIMENSION_FLOW_OUTCOME_VALUE = 'flowOutcomeValue';
    const DIMENSION_FLOW_TYPE = 'flowType';
    const DIMENSION_FLOW_VERSION = 'flowVersion';
    const DIMENSION_GROUP_ID = 'groupId';
    const DIMENSION_INTERACTION_TYPE = 'interactionType';
    const DIMENSION_JOURNEY_ACTION_ID = 'journeyActionId';
    const DIMENSION_JOURNEY_ACTION_MAP_ID = 'journeyActionMapId';
    const DIMENSION_JOURNEY_ACTION_MAP_VERSION = 'journeyActionMapVersion';
    const DIMENSION_JOURNEY_CUSTOMER_ID = 'journeyCustomerId';
    const DIMENSION_JOURNEY_CUSTOMER_ID_TYPE = 'journeyCustomerIdType';
    const DIMENSION_JOURNEY_CUSTOMER_SESSION_ID = 'journeyCustomerSessionId';
    const DIMENSION_JOURNEY_CUSTOMER_SESSION_ID_TYPE = 'journeyCustomerSessionIdType';
    const DIMENSION_MEDIA_TYPE = 'mediaType';
    const DIMENSION_MESSAGE_TYPE = 'messageType';
    const DIMENSION_ORIGINATING_DIRECTION = 'originatingDirection';
    const DIMENSION_OUTBOUND_CAMPAIGN_ID = 'outboundCampaignId';
    const DIMENSION_OUTBOUND_CONTACT_ID = 'outboundContactId';
    const DIMENSION_OUTBOUND_CONTACT_LIST_ID = 'outboundContactListId';
    const DIMENSION_PARTICIPANT_NAME = 'participantName';
    const DIMENSION_PEER_ID = 'peerId';
    const DIMENSION_PROVIDER = 'provider';
    const DIMENSION_PURPOSE = 'purpose';
    const DIMENSION_QUEUE_ID = 'queueId';
    const DIMENSION_REQUESTED_LANGUAGE_ID = 'requestedLanguageId';
    const DIMENSION_REQUESTED_ROUTING_SKILL_ID = 'requestedRoutingSkillId';
    const DIMENSION_ROOM_ID = 'roomId';
    const DIMENSION_ROUTING_PRIORITY = 'routingPriority';
    const DIMENSION_SCORED_AGENT_ID = 'scoredAgentId';
    const DIMENSION_SESSION_DNIS = 'sessionDnis';
    const DIMENSION_SESSION_ID = 'sessionId';
    const DIMENSION_STARTING_LANGUAGE = 'startingLanguage';
    const DIMENSION_STATION_ID = 'stationId';
    const DIMENSION_TRANSFER_TARGET_ADDRESS = 'transferTargetAddress';
    const DIMENSION_TRANSFER_TARGET_NAME = 'transferTargetName';
    const DIMENSION_TRANSFER_TYPE = 'transferType';
    const DIMENSION_USER_ID = 'userId';
    const DIMENSION_WRAP_UP_CODE = 'wrapUpCode';
    const OPERATOR_MATCHES = 'matches';
    const OPERATOR_EXISTS = 'exists';
    const OPERATOR_NOT_EXISTS = 'notExists';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_DIMENSION,
            self::TYPE_PROPERTY,
            self::TYPE_METRIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDimensionAllowableValues()
    {
        return [
            self::DIMENSION_ADDRESS_FROM,
            self::DIMENSION_ADDRESS_TO,
            self::DIMENSION_AGENT_SCORE,
            self::DIMENSION_ANI,
            self::DIMENSION_CONVERSATION_ID,
            self::DIMENSION_CONVERTED_FROM,
            self::DIMENSION_CONVERTED_TO,
            self::DIMENSION_DIRECTION,
            self::DIMENSION_DISCONNECT_TYPE,
            self::DIMENSION_DIVISION_ID,
            self::DIMENSION_DNIS,
            self::DIMENSION_EDGE_ID,
            self::DIMENSION_ENDING_LANGUAGE,
            self::DIMENSION_ENTRY_REASON,
            self::DIMENSION_ENTRY_TYPE,
            self::DIMENSION_EXIT_REASON,
            self::DIMENSION_EXTERNAL_ORGANIZATION_ID,
            self::DIMENSION_FLAGGED_REASON,
            self::DIMENSION_FLOW_ID,
            self::DIMENSION_FLOW_NAME,
            self::DIMENSION_FLOW_OUT_TYPE,
            self::DIMENSION_FLOW_OUTCOME,
            self::DIMENSION_FLOW_OUTCOME_ID,
            self::DIMENSION_FLOW_OUTCOME_VALUE,
            self::DIMENSION_FLOW_TYPE,
            self::DIMENSION_FLOW_VERSION,
            self::DIMENSION_GROUP_ID,
            self::DIMENSION_INTERACTION_TYPE,
            self::DIMENSION_JOURNEY_ACTION_ID,
            self::DIMENSION_JOURNEY_ACTION_MAP_ID,
            self::DIMENSION_JOURNEY_ACTION_MAP_VERSION,
            self::DIMENSION_JOURNEY_CUSTOMER_ID,
            self::DIMENSION_JOURNEY_CUSTOMER_ID_TYPE,
            self::DIMENSION_JOURNEY_CUSTOMER_SESSION_ID,
            self::DIMENSION_JOURNEY_CUSTOMER_SESSION_ID_TYPE,
            self::DIMENSION_MEDIA_TYPE,
            self::DIMENSION_MESSAGE_TYPE,
            self::DIMENSION_ORIGINATING_DIRECTION,
            self::DIMENSION_OUTBOUND_CAMPAIGN_ID,
            self::DIMENSION_OUTBOUND_CONTACT_ID,
            self::DIMENSION_OUTBOUND_CONTACT_LIST_ID,
            self::DIMENSION_PARTICIPANT_NAME,
            self::DIMENSION_PEER_ID,
            self::DIMENSION_PROVIDER,
            self::DIMENSION_PURPOSE,
            self::DIMENSION_QUEUE_ID,
            self::DIMENSION_REQUESTED_LANGUAGE_ID,
            self::DIMENSION_REQUESTED_ROUTING_SKILL_ID,
            self::DIMENSION_ROOM_ID,
            self::DIMENSION_ROUTING_PRIORITY,
            self::DIMENSION_SCORED_AGENT_ID,
            self::DIMENSION_SESSION_DNIS,
            self::DIMENSION_SESSION_ID,
            self::DIMENSION_STARTING_LANGUAGE,
            self::DIMENSION_STATION_ID,
            self::DIMENSION_TRANSFER_TARGET_ADDRESS,
            self::DIMENSION_TRANSFER_TARGET_NAME,
            self::DIMENSION_TRANSFER_TYPE,
            self::DIMENSION_USER_ID,
            self::DIMENSION_WRAP_UP_CODE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_MATCHES,
            self::OPERATOR_EXISTS,
            self::OPERATOR_NOT_EXISTS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['dimension'] = isset($data['dimension']) ? $data['dimension'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['range'] = isset($data['range']) ? $data['range'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDimensionAllowableValues();
        if (!is_null($this->container['dimension']) && !in_array($this->container['dimension'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'dimension', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Optional type, can usually be inferred
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets dimension
     *
     * @return string
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param string $dimension Left hand side for dimension predicates
     *
     * @return $this
     */
    public function setDimension($dimension)
    {
        $allowedValues = $this->getDimensionAllowableValues();
        if (!is_null($dimension) && !in_array($dimension, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'dimension', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dimension'] = $dimension;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator Optional operator, default is matches
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($operator) && !in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string $value Right hand side for dimension predicates
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets range
     *
     * @return \PureCloudPlatform\Client\V2\Model\NumericRange
     */
    public function getRange()
    {
        return $this->container['range'];
    }

    /**
     * Sets range
     *
     * @param \PureCloudPlatform\Client\V2\Model\NumericRange $range Right hand side for dimension predicates
     *
     * @return $this
     */
    public function setRange($range)
    {
        $this->container['range'] = $range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


