<?php
/**
 * CampaignInteractions
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CampaignInteractions Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignInteractions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignInteractions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'campaign' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'pendingInteractions' => '\PureCloudPlatform\Client\V2\Model\CampaignInteraction[]',
        'proceedingInteractions' => '\PureCloudPlatform\Client\V2\Model\CampaignInteraction[]',
        'previewingInteractions' => '\PureCloudPlatform\Client\V2\Model\CampaignInteraction[]',
        'interactingInteractions' => '\PureCloudPlatform\Client\V2\Model\CampaignInteraction[]',
        'scheduledInteractions' => '\PureCloudPlatform\Client\V2\Model\CampaignInteraction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'campaign' => null,
        'pendingInteractions' => null,
        'proceedingInteractions' => null,
        'previewingInteractions' => null,
        'interactingInteractions' => null,
        'scheduledInteractions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign' => 'campaign',
        'pendingInteractions' => 'pendingInteractions',
        'proceedingInteractions' => 'proceedingInteractions',
        'previewingInteractions' => 'previewingInteractions',
        'interactingInteractions' => 'interactingInteractions',
        'scheduledInteractions' => 'scheduledInteractions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign' => 'setCampaign',
        'pendingInteractions' => 'setPendingInteractions',
        'proceedingInteractions' => 'setProceedingInteractions',
        'previewingInteractions' => 'setPreviewingInteractions',
        'interactingInteractions' => 'setInteractingInteractions',
        'scheduledInteractions' => 'setScheduledInteractions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign' => 'getCampaign',
        'pendingInteractions' => 'getPendingInteractions',
        'proceedingInteractions' => 'getProceedingInteractions',
        'previewingInteractions' => 'getPreviewingInteractions',
        'interactingInteractions' => 'getInteractingInteractions',
        'scheduledInteractions' => 'getScheduledInteractions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign'] = isset($data['campaign']) ? $data['campaign'] : null;
        $this->container['pendingInteractions'] = isset($data['pendingInteractions']) ? $data['pendingInteractions'] : null;
        $this->container['proceedingInteractions'] = isset($data['proceedingInteractions']) ? $data['proceedingInteractions'] : null;
        $this->container['previewingInteractions'] = isset($data['previewingInteractions']) ? $data['previewingInteractions'] : null;
        $this->container['interactingInteractions'] = isset($data['interactingInteractions']) ? $data['interactingInteractions'] : null;
        $this->container['scheduledInteractions'] = isset($data['scheduledInteractions']) ? $data['scheduledInteractions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets campaign
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $campaign campaign
     *
     * @return $this
     */
    public function setCampaign($campaign)
    {
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets pendingInteractions
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignInteraction[]
     */
    public function getPendingInteractions()
    {
        return $this->container['pendingInteractions'];
    }

    /**
     * Sets pendingInteractions
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignInteraction[] $pendingInteractions pendingInteractions
     *
     * @return $this
     */
    public function setPendingInteractions($pendingInteractions)
    {
        $this->container['pendingInteractions'] = $pendingInteractions;

        return $this;
    }

    /**
     * Gets proceedingInteractions
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignInteraction[]
     */
    public function getProceedingInteractions()
    {
        return $this->container['proceedingInteractions'];
    }

    /**
     * Sets proceedingInteractions
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignInteraction[] $proceedingInteractions proceedingInteractions
     *
     * @return $this
     */
    public function setProceedingInteractions($proceedingInteractions)
    {
        $this->container['proceedingInteractions'] = $proceedingInteractions;

        return $this;
    }

    /**
     * Gets previewingInteractions
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignInteraction[]
     */
    public function getPreviewingInteractions()
    {
        return $this->container['previewingInteractions'];
    }

    /**
     * Sets previewingInteractions
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignInteraction[] $previewingInteractions previewingInteractions
     *
     * @return $this
     */
    public function setPreviewingInteractions($previewingInteractions)
    {
        $this->container['previewingInteractions'] = $previewingInteractions;

        return $this;
    }

    /**
     * Gets interactingInteractions
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignInteraction[]
     */
    public function getInteractingInteractions()
    {
        return $this->container['interactingInteractions'];
    }

    /**
     * Sets interactingInteractions
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignInteraction[] $interactingInteractions interactingInteractions
     *
     * @return $this
     */
    public function setInteractingInteractions($interactingInteractions)
    {
        $this->container['interactingInteractions'] = $interactingInteractions;

        return $this;
    }

    /**
     * Gets scheduledInteractions
     *
     * @return \PureCloudPlatform\Client\V2\Model\CampaignInteraction[]
     */
    public function getScheduledInteractions()
    {
        return $this->container['scheduledInteractions'];
    }

    /**
     * Sets scheduledInteractions
     *
     * @param \PureCloudPlatform\Client\V2\Model\CampaignInteraction[] $scheduledInteractions scheduledInteractions
     *
     * @return $this
     */
    public function setScheduledInteractions($scheduledInteractions)
    {
        $this->container['scheduledInteractions'] = $scheduledInteractions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


