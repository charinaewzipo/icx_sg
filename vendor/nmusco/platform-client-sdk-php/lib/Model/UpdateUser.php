<?php
/**
 * UpdateUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * UpdateUser Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'chat' => '\PureCloudPlatform\Client\V2\Model\Chat',
        'department' => 'string',
        'email' => 'string',
        'primaryContactInfo' => '\PureCloudPlatform\Client\V2\Model\Contact[]',
        'addresses' => '\PureCloudPlatform\Client\V2\Model\Contact[]',
        'title' => 'string',
        'username' => 'string',
        'manager' => 'string',
        'images' => '\PureCloudPlatform\Client\V2\Model\UserImage[]',
        'version' => 'int',
        'profileSkills' => 'string[]',
        'locations' => '\PureCloudPlatform\Client\V2\Model\Location[]',
        'groups' => '\PureCloudPlatform\Client\V2\Model\Group[]',
        'state' => 'string',
        'acdAutoAnswer' => 'bool',
        'certifications' => 'string[]',
        'biography' => '\PureCloudPlatform\Client\V2\Model\Biography',
        'employerInfo' => '\PureCloudPlatform\Client\V2\Model\EmployerInfo',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'chat' => null,
        'department' => null,
        'email' => null,
        'primaryContactInfo' => null,
        'addresses' => null,
        'title' => null,
        'username' => null,
        'manager' => null,
        'images' => null,
        'version' => 'int32',
        'profileSkills' => null,
        'locations' => null,
        'groups' => null,
        'state' => null,
        'acdAutoAnswer' => null,
        'certifications' => null,
        'biography' => null,
        'employerInfo' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'chat' => 'chat',
        'department' => 'department',
        'email' => 'email',
        'primaryContactInfo' => 'primaryContactInfo',
        'addresses' => 'addresses',
        'title' => 'title',
        'username' => 'username',
        'manager' => 'manager',
        'images' => 'images',
        'version' => 'version',
        'profileSkills' => 'profileSkills',
        'locations' => 'locations',
        'groups' => 'groups',
        'state' => 'state',
        'acdAutoAnswer' => 'acdAutoAnswer',
        'certifications' => 'certifications',
        'biography' => 'biography',
        'employerInfo' => 'employerInfo',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'chat' => 'setChat',
        'department' => 'setDepartment',
        'email' => 'setEmail',
        'primaryContactInfo' => 'setPrimaryContactInfo',
        'addresses' => 'setAddresses',
        'title' => 'setTitle',
        'username' => 'setUsername',
        'manager' => 'setManager',
        'images' => 'setImages',
        'version' => 'setVersion',
        'profileSkills' => 'setProfileSkills',
        'locations' => 'setLocations',
        'groups' => 'setGroups',
        'state' => 'setState',
        'acdAutoAnswer' => 'setAcdAutoAnswer',
        'certifications' => 'setCertifications',
        'biography' => 'setBiography',
        'employerInfo' => 'setEmployerInfo',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'chat' => 'getChat',
        'department' => 'getDepartment',
        'email' => 'getEmail',
        'primaryContactInfo' => 'getPrimaryContactInfo',
        'addresses' => 'getAddresses',
        'title' => 'getTitle',
        'username' => 'getUsername',
        'manager' => 'getManager',
        'images' => 'getImages',
        'version' => 'getVersion',
        'profileSkills' => 'getProfileSkills',
        'locations' => 'getLocations',
        'groups' => 'getGroups',
        'state' => 'getState',
        'acdAutoAnswer' => 'getAcdAutoAnswer',
        'certifications' => 'getCertifications',
        'biography' => 'getBiography',
        'employerInfo' => 'getEmployerInfo',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACTIVE = 'active';
    const STATE_INACTIVE = 'inactive';
    const STATE_DELETED = 'deleted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACTIVE,
            self::STATE_INACTIVE,
            self::STATE_DELETED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['chat'] = isset($data['chat']) ? $data['chat'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['primaryContactInfo'] = isset($data['primaryContactInfo']) ? $data['primaryContactInfo'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['manager'] = isset($data['manager']) ? $data['manager'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['profileSkills'] = isset($data['profileSkills']) ? $data['profileSkills'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['acdAutoAnswer'] = isset($data['acdAutoAnswer']) ? $data['acdAutoAnswer'] : null;
        $this->container['certifications'] = isset($data['certifications']) ? $data['certifications'] : null;
        $this->container['biography'] = isset($data['biography']) ? $data['biography'] : null;
        $this->container['employerInfo'] = isset($data['employerInfo']) ? $data['employerInfo'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets chat
     *
     * @return \PureCloudPlatform\Client\V2\Model\Chat
     */
    public function getChat()
    {
        return $this->container['chat'];
    }

    /**
     * Sets chat
     *
     * @param \PureCloudPlatform\Client\V2\Model\Chat $chat chat
     *
     * @return $this
     */
    public function setChat($chat)
    {
        $this->container['chat'] = $chat;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets primaryContactInfo
     *
     * @return \PureCloudPlatform\Client\V2\Model\Contact[]
     */
    public function getPrimaryContactInfo()
    {
        return $this->container['primaryContactInfo'];
    }

    /**
     * Sets primaryContactInfo
     *
     * @param \PureCloudPlatform\Client\V2\Model\Contact[] $primaryContactInfo The address(s) used for primary contact. Updates to the corresponding address in the addresses list will be reflected here.
     *
     * @return $this
     */
    public function setPrimaryContactInfo($primaryContactInfo)
    {
        $this->container['primaryContactInfo'] = $primaryContactInfo;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \PureCloudPlatform\Client\V2\Model\Contact[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \PureCloudPlatform\Client\V2\Model\Contact[] $addresses Email address, phone number, and/or extension for this user. One entry is allowed per media type
     *
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets manager
     *
     * @return string
     */
    public function getManager()
    {
        return $this->container['manager'];
    }

    /**
     * Sets manager
     *
     * @param string $manager manager
     *
     * @return $this
     */
    public function setManager($manager)
    {
        $this->container['manager'] = $manager;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserImage[]
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserImage[] $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int $version This value should be the current version of the user. The current version can be obtained with a GET on the user before doing a PATCH.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets profileSkills
     *
     * @return string[]
     */
    public function getProfileSkills()
    {
        return $this->container['profileSkills'];
    }

    /**
     * Sets profileSkills
     *
     * @param string[] $profileSkills Profile skills possessed by the user
     *
     * @return $this
     */
    public function setProfileSkills($profileSkills)
    {
        $this->container['profileSkills'] = $profileSkills;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \PureCloudPlatform\Client\V2\Model\Location[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \PureCloudPlatform\Client\V2\Model\Location[] $locations The user placement at each site location.
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \PureCloudPlatform\Client\V2\Model\Group[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \PureCloudPlatform\Client\V2\Model\Group[] $groups The groups the user is a member of
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of the user. This property can be used to restore a deleted user or transition between active and inactive. If specified, it is the only modifiable field.
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets acdAutoAnswer
     *
     * @return bool
     */
    public function getAcdAutoAnswer()
    {
        return $this->container['acdAutoAnswer'];
    }

    /**
     * Sets acdAutoAnswer
     *
     * @param bool $acdAutoAnswer The value that denotes if acdAutoAnswer is set on the user
     *
     * @return $this
     */
    public function setAcdAutoAnswer($acdAutoAnswer)
    {
        $this->container['acdAutoAnswer'] = $acdAutoAnswer;

        return $this;
    }

    /**
     * Gets certifications
     *
     * @return string[]
     */
    public function getCertifications()
    {
        return $this->container['certifications'];
    }

    /**
     * Sets certifications
     *
     * @param string[] $certifications certifications
     *
     * @return $this
     */
    public function setCertifications($certifications)
    {
        $this->container['certifications'] = $certifications;

        return $this;
    }

    /**
     * Gets biography
     *
     * @return \PureCloudPlatform\Client\V2\Model\Biography
     */
    public function getBiography()
    {
        return $this->container['biography'];
    }

    /**
     * Sets biography
     *
     * @param \PureCloudPlatform\Client\V2\Model\Biography $biography biography
     *
     * @return $this
     */
    public function setBiography($biography)
    {
        $this->container['biography'] = $biography;

        return $this;
    }

    /**
     * Gets employerInfo
     *
     * @return \PureCloudPlatform\Client\V2\Model\EmployerInfo
     */
    public function getEmployerInfo()
    {
        return $this->container['employerInfo'];
    }

    /**
     * Sets employerInfo
     *
     * @param \PureCloudPlatform\Client\V2\Model\EmployerInfo $employerInfo employerInfo
     *
     * @return $this
     */
    public function setEmployerInfo($employerInfo)
    {
        $this->container['employerInfo'] = $employerInfo;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


