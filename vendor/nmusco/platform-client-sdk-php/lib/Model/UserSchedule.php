<?php
/**
 * UserSchedule
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * UserSchedule Class Doc Comment
 *
 * @category Class
 * @description A schedule for a single user over a given time range
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserSchedule implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserSchedule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shifts' => '\PureCloudPlatform\Client\V2\Model\UserScheduleShift[]',
        'fullDayTimeOffMarkers' => '\PureCloudPlatform\Client\V2\Model\UserScheduleFullDayTimeOffMarker[]',
        'delete' => 'bool',
        'metadata' => '\PureCloudPlatform\Client\V2\Model\WfmVersionedEntityMetadata',
        'workPlanId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shifts' => null,
        'fullDayTimeOffMarkers' => null,
        'delete' => null,
        'metadata' => null,
        'workPlanId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shifts' => 'shifts',
        'fullDayTimeOffMarkers' => 'fullDayTimeOffMarkers',
        'delete' => 'delete',
        'metadata' => 'metadata',
        'workPlanId' => 'workPlanId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shifts' => 'setShifts',
        'fullDayTimeOffMarkers' => 'setFullDayTimeOffMarkers',
        'delete' => 'setDelete',
        'metadata' => 'setMetadata',
        'workPlanId' => 'setWorkPlanId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shifts' => 'getShifts',
        'fullDayTimeOffMarkers' => 'getFullDayTimeOffMarkers',
        'delete' => 'getDelete',
        'metadata' => 'getMetadata',
        'workPlanId' => 'getWorkPlanId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shifts'] = isset($data['shifts']) ? $data['shifts'] : null;
        $this->container['fullDayTimeOffMarkers'] = isset($data['fullDayTimeOffMarkers']) ? $data['fullDayTimeOffMarkers'] : null;
        $this->container['delete'] = isset($data['delete']) ? $data['delete'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['workPlanId'] = isset($data['workPlanId']) ? $data['workPlanId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['metadata'] === null) {
            $invalidProperties[] = "'metadata' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shifts
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserScheduleShift[]
     */
    public function getShifts()
    {
        return $this->container['shifts'];
    }

    /**
     * Sets shifts
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserScheduleShift[] $shifts The shifts that belong to this schedule
     *
     * @return $this
     */
    public function setShifts($shifts)
    {
        $this->container['shifts'] = $shifts;

        return $this;
    }

    /**
     * Gets fullDayTimeOffMarkers
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserScheduleFullDayTimeOffMarker[]
     */
    public function getFullDayTimeOffMarkers()
    {
        return $this->container['fullDayTimeOffMarkers'];
    }

    /**
     * Sets fullDayTimeOffMarkers
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserScheduleFullDayTimeOffMarker[] $fullDayTimeOffMarkers Markers to indicate a full day time off request, relative to the management unit time zone
     *
     * @return $this
     */
    public function setFullDayTimeOffMarkers($fullDayTimeOffMarkers)
    {
        $this->container['fullDayTimeOffMarkers'] = $fullDayTimeOffMarkers;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool $delete If marked true for updating an existing user schedule, it will be deleted
     *
     * @return $this
     */
    public function setDelete($delete)
    {
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \PureCloudPlatform\Client\V2\Model\WfmVersionedEntityMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \PureCloudPlatform\Client\V2\Model\WfmVersionedEntityMetadata $metadata Version metadata for this schedule
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets workPlanId
     *
     * @return string
     */
    public function getWorkPlanId()
    {
        return $this->container['workPlanId'];
    }

    /**
     * Sets workPlanId
     *
     * @param string $workPlanId ID of the work plan associated with the user during schedule creation
     *
     * @return $this
     */
    public function setWorkPlanId($workPlanId)
    {
        $this->container['workPlanId'] = $workPlanId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


