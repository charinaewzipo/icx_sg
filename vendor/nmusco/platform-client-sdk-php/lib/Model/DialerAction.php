<?php
/**
 * DialerAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * DialerAction Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DialerAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DialerAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'actionTypeName' => 'string',
        'updateOption' => 'string',
        'properties' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'actionTypeName' => null,
        'updateOption' => null,
        'properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'actionTypeName' => 'actionTypeName',
        'updateOption' => 'updateOption',
        'properties' => 'properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'actionTypeName' => 'setActionTypeName',
        'updateOption' => 'setUpdateOption',
        'properties' => 'setProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'actionTypeName' => 'getActionTypeName',
        'updateOption' => 'getUpdateOption',
        'properties' => 'getProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ACTION = 'Action';
    const TYPE_MODIFY_CONTACT_ATTRIBUTE = 'modifyContactAttribute';
    const ACTION_TYPE_NAME_DO_NOT_DIAL = 'DO_NOT_DIAL';
    const ACTION_TYPE_NAME_MODIFY_CONTACT_ATTRIBUTE = 'MODIFY_CONTACT_ATTRIBUTE';
    const ACTION_TYPE_NAME_SWITCH_TO_PREVIEW = 'SWITCH_TO_PREVIEW';
    const ACTION_TYPE_NAME_APPEND_NUMBER_TO_DNC_LIST = 'APPEND_NUMBER_TO_DNC_LIST';
    const ACTION_TYPE_NAME_SCHEDULE_CALLBACK = 'SCHEDULE_CALLBACK';
    const ACTION_TYPE_NAME_CONTACT_UNCALLABLE = 'CONTACT_UNCALLABLE';
    const ACTION_TYPE_NAME_NUMBER_UNCALLABLE = 'NUMBER_UNCALLABLE';
    const ACTION_TYPE_NAME_SET_CALLER_ID = 'SET_CALLER_ID';
    const ACTION_TYPE_NAME_SET_SKILLS = 'SET_SKILLS';
    const UPDATE_OPTION_SET = 'SET';
    const UPDATE_OPTION_INCREMENT = 'INCREMENT';
    const UPDATE_OPTION_DECREMENT = 'DECREMENT';
    const UPDATE_OPTION_CURRENT_TIME = 'CURRENT_TIME';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ACTION,
            self::TYPE_MODIFY_CONTACT_ATTRIBUTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionTypeNameAllowableValues()
    {
        return [
            self::ACTION_TYPE_NAME_DO_NOT_DIAL,
            self::ACTION_TYPE_NAME_MODIFY_CONTACT_ATTRIBUTE,
            self::ACTION_TYPE_NAME_SWITCH_TO_PREVIEW,
            self::ACTION_TYPE_NAME_APPEND_NUMBER_TO_DNC_LIST,
            self::ACTION_TYPE_NAME_SCHEDULE_CALLBACK,
            self::ACTION_TYPE_NAME_CONTACT_UNCALLABLE,
            self::ACTION_TYPE_NAME_NUMBER_UNCALLABLE,
            self::ACTION_TYPE_NAME_SET_CALLER_ID,
            self::ACTION_TYPE_NAME_SET_SKILLS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdateOptionAllowableValues()
    {
        return [
            self::UPDATE_OPTION_SET,
            self::UPDATE_OPTION_INCREMENT,
            self::UPDATE_OPTION_DECREMENT,
            self::UPDATE_OPTION_CURRENT_TIME,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['actionTypeName'] = isset($data['actionTypeName']) ? $data['actionTypeName'] : null;
        $this->container['updateOption'] = isset($data['updateOption']) ? $data['updateOption'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['actionTypeName'] === null) {
            $invalidProperties[] = "'actionTypeName' can't be null";
        }
        $allowedValues = $this->getActionTypeNameAllowableValues();
        if (!is_null($this->container['actionTypeName']) && !in_array($this->container['actionTypeName'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'actionTypeName', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdateOptionAllowableValues();
        if (!is_null($this->container['updateOption']) && !in_array($this->container['updateOption'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'updateOption', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of this DialerAction.
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets actionTypeName
     *
     * @return string
     */
    public function getActionTypeName()
    {
        return $this->container['actionTypeName'];
    }

    /**
     * Sets actionTypeName
     *
     * @param string $actionTypeName Additional type specification for this DialerAction.
     *
     * @return $this
     */
    public function setActionTypeName($actionTypeName)
    {
        $allowedValues = $this->getActionTypeNameAllowableValues();
        if (!in_array($actionTypeName, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actionTypeName', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actionTypeName'] = $actionTypeName;

        return $this;
    }

    /**
     * Gets updateOption
     *
     * @return string
     */
    public function getUpdateOption()
    {
        return $this->container['updateOption'];
    }

    /**
     * Sets updateOption
     *
     * @param string $updateOption Specifies how a contact attribute should be updated. Required for MODIFY_CONTACT_ATTRIBUTE.
     *
     * @return $this
     */
    public function setUpdateOption($updateOption)
    {
        $allowedValues = $this->getUpdateOptionAllowableValues();
        if (!is_null($updateOption) && !in_array($updateOption, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'updateOption', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['updateOption'] = $updateOption;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return map[string,string]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param map[string,string] $properties A map of key-value pairs pertinent to the DialerAction. Different types of DialerActions require different properties. MODIFY_CONTACT_ATTRIBUTE with an updateOption of SET takes a contact column as the key and accepts any value. SCHEDULE_CALLBACK takes a key 'callbackOffset' that specifies how far in the future the callback should be scheduled, in minutes. SET_CALLER_ID takes two keys: 'callerAddress', which should be the caller id phone number, and 'callerName'. For either key, you can also specify a column on the contact to get the value from. To do this, specify 'contact.Column', where 'Column' is the name of the contact column from which to get the value. SET_SKILLS takes a key 'skills' with an array of skill ids wrapped into a string (Example: {'skills': '['skillIdHere']'} ).
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


