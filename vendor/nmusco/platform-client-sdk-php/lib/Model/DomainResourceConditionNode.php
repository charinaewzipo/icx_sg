<?php
/**
 * DomainResourceConditionNode
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * DomainResourceConditionNode Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainResourceConditionNode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainResourceConditionNode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'variableName' => 'string',
        'operator' => 'string',
        'operands' => '\PureCloudPlatform\Client\V2\Model\DomainResourceConditionValue[]',
        'conjunction' => 'string',
        'terms' => '\PureCloudPlatform\Client\V2\Model\DomainResourceConditionNode[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'variableName' => null,
        'operator' => null,
        'operands' => null,
        'conjunction' => null,
        'terms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'variableName' => 'variableName',
        'operator' => 'operator',
        'operands' => 'operands',
        'conjunction' => 'conjunction',
        'terms' => 'terms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'variableName' => 'setVariableName',
        'operator' => 'setOperator',
        'operands' => 'setOperands',
        'conjunction' => 'setConjunction',
        'terms' => 'setTerms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'variableName' => 'getVariableName',
        'operator' => 'getOperator',
        'operands' => 'getOperands',
        'conjunction' => 'getConjunction',
        'terms' => 'getTerms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const OPERATOR_EQ = 'EQ';
    const OPERATOR_IN = 'IN';
    const OPERATOR_GE = 'GE';
    const OPERATOR_GT = 'GT';
    const OPERATOR_LE = 'LE';
    const OPERATOR_LT = 'LT';
    const CONJUNCTION__AND = 'AND';
    const CONJUNCTION__OR = 'OR';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOperatorAllowableValues()
    {
        return [
            self::OPERATOR_EQ,
            self::OPERATOR_IN,
            self::OPERATOR_GE,
            self::OPERATOR_GT,
            self::OPERATOR_LE,
            self::OPERATOR_LT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConjunctionAllowableValues()
    {
        return [
            self::CONJUNCTION__AND,
            self::CONJUNCTION__OR,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['variableName'] = isset($data['variableName']) ? $data['variableName'] : null;
        $this->container['operator'] = isset($data['operator']) ? $data['operator'] : null;
        $this->container['operands'] = isset($data['operands']) ? $data['operands'] : null;
        $this->container['conjunction'] = isset($data['conjunction']) ? $data['conjunction'] : null;
        $this->container['terms'] = isset($data['terms']) ? $data['terms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($this->container['operator']) && !in_array($this->container['operator'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'operator', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getConjunctionAllowableValues();
        if (!is_null($this->container['conjunction']) && !in_array($this->container['conjunction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'conjunction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets variableName
     *
     * @return string
     */
    public function getVariableName()
    {
        return $this->container['variableName'];
    }

    /**
     * Sets variableName
     *
     * @param string $variableName variableName
     *
     * @return $this
     */
    public function setVariableName($variableName)
    {
        $this->container['variableName'] = $variableName;

        return $this;
    }

    /**
     * Gets operator
     *
     * @return string
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string $operator operator
     *
     * @return $this
     */
    public function setOperator($operator)
    {
        $allowedValues = $this->getOperatorAllowableValues();
        if (!is_null($operator) && !in_array($operator, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'operator', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets operands
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainResourceConditionValue[]
     */
    public function getOperands()
    {
        return $this->container['operands'];
    }

    /**
     * Sets operands
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainResourceConditionValue[] $operands operands
     *
     * @return $this
     */
    public function setOperands($operands)
    {
        $this->container['operands'] = $operands;

        return $this;
    }

    /**
     * Gets conjunction
     *
     * @return string
     */
    public function getConjunction()
    {
        return $this->container['conjunction'];
    }

    /**
     * Sets conjunction
     *
     * @param string $conjunction conjunction
     *
     * @return $this
     */
    public function setConjunction($conjunction)
    {
        $allowedValues = $this->getConjunctionAllowableValues();
        if (!is_null($conjunction) && !in_array($conjunction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'conjunction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['conjunction'] = $conjunction;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainResourceConditionNode[]
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainResourceConditionNode[] $terms terms
     *
     * @return $this
     */
    public function setTerms($terms)
    {
        $this->container['terms'] = $terms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


