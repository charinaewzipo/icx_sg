<?php
/**
 * CreateWorkPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CreateWorkPlan Class Doc Comment
 *
 * @category Class
 * @description Work plan information
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateWorkPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateWorkPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'enabled' => 'bool',
        'constrainWeeklyPaidTime' => 'bool',
        'flexibleWeeklyPaidTime' => 'bool',
        'weeklyExactPaidMinutes' => 'int',
        'weeklyMinimumPaidMinutes' => 'int',
        'weeklyMaximumPaidMinutes' => 'int',
        'constrainPaidTimeGranularity' => 'bool',
        'paidTimeGranularityMinutes' => 'int',
        'constrainMinimumTimeBetweenShifts' => 'bool',
        'minimumTimeBetweenShiftsMinutes' => 'int',
        'maximumDays' => 'int',
        'startDayOfWeekend' => 'string',
        'minimumConsecutiveTimeOffPerWeekMinutes' => 'int',
        'constrainMaximumConsecutiveWorkingWeekends' => 'bool',
        'maximumConsecutiveWorkingWeekends' => 'int',
        'minimumWorkingDaysPerWeek' => 'int',
        'maximumConsecutiveWorkingDays' => 'int',
        'minimumShiftStartDistanceMinutes' => 'int',
        'minimumDaysOffPerPlanningPeriod' => 'int',
        'maximumDaysOffPerPlanningPeriod' => 'int',
        'minimumPaidHoursPerPlanningPeriod' => 'int',
        'maximumPaidHoursPerPlanningPeriod' => 'int',
        'optionalDays' => '\PureCloudPlatform\Client\V2\Model\SetWrapperDayOfWeek',
        'shiftStartVariances' => '\PureCloudPlatform\Client\V2\Model\ListWrapperShiftStartVariance',
        'shifts' => '\PureCloudPlatform\Client\V2\Model\CreateWorkPlanShift[]',
        'agents' => '\PureCloudPlatform\Client\V2\Model\UserReference[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'enabled' => null,
        'constrainWeeklyPaidTime' => null,
        'flexibleWeeklyPaidTime' => null,
        'weeklyExactPaidMinutes' => 'int32',
        'weeklyMinimumPaidMinutes' => 'int32',
        'weeklyMaximumPaidMinutes' => 'int32',
        'constrainPaidTimeGranularity' => null,
        'paidTimeGranularityMinutes' => 'int32',
        'constrainMinimumTimeBetweenShifts' => null,
        'minimumTimeBetweenShiftsMinutes' => 'int32',
        'maximumDays' => 'int32',
        'startDayOfWeekend' => null,
        'minimumConsecutiveTimeOffPerWeekMinutes' => 'int32',
        'constrainMaximumConsecutiveWorkingWeekends' => null,
        'maximumConsecutiveWorkingWeekends' => 'int32',
        'minimumWorkingDaysPerWeek' => 'int32',
        'maximumConsecutiveWorkingDays' => 'int32',
        'minimumShiftStartDistanceMinutes' => 'int32',
        'minimumDaysOffPerPlanningPeriod' => 'int32',
        'maximumDaysOffPerPlanningPeriod' => 'int32',
        'minimumPaidHoursPerPlanningPeriod' => 'int32',
        'maximumPaidHoursPerPlanningPeriod' => 'int32',
        'optionalDays' => null,
        'shiftStartVariances' => null,
        'shifts' => null,
        'agents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'enabled' => 'enabled',
        'constrainWeeklyPaidTime' => 'constrainWeeklyPaidTime',
        'flexibleWeeklyPaidTime' => 'flexibleWeeklyPaidTime',
        'weeklyExactPaidMinutes' => 'weeklyExactPaidMinutes',
        'weeklyMinimumPaidMinutes' => 'weeklyMinimumPaidMinutes',
        'weeklyMaximumPaidMinutes' => 'weeklyMaximumPaidMinutes',
        'constrainPaidTimeGranularity' => 'constrainPaidTimeGranularity',
        'paidTimeGranularityMinutes' => 'paidTimeGranularityMinutes',
        'constrainMinimumTimeBetweenShifts' => 'constrainMinimumTimeBetweenShifts',
        'minimumTimeBetweenShiftsMinutes' => 'minimumTimeBetweenShiftsMinutes',
        'maximumDays' => 'maximumDays',
        'startDayOfWeekend' => 'startDayOfWeekend',
        'minimumConsecutiveTimeOffPerWeekMinutes' => 'minimumConsecutiveTimeOffPerWeekMinutes',
        'constrainMaximumConsecutiveWorkingWeekends' => 'constrainMaximumConsecutiveWorkingWeekends',
        'maximumConsecutiveWorkingWeekends' => 'maximumConsecutiveWorkingWeekends',
        'minimumWorkingDaysPerWeek' => 'minimumWorkingDaysPerWeek',
        'maximumConsecutiveWorkingDays' => 'maximumConsecutiveWorkingDays',
        'minimumShiftStartDistanceMinutes' => 'minimumShiftStartDistanceMinutes',
        'minimumDaysOffPerPlanningPeriod' => 'minimumDaysOffPerPlanningPeriod',
        'maximumDaysOffPerPlanningPeriod' => 'maximumDaysOffPerPlanningPeriod',
        'minimumPaidHoursPerPlanningPeriod' => 'minimumPaidHoursPerPlanningPeriod',
        'maximumPaidHoursPerPlanningPeriod' => 'maximumPaidHoursPerPlanningPeriod',
        'optionalDays' => 'optionalDays',
        'shiftStartVariances' => 'shiftStartVariances',
        'shifts' => 'shifts',
        'agents' => 'agents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'enabled' => 'setEnabled',
        'constrainWeeklyPaidTime' => 'setConstrainWeeklyPaidTime',
        'flexibleWeeklyPaidTime' => 'setFlexibleWeeklyPaidTime',
        'weeklyExactPaidMinutes' => 'setWeeklyExactPaidMinutes',
        'weeklyMinimumPaidMinutes' => 'setWeeklyMinimumPaidMinutes',
        'weeklyMaximumPaidMinutes' => 'setWeeklyMaximumPaidMinutes',
        'constrainPaidTimeGranularity' => 'setConstrainPaidTimeGranularity',
        'paidTimeGranularityMinutes' => 'setPaidTimeGranularityMinutes',
        'constrainMinimumTimeBetweenShifts' => 'setConstrainMinimumTimeBetweenShifts',
        'minimumTimeBetweenShiftsMinutes' => 'setMinimumTimeBetweenShiftsMinutes',
        'maximumDays' => 'setMaximumDays',
        'startDayOfWeekend' => 'setStartDayOfWeekend',
        'minimumConsecutiveTimeOffPerWeekMinutes' => 'setMinimumConsecutiveTimeOffPerWeekMinutes',
        'constrainMaximumConsecutiveWorkingWeekends' => 'setConstrainMaximumConsecutiveWorkingWeekends',
        'maximumConsecutiveWorkingWeekends' => 'setMaximumConsecutiveWorkingWeekends',
        'minimumWorkingDaysPerWeek' => 'setMinimumWorkingDaysPerWeek',
        'maximumConsecutiveWorkingDays' => 'setMaximumConsecutiveWorkingDays',
        'minimumShiftStartDistanceMinutes' => 'setMinimumShiftStartDistanceMinutes',
        'minimumDaysOffPerPlanningPeriod' => 'setMinimumDaysOffPerPlanningPeriod',
        'maximumDaysOffPerPlanningPeriod' => 'setMaximumDaysOffPerPlanningPeriod',
        'minimumPaidHoursPerPlanningPeriod' => 'setMinimumPaidHoursPerPlanningPeriod',
        'maximumPaidHoursPerPlanningPeriod' => 'setMaximumPaidHoursPerPlanningPeriod',
        'optionalDays' => 'setOptionalDays',
        'shiftStartVariances' => 'setShiftStartVariances',
        'shifts' => 'setShifts',
        'agents' => 'setAgents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'enabled' => 'getEnabled',
        'constrainWeeklyPaidTime' => 'getConstrainWeeklyPaidTime',
        'flexibleWeeklyPaidTime' => 'getFlexibleWeeklyPaidTime',
        'weeklyExactPaidMinutes' => 'getWeeklyExactPaidMinutes',
        'weeklyMinimumPaidMinutes' => 'getWeeklyMinimumPaidMinutes',
        'weeklyMaximumPaidMinutes' => 'getWeeklyMaximumPaidMinutes',
        'constrainPaidTimeGranularity' => 'getConstrainPaidTimeGranularity',
        'paidTimeGranularityMinutes' => 'getPaidTimeGranularityMinutes',
        'constrainMinimumTimeBetweenShifts' => 'getConstrainMinimumTimeBetweenShifts',
        'minimumTimeBetweenShiftsMinutes' => 'getMinimumTimeBetweenShiftsMinutes',
        'maximumDays' => 'getMaximumDays',
        'startDayOfWeekend' => 'getStartDayOfWeekend',
        'minimumConsecutiveTimeOffPerWeekMinutes' => 'getMinimumConsecutiveTimeOffPerWeekMinutes',
        'constrainMaximumConsecutiveWorkingWeekends' => 'getConstrainMaximumConsecutiveWorkingWeekends',
        'maximumConsecutiveWorkingWeekends' => 'getMaximumConsecutiveWorkingWeekends',
        'minimumWorkingDaysPerWeek' => 'getMinimumWorkingDaysPerWeek',
        'maximumConsecutiveWorkingDays' => 'getMaximumConsecutiveWorkingDays',
        'minimumShiftStartDistanceMinutes' => 'getMinimumShiftStartDistanceMinutes',
        'minimumDaysOffPerPlanningPeriod' => 'getMinimumDaysOffPerPlanningPeriod',
        'maximumDaysOffPerPlanningPeriod' => 'getMaximumDaysOffPerPlanningPeriod',
        'minimumPaidHoursPerPlanningPeriod' => 'getMinimumPaidHoursPerPlanningPeriod',
        'maximumPaidHoursPerPlanningPeriod' => 'getMaximumPaidHoursPerPlanningPeriod',
        'optionalDays' => 'getOptionalDays',
        'shiftStartVariances' => 'getShiftStartVariances',
        'shifts' => 'getShifts',
        'agents' => 'getAgents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const START_DAY_OF_WEEKEND_SUNDAY = 'Sunday';
    const START_DAY_OF_WEEKEND_MONDAY = 'Monday';
    const START_DAY_OF_WEEKEND_TUESDAY = 'Tuesday';
    const START_DAY_OF_WEEKEND_WEDNESDAY = 'Wednesday';
    const START_DAY_OF_WEEKEND_THURSDAY = 'Thursday';
    const START_DAY_OF_WEEKEND_FRIDAY = 'Friday';
    const START_DAY_OF_WEEKEND_SATURDAY = 'Saturday';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStartDayOfWeekendAllowableValues()
    {
        return [
            self::START_DAY_OF_WEEKEND_SUNDAY,
            self::START_DAY_OF_WEEKEND_MONDAY,
            self::START_DAY_OF_WEEKEND_TUESDAY,
            self::START_DAY_OF_WEEKEND_WEDNESDAY,
            self::START_DAY_OF_WEEKEND_THURSDAY,
            self::START_DAY_OF_WEEKEND_FRIDAY,
            self::START_DAY_OF_WEEKEND_SATURDAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['constrainWeeklyPaidTime'] = isset($data['constrainWeeklyPaidTime']) ? $data['constrainWeeklyPaidTime'] : null;
        $this->container['flexibleWeeklyPaidTime'] = isset($data['flexibleWeeklyPaidTime']) ? $data['flexibleWeeklyPaidTime'] : null;
        $this->container['weeklyExactPaidMinutes'] = isset($data['weeklyExactPaidMinutes']) ? $data['weeklyExactPaidMinutes'] : null;
        $this->container['weeklyMinimumPaidMinutes'] = isset($data['weeklyMinimumPaidMinutes']) ? $data['weeklyMinimumPaidMinutes'] : null;
        $this->container['weeklyMaximumPaidMinutes'] = isset($data['weeklyMaximumPaidMinutes']) ? $data['weeklyMaximumPaidMinutes'] : null;
        $this->container['constrainPaidTimeGranularity'] = isset($data['constrainPaidTimeGranularity']) ? $data['constrainPaidTimeGranularity'] : null;
        $this->container['paidTimeGranularityMinutes'] = isset($data['paidTimeGranularityMinutes']) ? $data['paidTimeGranularityMinutes'] : null;
        $this->container['constrainMinimumTimeBetweenShifts'] = isset($data['constrainMinimumTimeBetweenShifts']) ? $data['constrainMinimumTimeBetweenShifts'] : null;
        $this->container['minimumTimeBetweenShiftsMinutes'] = isset($data['minimumTimeBetweenShiftsMinutes']) ? $data['minimumTimeBetweenShiftsMinutes'] : null;
        $this->container['maximumDays'] = isset($data['maximumDays']) ? $data['maximumDays'] : null;
        $this->container['startDayOfWeekend'] = isset($data['startDayOfWeekend']) ? $data['startDayOfWeekend'] : null;
        $this->container['minimumConsecutiveTimeOffPerWeekMinutes'] = isset($data['minimumConsecutiveTimeOffPerWeekMinutes']) ? $data['minimumConsecutiveTimeOffPerWeekMinutes'] : null;
        $this->container['constrainMaximumConsecutiveWorkingWeekends'] = isset($data['constrainMaximumConsecutiveWorkingWeekends']) ? $data['constrainMaximumConsecutiveWorkingWeekends'] : null;
        $this->container['maximumConsecutiveWorkingWeekends'] = isset($data['maximumConsecutiveWorkingWeekends']) ? $data['maximumConsecutiveWorkingWeekends'] : null;
        $this->container['minimumWorkingDaysPerWeek'] = isset($data['minimumWorkingDaysPerWeek']) ? $data['minimumWorkingDaysPerWeek'] : null;
        $this->container['maximumConsecutiveWorkingDays'] = isset($data['maximumConsecutiveWorkingDays']) ? $data['maximumConsecutiveWorkingDays'] : null;
        $this->container['minimumShiftStartDistanceMinutes'] = isset($data['minimumShiftStartDistanceMinutes']) ? $data['minimumShiftStartDistanceMinutes'] : null;
        $this->container['minimumDaysOffPerPlanningPeriod'] = isset($data['minimumDaysOffPerPlanningPeriod']) ? $data['minimumDaysOffPerPlanningPeriod'] : null;
        $this->container['maximumDaysOffPerPlanningPeriod'] = isset($data['maximumDaysOffPerPlanningPeriod']) ? $data['maximumDaysOffPerPlanningPeriod'] : null;
        $this->container['minimumPaidHoursPerPlanningPeriod'] = isset($data['minimumPaidHoursPerPlanningPeriod']) ? $data['minimumPaidHoursPerPlanningPeriod'] : null;
        $this->container['maximumPaidHoursPerPlanningPeriod'] = isset($data['maximumPaidHoursPerPlanningPeriod']) ? $data['maximumPaidHoursPerPlanningPeriod'] : null;
        $this->container['optionalDays'] = isset($data['optionalDays']) ? $data['optionalDays'] : null;
        $this->container['shiftStartVariances'] = isset($data['shiftStartVariances']) ? $data['shiftStartVariances'] : null;
        $this->container['shifts'] = isset($data['shifts']) ? $data['shifts'] : null;
        $this->container['agents'] = isset($data['agents']) ? $data['agents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        $allowedValues = $this->getStartDayOfWeekendAllowableValues();
        if (!is_null($this->container['startDayOfWeekend']) && !in_array($this->container['startDayOfWeekend'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'startDayOfWeekend', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of this work plan
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Whether the work plan is enabled for scheduling
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets constrainWeeklyPaidTime
     *
     * @return bool
     */
    public function getConstrainWeeklyPaidTime()
    {
        return $this->container['constrainWeeklyPaidTime'];
    }

    /**
     * Sets constrainWeeklyPaidTime
     *
     * @param bool $constrainWeeklyPaidTime Whether the weekly paid time constraint is enabled for this work plan
     *
     * @return $this
     */
    public function setConstrainWeeklyPaidTime($constrainWeeklyPaidTime)
    {
        $this->container['constrainWeeklyPaidTime'] = $constrainWeeklyPaidTime;

        return $this;
    }

    /**
     * Gets flexibleWeeklyPaidTime
     *
     * @return bool
     */
    public function getFlexibleWeeklyPaidTime()
    {
        return $this->container['flexibleWeeklyPaidTime'];
    }

    /**
     * Sets flexibleWeeklyPaidTime
     *
     * @param bool $flexibleWeeklyPaidTime Whether the weekly paid time constraint is flexible for this work plan
     *
     * @return $this
     */
    public function setFlexibleWeeklyPaidTime($flexibleWeeklyPaidTime)
    {
        $this->container['flexibleWeeklyPaidTime'] = $flexibleWeeklyPaidTime;

        return $this;
    }

    /**
     * Gets weeklyExactPaidMinutes
     *
     * @return int
     */
    public function getWeeklyExactPaidMinutes()
    {
        return $this->container['weeklyExactPaidMinutes'];
    }

    /**
     * Sets weeklyExactPaidMinutes
     *
     * @param int $weeklyExactPaidMinutes Exact weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == false
     *
     * @return $this
     */
    public function setWeeklyExactPaidMinutes($weeklyExactPaidMinutes)
    {
        $this->container['weeklyExactPaidMinutes'] = $weeklyExactPaidMinutes;

        return $this;
    }

    /**
     * Gets weeklyMinimumPaidMinutes
     *
     * @return int
     */
    public function getWeeklyMinimumPaidMinutes()
    {
        return $this->container['weeklyMinimumPaidMinutes'];
    }

    /**
     * Sets weeklyMinimumPaidMinutes
     *
     * @param int $weeklyMinimumPaidMinutes Minimum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
     *
     * @return $this
     */
    public function setWeeklyMinimumPaidMinutes($weeklyMinimumPaidMinutes)
    {
        $this->container['weeklyMinimumPaidMinutes'] = $weeklyMinimumPaidMinutes;

        return $this;
    }

    /**
     * Gets weeklyMaximumPaidMinutes
     *
     * @return int
     */
    public function getWeeklyMaximumPaidMinutes()
    {
        return $this->container['weeklyMaximumPaidMinutes'];
    }

    /**
     * Sets weeklyMaximumPaidMinutes
     *
     * @param int $weeklyMaximumPaidMinutes Maximum weekly paid time in minutes for this work plan. Used if flexibleWeeklyPaidTime == true
     *
     * @return $this
     */
    public function setWeeklyMaximumPaidMinutes($weeklyMaximumPaidMinutes)
    {
        $this->container['weeklyMaximumPaidMinutes'] = $weeklyMaximumPaidMinutes;

        return $this;
    }

    /**
     * Gets constrainPaidTimeGranularity
     *
     * @return bool
     */
    public function getConstrainPaidTimeGranularity()
    {
        return $this->container['constrainPaidTimeGranularity'];
    }

    /**
     * Sets constrainPaidTimeGranularity
     *
     * @param bool $constrainPaidTimeGranularity Whether paid time granularity should be constrained for this workplan
     *
     * @return $this
     */
    public function setConstrainPaidTimeGranularity($constrainPaidTimeGranularity)
    {
        $this->container['constrainPaidTimeGranularity'] = $constrainPaidTimeGranularity;

        return $this;
    }

    /**
     * Gets paidTimeGranularityMinutes
     *
     * @return int
     */
    public function getPaidTimeGranularityMinutes()
    {
        return $this->container['paidTimeGranularityMinutes'];
    }

    /**
     * Sets paidTimeGranularityMinutes
     *
     * @param int $paidTimeGranularityMinutes Granularity in minutes allowed for shift paid time in this work plan. Used if constrainPaidTimeGranularity == true
     *
     * @return $this
     */
    public function setPaidTimeGranularityMinutes($paidTimeGranularityMinutes)
    {
        $this->container['paidTimeGranularityMinutes'] = $paidTimeGranularityMinutes;

        return $this;
    }

    /**
     * Gets constrainMinimumTimeBetweenShifts
     *
     * @return bool
     */
    public function getConstrainMinimumTimeBetweenShifts()
    {
        return $this->container['constrainMinimumTimeBetweenShifts'];
    }

    /**
     * Sets constrainMinimumTimeBetweenShifts
     *
     * @param bool $constrainMinimumTimeBetweenShifts Whether the minimum time between shifts constraint is enabled for this work plan
     *
     * @return $this
     */
    public function setConstrainMinimumTimeBetweenShifts($constrainMinimumTimeBetweenShifts)
    {
        $this->container['constrainMinimumTimeBetweenShifts'] = $constrainMinimumTimeBetweenShifts;

        return $this;
    }

    /**
     * Gets minimumTimeBetweenShiftsMinutes
     *
     * @return int
     */
    public function getMinimumTimeBetweenShiftsMinutes()
    {
        return $this->container['minimumTimeBetweenShiftsMinutes'];
    }

    /**
     * Sets minimumTimeBetweenShiftsMinutes
     *
     * @param int $minimumTimeBetweenShiftsMinutes Minimum time between shifts in minutes defined in this work plan. Used if constrainMinimumTimeBetweenShifts == true
     *
     * @return $this
     */
    public function setMinimumTimeBetweenShiftsMinutes($minimumTimeBetweenShiftsMinutes)
    {
        $this->container['minimumTimeBetweenShiftsMinutes'] = $minimumTimeBetweenShiftsMinutes;

        return $this;
    }

    /**
     * Gets maximumDays
     *
     * @return int
     */
    public function getMaximumDays()
    {
        return $this->container['maximumDays'];
    }

    /**
     * Sets maximumDays
     *
     * @param int $maximumDays Maximum number days in a week allowed to be scheduled for this work plan
     *
     * @return $this
     */
    public function setMaximumDays($maximumDays)
    {
        $this->container['maximumDays'] = $maximumDays;

        return $this;
    }

    /**
     * Gets startDayOfWeekend
     *
     * @return string
     */
    public function getStartDayOfWeekend()
    {
        return $this->container['startDayOfWeekend'];
    }

    /**
     * Sets startDayOfWeekend
     *
     * @param string $startDayOfWeekend The day of the week for which the weekend starts, such as Saturday
     *
     * @return $this
     */
    public function setStartDayOfWeekend($startDayOfWeekend)
    {
        $allowedValues = $this->getStartDayOfWeekendAllowableValues();
        if (!is_null($startDayOfWeekend) && !in_array($startDayOfWeekend, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'startDayOfWeekend', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['startDayOfWeekend'] = $startDayOfWeekend;

        return $this;
    }

    /**
     * Gets minimumConsecutiveTimeOffPerWeekMinutes
     *
     * @return int
     */
    public function getMinimumConsecutiveTimeOffPerWeekMinutes()
    {
        return $this->container['minimumConsecutiveTimeOffPerWeekMinutes'];
    }

    /**
     * Sets minimumConsecutiveTimeOffPerWeekMinutes
     *
     * @param int $minimumConsecutiveTimeOffPerWeekMinutes Minimum amount of consecutive time off per week that agents who are assigned this work plan are allowed to have off
     *
     * @return $this
     */
    public function setMinimumConsecutiveTimeOffPerWeekMinutes($minimumConsecutiveTimeOffPerWeekMinutes)
    {
        $this->container['minimumConsecutiveTimeOffPerWeekMinutes'] = $minimumConsecutiveTimeOffPerWeekMinutes;

        return $this;
    }

    /**
     * Gets constrainMaximumConsecutiveWorkingWeekends
     *
     * @return bool
     */
    public function getConstrainMaximumConsecutiveWorkingWeekends()
    {
        return $this->container['constrainMaximumConsecutiveWorkingWeekends'];
    }

    /**
     * Sets constrainMaximumConsecutiveWorkingWeekends
     *
     * @param bool $constrainMaximumConsecutiveWorkingWeekends Whether to constrain the maximum consecutive working weekends
     *
     * @return $this
     */
    public function setConstrainMaximumConsecutiveWorkingWeekends($constrainMaximumConsecutiveWorkingWeekends)
    {
        $this->container['constrainMaximumConsecutiveWorkingWeekends'] = $constrainMaximumConsecutiveWorkingWeekends;

        return $this;
    }

    /**
     * Gets maximumConsecutiveWorkingWeekends
     *
     * @return int
     */
    public function getMaximumConsecutiveWorkingWeekends()
    {
        return $this->container['maximumConsecutiveWorkingWeekends'];
    }

    /**
     * Sets maximumConsecutiveWorkingWeekends
     *
     * @param int $maximumConsecutiveWorkingWeekends The maximum number of consecutive weekends that agents who are assigned to this work plan are allowed to work
     *
     * @return $this
     */
    public function setMaximumConsecutiveWorkingWeekends($maximumConsecutiveWorkingWeekends)
    {
        $this->container['maximumConsecutiveWorkingWeekends'] = $maximumConsecutiveWorkingWeekends;

        return $this;
    }

    /**
     * Gets minimumWorkingDaysPerWeek
     *
     * @return int
     */
    public function getMinimumWorkingDaysPerWeek()
    {
        return $this->container['minimumWorkingDaysPerWeek'];
    }

    /**
     * Sets minimumWorkingDaysPerWeek
     *
     * @param int $minimumWorkingDaysPerWeek The minimum number of days that agents assigned to a work plan must work per week
     *
     * @return $this
     */
    public function setMinimumWorkingDaysPerWeek($minimumWorkingDaysPerWeek)
    {
        $this->container['minimumWorkingDaysPerWeek'] = $minimumWorkingDaysPerWeek;

        return $this;
    }

    /**
     * Gets maximumConsecutiveWorkingDays
     *
     * @return int
     */
    public function getMaximumConsecutiveWorkingDays()
    {
        return $this->container['maximumConsecutiveWorkingDays'];
    }

    /**
     * Sets maximumConsecutiveWorkingDays
     *
     * @param int $maximumConsecutiveWorkingDays The maximum number of consecutive days that agents assigned to this work plan are allowed to work
     *
     * @return $this
     */
    public function setMaximumConsecutiveWorkingDays($maximumConsecutiveWorkingDays)
    {
        $this->container['maximumConsecutiveWorkingDays'] = $maximumConsecutiveWorkingDays;

        return $this;
    }

    /**
     * Gets minimumShiftStartDistanceMinutes
     *
     * @return int
     */
    public function getMinimumShiftStartDistanceMinutes()
    {
        return $this->container['minimumShiftStartDistanceMinutes'];
    }

    /**
     * Sets minimumShiftStartDistanceMinutes
     *
     * @param int $minimumShiftStartDistanceMinutes The time period in minutes for the duration between the start times of two consecutive working days
     *
     * @return $this
     */
    public function setMinimumShiftStartDistanceMinutes($minimumShiftStartDistanceMinutes)
    {
        $this->container['minimumShiftStartDistanceMinutes'] = $minimumShiftStartDistanceMinutes;

        return $this;
    }

    /**
     * Gets minimumDaysOffPerPlanningPeriod
     *
     * @return int
     */
    public function getMinimumDaysOffPerPlanningPeriod()
    {
        return $this->container['minimumDaysOffPerPlanningPeriod'];
    }

    /**
     * Sets minimumDaysOffPerPlanningPeriod
     *
     * @param int $minimumDaysOffPerPlanningPeriod Minimum days off in the planning period
     *
     * @return $this
     */
    public function setMinimumDaysOffPerPlanningPeriod($minimumDaysOffPerPlanningPeriod)
    {
        $this->container['minimumDaysOffPerPlanningPeriod'] = $minimumDaysOffPerPlanningPeriod;

        return $this;
    }

    /**
     * Gets maximumDaysOffPerPlanningPeriod
     *
     * @return int
     */
    public function getMaximumDaysOffPerPlanningPeriod()
    {
        return $this->container['maximumDaysOffPerPlanningPeriod'];
    }

    /**
     * Sets maximumDaysOffPerPlanningPeriod
     *
     * @param int $maximumDaysOffPerPlanningPeriod Maximum days off in the planning period
     *
     * @return $this
     */
    public function setMaximumDaysOffPerPlanningPeriod($maximumDaysOffPerPlanningPeriod)
    {
        $this->container['maximumDaysOffPerPlanningPeriod'] = $maximumDaysOffPerPlanningPeriod;

        return $this;
    }

    /**
     * Gets minimumPaidHoursPerPlanningPeriod
     *
     * @return int
     */
    public function getMinimumPaidHoursPerPlanningPeriod()
    {
        return $this->container['minimumPaidHoursPerPlanningPeriod'];
    }

    /**
     * Sets minimumPaidHoursPerPlanningPeriod
     *
     * @param int $minimumPaidHoursPerPlanningPeriod Minimum paid hours in the planning period
     *
     * @return $this
     */
    public function setMinimumPaidHoursPerPlanningPeriod($minimumPaidHoursPerPlanningPeriod)
    {
        $this->container['minimumPaidHoursPerPlanningPeriod'] = $minimumPaidHoursPerPlanningPeriod;

        return $this;
    }

    /**
     * Gets maximumPaidHoursPerPlanningPeriod
     *
     * @return int
     */
    public function getMaximumPaidHoursPerPlanningPeriod()
    {
        return $this->container['maximumPaidHoursPerPlanningPeriod'];
    }

    /**
     * Sets maximumPaidHoursPerPlanningPeriod
     *
     * @param int $maximumPaidHoursPerPlanningPeriod Maximum paid hours in the planning period
     *
     * @return $this
     */
    public function setMaximumPaidHoursPerPlanningPeriod($maximumPaidHoursPerPlanningPeriod)
    {
        $this->container['maximumPaidHoursPerPlanningPeriod'] = $maximumPaidHoursPerPlanningPeriod;

        return $this;
    }

    /**
     * Gets optionalDays
     *
     * @return \PureCloudPlatform\Client\V2\Model\SetWrapperDayOfWeek
     */
    public function getOptionalDays()
    {
        return $this->container['optionalDays'];
    }

    /**
     * Sets optionalDays
     *
     * @param \PureCloudPlatform\Client\V2\Model\SetWrapperDayOfWeek $optionalDays Optional days to schedule for this work plan
     *
     * @return $this
     */
    public function setOptionalDays($optionalDays)
    {
        $this->container['optionalDays'] = $optionalDays;

        return $this;
    }

    /**
     * Gets shiftStartVariances
     *
     * @return \PureCloudPlatform\Client\V2\Model\ListWrapperShiftStartVariance
     */
    public function getShiftStartVariances()
    {
        return $this->container['shiftStartVariances'];
    }

    /**
     * Sets shiftStartVariances
     *
     * @param \PureCloudPlatform\Client\V2\Model\ListWrapperShiftStartVariance $shiftStartVariances Variance in minutes among start times of shifts in this work plan
     *
     * @return $this
     */
    public function setShiftStartVariances($shiftStartVariances)
    {
        $this->container['shiftStartVariances'] = $shiftStartVariances;

        return $this;
    }

    /**
     * Gets shifts
     *
     * @return \PureCloudPlatform\Client\V2\Model\CreateWorkPlanShift[]
     */
    public function getShifts()
    {
        return $this->container['shifts'];
    }

    /**
     * Sets shifts
     *
     * @param \PureCloudPlatform\Client\V2\Model\CreateWorkPlanShift[] $shifts Shifts in this work plan
     *
     * @return $this
     */
    public function setShifts($shifts)
    {
        $this->container['shifts'] = $shifts;

        return $this;
    }

    /**
     * Gets agents
     *
     * @return \PureCloudPlatform\Client\V2\Model\UserReference[]
     */
    public function getAgents()
    {
        return $this->container['agents'];
    }

    /**
     * Sets agents
     *
     * @param \PureCloudPlatform\Client\V2\Model\UserReference[] $agents Agents in this work plan
     *
     * @return $this
     */
    public function setAgents($agents)
    {
        $this->container['agents'] = $agents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


