<?php
/**
 * SearchRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * SearchRequest Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sortOrder' => 'string',
        'sortBy' => 'string',
        'pageSize' => 'int',
        'pageNumber' => 'int',
        'sort' => '\PureCloudPlatform\Client\V2\Model\SearchSort[]',
        'returnFields' => 'string[]',
        'expand' => 'string[]',
        'types' => 'string[]',
        'query' => '\PureCloudPlatform\Client\V2\Model\SearchCriteria[]',
        'aggregations' => '\PureCloudPlatform\Client\V2\Model\SearchAggregation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sortOrder' => null,
        'sortBy' => null,
        'pageSize' => 'int32',
        'pageNumber' => 'int32',
        'sort' => null,
        'returnFields' => null,
        'expand' => null,
        'types' => null,
        'query' => null,
        'aggregations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sortOrder' => 'sortOrder',
        'sortBy' => 'sortBy',
        'pageSize' => 'pageSize',
        'pageNumber' => 'pageNumber',
        'sort' => 'sort',
        'returnFields' => 'returnFields',
        'expand' => 'expand',
        'types' => 'types',
        'query' => 'query',
        'aggregations' => 'aggregations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sortOrder' => 'setSortOrder',
        'sortBy' => 'setSortBy',
        'pageSize' => 'setPageSize',
        'pageNumber' => 'setPageNumber',
        'sort' => 'setSort',
        'returnFields' => 'setReturnFields',
        'expand' => 'setExpand',
        'types' => 'setTypes',
        'query' => 'setQuery',
        'aggregations' => 'setAggregations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sortOrder' => 'getSortOrder',
        'sortBy' => 'getSortBy',
        'pageSize' => 'getPageSize',
        'pageNumber' => 'getPageNumber',
        'sort' => 'getSort',
        'returnFields' => 'getReturnFields',
        'expand' => 'getExpand',
        'types' => 'getTypes',
        'query' => 'getQuery',
        'aggregations' => 'getAggregations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SORT_ORDER_ASC = 'ASC';
    const SORT_ORDER_DESC = 'DESC';
    const SORT_ORDER_SCORE = 'SCORE';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSortOrderAllowableValues()
    {
        return [
            self::SORT_ORDER_ASC,
            self::SORT_ORDER_DESC,
            self::SORT_ORDER_SCORE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sortOrder'] = isset($data['sortOrder']) ? $data['sortOrder'] : null;
        $this->container['sortBy'] = isset($data['sortBy']) ? $data['sortBy'] : null;
        $this->container['pageSize'] = isset($data['pageSize']) ? $data['pageSize'] : null;
        $this->container['pageNumber'] = isset($data['pageNumber']) ? $data['pageNumber'] : null;
        $this->container['sort'] = isset($data['sort']) ? $data['sort'] : null;
        $this->container['returnFields'] = isset($data['returnFields']) ? $data['returnFields'] : null;
        $this->container['expand'] = isset($data['expand']) ? $data['expand'] : null;
        $this->container['types'] = isset($data['types']) ? $data['types'] : null;
        $this->container['query'] = isset($data['query']) ? $data['query'] : null;
        $this->container['aggregations'] = isset($data['aggregations']) ? $data['aggregations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($this->container['sortOrder']) && !in_array($this->container['sortOrder'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sortOrder', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['types'] === null) {
            $invalidProperties[] = "'types' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sortOrder
     *
     * @return string
     */
    public function getSortOrder()
    {
        return $this->container['sortOrder'];
    }

    /**
     * Sets sortOrder
     *
     * @param string $sortOrder The sort order for results
     *
     * @return $this
     */
    public function setSortOrder($sortOrder)
    {
        $allowedValues = $this->getSortOrderAllowableValues();
        if (!is_null($sortOrder) && !in_array($sortOrder, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sortOrder', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sortOrder'] = $sortOrder;

        return $this;
    }

    /**
     * Gets sortBy
     *
     * @return string
     */
    public function getSortBy()
    {
        return $this->container['sortBy'];
    }

    /**
     * Sets sortBy
     *
     * @param string $sortBy The field in the resource that you want to sort the results by
     *
     * @return $this
     */
    public function setSortBy($sortBy)
    {
        $this->container['sortBy'] = $sortBy;

        return $this;
    }

    /**
     * Gets pageSize
     *
     * @return int
     */
    public function getPageSize()
    {
        return $this->container['pageSize'];
    }

    /**
     * Sets pageSize
     *
     * @param int $pageSize The number of results per page
     *
     * @return $this
     */
    public function setPageSize($pageSize)
    {
        $this->container['pageSize'] = $pageSize;

        return $this;
    }

    /**
     * Gets pageNumber
     *
     * @return int
     */
    public function getPageNumber()
    {
        return $this->container['pageNumber'];
    }

    /**
     * Sets pageNumber
     *
     * @param int $pageNumber The page of resources you want to retrieve
     *
     * @return $this
     */
    public function setPageNumber($pageNumber)
    {
        $this->container['pageNumber'] = $pageNumber;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return \PureCloudPlatform\Client\V2\Model\SearchSort[]
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param \PureCloudPlatform\Client\V2\Model\SearchSort[] $sort Multi-value sort order, list of multiple sort values
     *
     * @return $this
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets returnFields
     *
     * @return string[]
     */
    public function getReturnFields()
    {
        return $this->container['returnFields'];
    }

    /**
     * Sets returnFields
     *
     * @param string[] $returnFields A List of strings.  Possible values are any field in the resource you are searching on.  The other option is to use ALL_FIELDS, when this is provided all fields in the resource will be returned in the search results.
     *
     * @return $this
     */
    public function setReturnFields($returnFields)
    {
        $this->container['returnFields'] = $returnFields;

        return $this;
    }

    /**
     * Gets expand
     *
     * @return string[]
     */
    public function getExpand()
    {
        return $this->container['expand'];
    }

    /**
     * Sets expand
     *
     * @param string[] $expand Provides more details about a specified resource
     *
     * @return $this
     */
    public function setExpand($expand)
    {
        $this->container['expand'] = $expand;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[] $types Resource domain type to search
     *
     * @return $this
     */
    public function setTypes($types)
    {
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets query
     *
     * @return \PureCloudPlatform\Client\V2\Model\SearchCriteria[]
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param \PureCloudPlatform\Client\V2\Model\SearchCriteria[] $query The search criteria
     *
     * @return $this
     */
    public function setQuery($query)
    {
        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets aggregations
     *
     * @return \PureCloudPlatform\Client\V2\Model\SearchAggregation[]
     */
    public function getAggregations()
    {
        return $this->container['aggregations'];
    }

    /**
     * Sets aggregations
     *
     * @param \PureCloudPlatform\Client\V2\Model\SearchAggregation[] $aggregations Aggregation criteria
     *
     * @return $this
     */
    public function setAggregations($aggregations)
    {
        $this->container['aggregations'] = $aggregations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


