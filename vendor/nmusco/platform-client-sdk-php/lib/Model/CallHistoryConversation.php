<?php
/**
 * CallHistoryConversation
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * CallHistoryConversation Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CallHistoryConversation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CallHistoryConversation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'participants' => '\PureCloudPlatform\Client\V2\Model\CallHistoryParticipant[]',
        'direction' => 'string',
        'wentToVoicemail' => 'bool',
        'missedCall' => 'bool',
        'startTime' => '\DateTime',
        'wasConference' => 'bool',
        'wasCallback' => 'bool',
        'hadScreenShare' => 'bool',
        'hadCobrowse' => 'bool',
        'wasOutboundCampaign' => 'bool',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'participants' => null,
        'direction' => null,
        'wentToVoicemail' => null,
        'missedCall' => null,
        'startTime' => 'date-time',
        'wasConference' => null,
        'wasCallback' => null,
        'hadScreenShare' => null,
        'hadCobrowse' => null,
        'wasOutboundCampaign' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'participants' => 'participants',
        'direction' => 'direction',
        'wentToVoicemail' => 'wentToVoicemail',
        'missedCall' => 'missedCall',
        'startTime' => 'startTime',
        'wasConference' => 'wasConference',
        'wasCallback' => 'wasCallback',
        'hadScreenShare' => 'hadScreenShare',
        'hadCobrowse' => 'hadCobrowse',
        'wasOutboundCampaign' => 'wasOutboundCampaign',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'participants' => 'setParticipants',
        'direction' => 'setDirection',
        'wentToVoicemail' => 'setWentToVoicemail',
        'missedCall' => 'setMissedCall',
        'startTime' => 'setStartTime',
        'wasConference' => 'setWasConference',
        'wasCallback' => 'setWasCallback',
        'hadScreenShare' => 'setHadScreenShare',
        'hadCobrowse' => 'setHadCobrowse',
        'wasOutboundCampaign' => 'setWasOutboundCampaign',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'participants' => 'getParticipants',
        'direction' => 'getDirection',
        'wentToVoicemail' => 'getWentToVoicemail',
        'missedCall' => 'getMissedCall',
        'startTime' => 'getStartTime',
        'wasConference' => 'getWasConference',
        'wasCallback' => 'getWasCallback',
        'hadScreenShare' => 'getHadScreenShare',
        'hadCobrowse' => 'getHadCobrowse',
        'wasOutboundCampaign' => 'getWasOutboundCampaign',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DIRECTION_INBOUND = 'inbound';
    const DIRECTION_OUTBOUND = 'outbound';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_INBOUND,
            self::DIRECTION_OUTBOUND,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['participants'] = isset($data['participants']) ? $data['participants'] : null;
        $this->container['direction'] = isset($data['direction']) ? $data['direction'] : null;
        $this->container['wentToVoicemail'] = isset($data['wentToVoicemail']) ? $data['wentToVoicemail'] : null;
        $this->container['missedCall'] = isset($data['missedCall']) ? $data['missedCall'] : null;
        $this->container['startTime'] = isset($data['startTime']) ? $data['startTime'] : null;
        $this->container['wasConference'] = isset($data['wasConference']) ? $data['wasConference'] : null;
        $this->container['wasCallback'] = isset($data['wasCallback']) ? $data['wasCallback'] : null;
        $this->container['hadScreenShare'] = isset($data['hadScreenShare']) ? $data['hadScreenShare'] : null;
        $this->container['hadCobrowse'] = isset($data['hadCobrowse']) ? $data['hadCobrowse'] : null;
        $this->container['wasOutboundCampaign'] = isset($data['wasOutboundCampaign']) ? $data['wasOutboundCampaign'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'direction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets participants
     *
     * @return \PureCloudPlatform\Client\V2\Model\CallHistoryParticipant[]
     */
    public function getParticipants()
    {
        return $this->container['participants'];
    }

    /**
     * Sets participants
     *
     * @param \PureCloudPlatform\Client\V2\Model\CallHistoryParticipant[] $participants The list of participants involved in the conversation.
     *
     * @return $this
     */
    public function setParticipants($participants)
    {
        $this->container['participants'] = $participants;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string $direction The direction of the call relating to the current user
     *
     * @return $this
     */
    public function setDirection($direction)
    {
        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($direction) && !in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'direction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets wentToVoicemail
     *
     * @return bool
     */
    public function getWentToVoicemail()
    {
        return $this->container['wentToVoicemail'];
    }

    /**
     * Sets wentToVoicemail
     *
     * @param bool $wentToVoicemail Did the call end in the current user's voicemail
     *
     * @return $this
     */
    public function setWentToVoicemail($wentToVoicemail)
    {
        $this->container['wentToVoicemail'] = $wentToVoicemail;

        return $this;
    }

    /**
     * Gets missedCall
     *
     * @return bool
     */
    public function getMissedCall()
    {
        return $this->container['missedCall'];
    }

    /**
     * Sets missedCall
     *
     * @param bool $missedCall Did the user not answer this conversation
     *
     * @return $this
     */
    public function setMissedCall($missedCall)
    {
        $this->container['missedCall'] = $missedCall;

        return $this;
    }

    /**
     * Gets startTime
     *
     * @return \DateTime
     */
    public function getStartTime()
    {
        return $this->container['startTime'];
    }

    /**
     * Sets startTime
     *
     * @param \DateTime $startTime The time the user joined the conversation. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setStartTime($startTime)
    {
        $this->container['startTime'] = $startTime;

        return $this;
    }

    /**
     * Gets wasConference
     *
     * @return bool
     */
    public function getWasConference()
    {
        return $this->container['wasConference'];
    }

    /**
     * Sets wasConference
     *
     * @param bool $wasConference Was this conversation a conference
     *
     * @return $this
     */
    public function setWasConference($wasConference)
    {
        $this->container['wasConference'] = $wasConference;

        return $this;
    }

    /**
     * Gets wasCallback
     *
     * @return bool
     */
    public function getWasCallback()
    {
        return $this->container['wasCallback'];
    }

    /**
     * Sets wasCallback
     *
     * @param bool $wasCallback Was this conversation a callback
     *
     * @return $this
     */
    public function setWasCallback($wasCallback)
    {
        $this->container['wasCallback'] = $wasCallback;

        return $this;
    }

    /**
     * Gets hadScreenShare
     *
     * @return bool
     */
    public function getHadScreenShare()
    {
        return $this->container['hadScreenShare'];
    }

    /**
     * Sets hadScreenShare
     *
     * @param bool $hadScreenShare Did this conversation have a screen share session
     *
     * @return $this
     */
    public function setHadScreenShare($hadScreenShare)
    {
        $this->container['hadScreenShare'] = $hadScreenShare;

        return $this;
    }

    /**
     * Gets hadCobrowse
     *
     * @return bool
     */
    public function getHadCobrowse()
    {
        return $this->container['hadCobrowse'];
    }

    /**
     * Sets hadCobrowse
     *
     * @param bool $hadCobrowse Did this conversation have a cobrowse session
     *
     * @return $this
     */
    public function setHadCobrowse($hadCobrowse)
    {
        $this->container['hadCobrowse'] = $hadCobrowse;

        return $this;
    }

    /**
     * Gets wasOutboundCampaign
     *
     * @return bool
     */
    public function getWasOutboundCampaign()
    {
        return $this->container['wasOutboundCampaign'];
    }

    /**
     * Sets wasOutboundCampaign
     *
     * @param bool $wasOutboundCampaign Was this conversation associated with an outbound campaign
     *
     * @return $this
     */
    public function setWasOutboundCampaign($wasOutboundCampaign)
    {
        $this->container['wasOutboundCampaign'] = $wasOutboundCampaign;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


