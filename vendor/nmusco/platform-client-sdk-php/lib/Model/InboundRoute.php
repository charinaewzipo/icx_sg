<?php
/**
 * InboundRoute
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * InboundRoute Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InboundRoute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InboundRoute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'pattern' => 'string',
        'queue' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'priority' => 'int',
        'skills' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef[]',
        'language' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'fromName' => 'string',
        'fromEmail' => 'string',
        'flow' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'replyEmailAddress' => '\PureCloudPlatform\Client\V2\Model\QueueEmailAddress',
        'autoBcc' => '\PureCloudPlatform\Client\V2\Model\EmailAddress[]',
        'spamFlow' => '\PureCloudPlatform\Client\V2\Model\DomainEntityRef',
        'selfUri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'pattern' => null,
        'queue' => null,
        'priority' => 'int32',
        'skills' => null,
        'language' => null,
        'fromName' => null,
        'fromEmail' => null,
        'flow' => null,
        'replyEmailAddress' => null,
        'autoBcc' => null,
        'spamFlow' => null,
        'selfUri' => 'uri'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'pattern' => 'pattern',
        'queue' => 'queue',
        'priority' => 'priority',
        'skills' => 'skills',
        'language' => 'language',
        'fromName' => 'fromName',
        'fromEmail' => 'fromEmail',
        'flow' => 'flow',
        'replyEmailAddress' => 'replyEmailAddress',
        'autoBcc' => 'autoBcc',
        'spamFlow' => 'spamFlow',
        'selfUri' => 'selfUri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'pattern' => 'setPattern',
        'queue' => 'setQueue',
        'priority' => 'setPriority',
        'skills' => 'setSkills',
        'language' => 'setLanguage',
        'fromName' => 'setFromName',
        'fromEmail' => 'setFromEmail',
        'flow' => 'setFlow',
        'replyEmailAddress' => 'setReplyEmailAddress',
        'autoBcc' => 'setAutoBcc',
        'spamFlow' => 'setSpamFlow',
        'selfUri' => 'setSelfUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'pattern' => 'getPattern',
        'queue' => 'getQueue',
        'priority' => 'getPriority',
        'skills' => 'getSkills',
        'language' => 'getLanguage',
        'fromName' => 'getFromName',
        'fromEmail' => 'getFromEmail',
        'flow' => 'getFlow',
        'replyEmailAddress' => 'getReplyEmailAddress',
        'autoBcc' => 'getAutoBcc',
        'spamFlow' => 'getSpamFlow',
        'selfUri' => 'getSelfUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pattern'] = isset($data['pattern']) ? $data['pattern'] : null;
        $this->container['queue'] = isset($data['queue']) ? $data['queue'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['skills'] = isset($data['skills']) ? $data['skills'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['fromName'] = isset($data['fromName']) ? $data['fromName'] : null;
        $this->container['fromEmail'] = isset($data['fromEmail']) ? $data['fromEmail'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['replyEmailAddress'] = isset($data['replyEmailAddress']) ? $data['replyEmailAddress'] : null;
        $this->container['autoBcc'] = isset($data['autoBcc']) ? $data['autoBcc'] : null;
        $this->container['spamFlow'] = isset($data['spamFlow']) ? $data['spamFlow'] : null;
        $this->container['selfUri'] = isset($data['selfUri']) ? $data['selfUri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pattern'] === null) {
            $invalidProperties[] = "'pattern' can't be null";
        }
        if ($this->container['fromName'] === null) {
            $invalidProperties[] = "'fromName' can't be null";
        }
        if ($this->container['fromEmail'] === null) {
            $invalidProperties[] = "'fromEmail' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The globally unique identifier for the object.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string $pattern The search pattern that the mailbox name should match.
     *
     * @return $this
     */
    public function setPattern($pattern)
    {
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets queue
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getQueue()
    {
        return $this->container['queue'];
    }

    /**
     * Sets queue
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $queue The queue to route the emails to.
     *
     * @return $this
     */
    public function setQueue($queue)
    {
        $this->container['queue'] = $queue;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority The priority to use for routing.
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets skills
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef[]
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef[] $skills The skills to use for routing.
     *
     * @return $this
     */
    public function setSkills($skills)
    {
        $this->container['skills'] = $skills;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $language The language to use for routing.
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets fromName
     *
     * @return string
     */
    public function getFromName()
    {
        return $this->container['fromName'];
    }

    /**
     * Sets fromName
     *
     * @param string $fromName The sender name to use for outgoing replies.
     *
     * @return $this
     */
    public function setFromName($fromName)
    {
        $this->container['fromName'] = $fromName;

        return $this;
    }

    /**
     * Gets fromEmail
     *
     * @return string
     */
    public function getFromEmail()
    {
        return $this->container['fromEmail'];
    }

    /**
     * Sets fromEmail
     *
     * @param string $fromEmail The sender email to use for outgoing replies.
     *
     * @return $this
     */
    public function setFromEmail($fromEmail)
    {
        $this->container['fromEmail'] = $fromEmail;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $flow The flow to use for processing the email.
     *
     * @return $this
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets replyEmailAddress
     *
     * @return \PureCloudPlatform\Client\V2\Model\QueueEmailAddress
     */
    public function getReplyEmailAddress()
    {
        return $this->container['replyEmailAddress'];
    }

    /**
     * Sets replyEmailAddress
     *
     * @param \PureCloudPlatform\Client\V2\Model\QueueEmailAddress $replyEmailAddress The route to use for email replies.
     *
     * @return $this
     */
    public function setReplyEmailAddress($replyEmailAddress)
    {
        $this->container['replyEmailAddress'] = $replyEmailAddress;

        return $this;
    }

    /**
     * Gets autoBcc
     *
     * @return \PureCloudPlatform\Client\V2\Model\EmailAddress[]
     */
    public function getAutoBcc()
    {
        return $this->container['autoBcc'];
    }

    /**
     * Sets autoBcc
     *
     * @param \PureCloudPlatform\Client\V2\Model\EmailAddress[] $autoBcc The recipients that should be  automatically blind copied on outbound emails associated with this InboundRoute.
     *
     * @return $this
     */
    public function setAutoBcc($autoBcc)
    {
        $this->container['autoBcc'] = $autoBcc;

        return $this;
    }

    /**
     * Gets spamFlow
     *
     * @return \PureCloudPlatform\Client\V2\Model\DomainEntityRef
     */
    public function getSpamFlow()
    {
        return $this->container['spamFlow'];
    }

    /**
     * Sets spamFlow
     *
     * @param \PureCloudPlatform\Client\V2\Model\DomainEntityRef $spamFlow The flow to use for processing inbound emails that have been marked as spam.
     *
     * @return $this
     */
    public function setSpamFlow($spamFlow)
    {
        $this->container['spamFlow'] = $spamFlow;

        return $this;
    }

    /**
     * Gets selfUri
     *
     * @return string
     */
    public function getSelfUri()
    {
        return $this->container['selfUri'];
    }

    /**
     * Sets selfUri
     *
     * @param string $selfUri The URI for this object
     *
     * @return $this
     */
    public function setSelfUri($selfUri)
    {
        $this->container['selfUri'] = $selfUri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


