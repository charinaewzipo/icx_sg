<?php
/**
 * WorkPlanActivity
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * WorkPlanActivity Class Doc Comment
 *
 * @category Class
 * @description Activity configured for shift in work plan
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WorkPlanActivity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WorkPlanActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'activityCodeId' => 'string',
        'description' => 'string',
        'lengthMinutes' => 'int',
        'startTimeIsRelativeToShiftStart' => 'bool',
        'flexibleStartTime' => 'bool',
        'earliestStartTimeMinutes' => 'int',
        'latestStartTimeMinutes' => 'int',
        'exactStartTimeMinutes' => 'int',
        'startTimeIncrementMinutes' => 'int',
        'countsAsPaidTime' => 'bool',
        'countsAsContiguousWorkTime' => 'bool',
        'minimumLengthFromShiftStartMinutes' => 'int',
        'minimumLengthFromShiftEndMinutes' => 'int',
        'id' => 'string',
        'delete' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'activityCodeId' => null,
        'description' => null,
        'lengthMinutes' => 'int32',
        'startTimeIsRelativeToShiftStart' => null,
        'flexibleStartTime' => null,
        'earliestStartTimeMinutes' => 'int32',
        'latestStartTimeMinutes' => 'int32',
        'exactStartTimeMinutes' => 'int32',
        'startTimeIncrementMinutes' => 'int32',
        'countsAsPaidTime' => null,
        'countsAsContiguousWorkTime' => null,
        'minimumLengthFromShiftStartMinutes' => 'int32',
        'minimumLengthFromShiftEndMinutes' => 'int32',
        'id' => null,
        'delete' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'activityCodeId' => 'activityCodeId',
        'description' => 'description',
        'lengthMinutes' => 'lengthMinutes',
        'startTimeIsRelativeToShiftStart' => 'startTimeIsRelativeToShiftStart',
        'flexibleStartTime' => 'flexibleStartTime',
        'earliestStartTimeMinutes' => 'earliestStartTimeMinutes',
        'latestStartTimeMinutes' => 'latestStartTimeMinutes',
        'exactStartTimeMinutes' => 'exactStartTimeMinutes',
        'startTimeIncrementMinutes' => 'startTimeIncrementMinutes',
        'countsAsPaidTime' => 'countsAsPaidTime',
        'countsAsContiguousWorkTime' => 'countsAsContiguousWorkTime',
        'minimumLengthFromShiftStartMinutes' => 'minimumLengthFromShiftStartMinutes',
        'minimumLengthFromShiftEndMinutes' => 'minimumLengthFromShiftEndMinutes',
        'id' => 'id',
        'delete' => 'delete'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'activityCodeId' => 'setActivityCodeId',
        'description' => 'setDescription',
        'lengthMinutes' => 'setLengthMinutes',
        'startTimeIsRelativeToShiftStart' => 'setStartTimeIsRelativeToShiftStart',
        'flexibleStartTime' => 'setFlexibleStartTime',
        'earliestStartTimeMinutes' => 'setEarliestStartTimeMinutes',
        'latestStartTimeMinutes' => 'setLatestStartTimeMinutes',
        'exactStartTimeMinutes' => 'setExactStartTimeMinutes',
        'startTimeIncrementMinutes' => 'setStartTimeIncrementMinutes',
        'countsAsPaidTime' => 'setCountsAsPaidTime',
        'countsAsContiguousWorkTime' => 'setCountsAsContiguousWorkTime',
        'minimumLengthFromShiftStartMinutes' => 'setMinimumLengthFromShiftStartMinutes',
        'minimumLengthFromShiftEndMinutes' => 'setMinimumLengthFromShiftEndMinutes',
        'id' => 'setId',
        'delete' => 'setDelete'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'activityCodeId' => 'getActivityCodeId',
        'description' => 'getDescription',
        'lengthMinutes' => 'getLengthMinutes',
        'startTimeIsRelativeToShiftStart' => 'getStartTimeIsRelativeToShiftStart',
        'flexibleStartTime' => 'getFlexibleStartTime',
        'earliestStartTimeMinutes' => 'getEarliestStartTimeMinutes',
        'latestStartTimeMinutes' => 'getLatestStartTimeMinutes',
        'exactStartTimeMinutes' => 'getExactStartTimeMinutes',
        'startTimeIncrementMinutes' => 'getStartTimeIncrementMinutes',
        'countsAsPaidTime' => 'getCountsAsPaidTime',
        'countsAsContiguousWorkTime' => 'getCountsAsContiguousWorkTime',
        'minimumLengthFromShiftStartMinutes' => 'getMinimumLengthFromShiftStartMinutes',
        'minimumLengthFromShiftEndMinutes' => 'getMinimumLengthFromShiftEndMinutes',
        'id' => 'getId',
        'delete' => 'getDelete'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['activityCodeId'] = isset($data['activityCodeId']) ? $data['activityCodeId'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['lengthMinutes'] = isset($data['lengthMinutes']) ? $data['lengthMinutes'] : null;
        $this->container['startTimeIsRelativeToShiftStart'] = isset($data['startTimeIsRelativeToShiftStart']) ? $data['startTimeIsRelativeToShiftStart'] : null;
        $this->container['flexibleStartTime'] = isset($data['flexibleStartTime']) ? $data['flexibleStartTime'] : null;
        $this->container['earliestStartTimeMinutes'] = isset($data['earliestStartTimeMinutes']) ? $data['earliestStartTimeMinutes'] : null;
        $this->container['latestStartTimeMinutes'] = isset($data['latestStartTimeMinutes']) ? $data['latestStartTimeMinutes'] : null;
        $this->container['exactStartTimeMinutes'] = isset($data['exactStartTimeMinutes']) ? $data['exactStartTimeMinutes'] : null;
        $this->container['startTimeIncrementMinutes'] = isset($data['startTimeIncrementMinutes']) ? $data['startTimeIncrementMinutes'] : null;
        $this->container['countsAsPaidTime'] = isset($data['countsAsPaidTime']) ? $data['countsAsPaidTime'] : null;
        $this->container['countsAsContiguousWorkTime'] = isset($data['countsAsContiguousWorkTime']) ? $data['countsAsContiguousWorkTime'] : null;
        $this->container['minimumLengthFromShiftStartMinutes'] = isset($data['minimumLengthFromShiftStartMinutes']) ? $data['minimumLengthFromShiftStartMinutes'] : null;
        $this->container['minimumLengthFromShiftEndMinutes'] = isset($data['minimumLengthFromShiftEndMinutes']) ? $data['minimumLengthFromShiftEndMinutes'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['delete'] = isset($data['delete']) ? $data['delete'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets activityCodeId
     *
     * @return string
     */
    public function getActivityCodeId()
    {
        return $this->container['activityCodeId'];
    }

    /**
     * Sets activityCodeId
     *
     * @param string $activityCodeId ID of the activity code associated with this activity
     *
     * @return $this
     */
    public function setActivityCodeId($activityCodeId)
    {
        $this->container['activityCodeId'] = $activityCodeId;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the activity
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets lengthMinutes
     *
     * @return int
     */
    public function getLengthMinutes()
    {
        return $this->container['lengthMinutes'];
    }

    /**
     * Sets lengthMinutes
     *
     * @param int $lengthMinutes Length of the activity in minutes
     *
     * @return $this
     */
    public function setLengthMinutes($lengthMinutes)
    {
        $this->container['lengthMinutes'] = $lengthMinutes;

        return $this;
    }

    /**
     * Gets startTimeIsRelativeToShiftStart
     *
     * @return bool
     */
    public function getStartTimeIsRelativeToShiftStart()
    {
        return $this->container['startTimeIsRelativeToShiftStart'];
    }

    /**
     * Sets startTimeIsRelativeToShiftStart
     *
     * @param bool $startTimeIsRelativeToShiftStart Whether the start time of the activity is relative to the start time of the shift it belongs to
     *
     * @return $this
     */
    public function setStartTimeIsRelativeToShiftStart($startTimeIsRelativeToShiftStart)
    {
        $this->container['startTimeIsRelativeToShiftStart'] = $startTimeIsRelativeToShiftStart;

        return $this;
    }

    /**
     * Gets flexibleStartTime
     *
     * @return bool
     */
    public function getFlexibleStartTime()
    {
        return $this->container['flexibleStartTime'];
    }

    /**
     * Sets flexibleStartTime
     *
     * @param bool $flexibleStartTime Whether the start time of the activity is flexible
     *
     * @return $this
     */
    public function setFlexibleStartTime($flexibleStartTime)
    {
        $this->container['flexibleStartTime'] = $flexibleStartTime;

        return $this;
    }

    /**
     * Gets earliestStartTimeMinutes
     *
     * @return int
     */
    public function getEarliestStartTimeMinutes()
    {
        return $this->container['earliestStartTimeMinutes'];
    }

    /**
     * Sets earliestStartTimeMinutes
     *
     * @param int $earliestStartTimeMinutes Earliest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true
     *
     * @return $this
     */
    public function setEarliestStartTimeMinutes($earliestStartTimeMinutes)
    {
        $this->container['earliestStartTimeMinutes'] = $earliestStartTimeMinutes;

        return $this;
    }

    /**
     * Gets latestStartTimeMinutes
     *
     * @return int
     */
    public function getLatestStartTimeMinutes()
    {
        return $this->container['latestStartTimeMinutes'];
    }

    /**
     * Sets latestStartTimeMinutes
     *
     * @param int $latestStartTimeMinutes Latest activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == true
     *
     * @return $this
     */
    public function setLatestStartTimeMinutes($latestStartTimeMinutes)
    {
        $this->container['latestStartTimeMinutes'] = $latestStartTimeMinutes;

        return $this;
    }

    /**
     * Gets exactStartTimeMinutes
     *
     * @return int
     */
    public function getExactStartTimeMinutes()
    {
        return $this->container['exactStartTimeMinutes'];
    }

    /**
     * Sets exactStartTimeMinutes
     *
     * @param int $exactStartTimeMinutes Exact activity start in offset minutes relative to shift start time if startTimeIsRelativeToShiftStart == true else its based on midnight. Used if flexibleStartTime == false
     *
     * @return $this
     */
    public function setExactStartTimeMinutes($exactStartTimeMinutes)
    {
        $this->container['exactStartTimeMinutes'] = $exactStartTimeMinutes;

        return $this;
    }

    /**
     * Gets startTimeIncrementMinutes
     *
     * @return int
     */
    public function getStartTimeIncrementMinutes()
    {
        return $this->container['startTimeIncrementMinutes'];
    }

    /**
     * Sets startTimeIncrementMinutes
     *
     * @param int $startTimeIncrementMinutes Increment in offset minutes that would contribute to different possible start times for the activity
     *
     * @return $this
     */
    public function setStartTimeIncrementMinutes($startTimeIncrementMinutes)
    {
        $this->container['startTimeIncrementMinutes'] = $startTimeIncrementMinutes;

        return $this;
    }

    /**
     * Gets countsAsPaidTime
     *
     * @return bool
     */
    public function getCountsAsPaidTime()
    {
        return $this->container['countsAsPaidTime'];
    }

    /**
     * Sets countsAsPaidTime
     *
     * @param bool $countsAsPaidTime Whether the activity is paid
     *
     * @return $this
     */
    public function setCountsAsPaidTime($countsAsPaidTime)
    {
        $this->container['countsAsPaidTime'] = $countsAsPaidTime;

        return $this;
    }

    /**
     * Gets countsAsContiguousWorkTime
     *
     * @return bool
     */
    public function getCountsAsContiguousWorkTime()
    {
        return $this->container['countsAsContiguousWorkTime'];
    }

    /**
     * Sets countsAsContiguousWorkTime
     *
     * @param bool $countsAsContiguousWorkTime Whether the activity duration is counted towards contiguous work time
     *
     * @return $this
     */
    public function setCountsAsContiguousWorkTime($countsAsContiguousWorkTime)
    {
        $this->container['countsAsContiguousWorkTime'] = $countsAsContiguousWorkTime;

        return $this;
    }

    /**
     * Gets minimumLengthFromShiftStartMinutes
     *
     * @return int
     */
    public function getMinimumLengthFromShiftStartMinutes()
    {
        return $this->container['minimumLengthFromShiftStartMinutes'];
    }

    /**
     * Sets minimumLengthFromShiftStartMinutes
     *
     * @param int $minimumLengthFromShiftStartMinutes The minimum duration between shift start and shift item (e.g., break or meal) start in minutes
     *
     * @return $this
     */
    public function setMinimumLengthFromShiftStartMinutes($minimumLengthFromShiftStartMinutes)
    {
        $this->container['minimumLengthFromShiftStartMinutes'] = $minimumLengthFromShiftStartMinutes;

        return $this;
    }

    /**
     * Gets minimumLengthFromShiftEndMinutes
     *
     * @return int
     */
    public function getMinimumLengthFromShiftEndMinutes()
    {
        return $this->container['minimumLengthFromShiftEndMinutes'];
    }

    /**
     * Sets minimumLengthFromShiftEndMinutes
     *
     * @param int $minimumLengthFromShiftEndMinutes The minimum duration between shift item (e.g., break or meal) end and shift end in minutes
     *
     * @return $this
     */
    public function setMinimumLengthFromShiftEndMinutes($minimumLengthFromShiftEndMinutes)
    {
        $this->container['minimumLengthFromShiftEndMinutes'] = $minimumLengthFromShiftEndMinutes;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the activity. This is required only for the case of updating an existing activity
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool $delete If marked true for updating an existing activity, the activity will be permanently deleted
     *
     * @return $this
     */
    public function setDelete($delete)
    {
        $this->container['delete'] = $delete;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


