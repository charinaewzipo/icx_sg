<?php
/**
 * AnalyticsConversationSegment
 *
 * PHP version 5
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PureCloud Platform API
 *
 * With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.
 *
 * OpenAPI spec version: v2
 * Contact: DeveloperEvangelists@genesys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PureCloudPlatform\Client\V2\Model;

use \ArrayAccess;
use \PureCloudPlatform\Client\V2\ObjectSerializer;

/**
 * AnalyticsConversationSegment Class Doc Comment
 *
 * @category Class
 * @package  PureCloudPlatform\Client\V2
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AnalyticsConversationSegment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AnalyticsConversationSegment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'segmentStart' => '\DateTime',
        'segmentEnd' => '\DateTime',
        'queueId' => 'string',
        'wrapUpCode' => 'string',
        'wrapUpNote' => 'string',
        'wrapUpTags' => 'string[]',
        'errorCode' => 'string',
        'disconnectType' => 'string',
        'segmentType' => 'string',
        'requestedRoutingUserIds' => 'string[]',
        'requestedRoutingSkillIds' => 'string[]',
        'requestedLanguageId' => 'string',
        'scoredAgents' => '\PureCloudPlatform\Client\V2\Model\AnalyticsScoredAgent[]',
        'properties' => '\PureCloudPlatform\Client\V2\Model\AnalyticsProperty[]',
        'sourceConversationId' => 'string',
        'destinationConversationId' => 'string',
        'sourceSessionId' => 'string',
        'destinationSessionId' => 'string',
        'sipResponseCodes' => 'int[]',
        'q850ResponseCodes' => 'int[]',
        'conference' => 'bool',
        'groupId' => 'string',
        'subject' => 'string',
        'audioMuted' => 'bool',
        'videoMuted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'segmentStart' => 'date-time',
        'segmentEnd' => 'date-time',
        'queueId' => null,
        'wrapUpCode' => null,
        'wrapUpNote' => null,
        'wrapUpTags' => null,
        'errorCode' => null,
        'disconnectType' => null,
        'segmentType' => null,
        'requestedRoutingUserIds' => null,
        'requestedRoutingSkillIds' => null,
        'requestedLanguageId' => null,
        'scoredAgents' => null,
        'properties' => null,
        'sourceConversationId' => null,
        'destinationConversationId' => null,
        'sourceSessionId' => null,
        'destinationSessionId' => null,
        'sipResponseCodes' => 'int64',
        'q850ResponseCodes' => 'int64',
        'conference' => null,
        'groupId' => null,
        'subject' => null,
        'audioMuted' => null,
        'videoMuted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'segmentStart' => 'segmentStart',
        'segmentEnd' => 'segmentEnd',
        'queueId' => 'queueId',
        'wrapUpCode' => 'wrapUpCode',
        'wrapUpNote' => 'wrapUpNote',
        'wrapUpTags' => 'wrapUpTags',
        'errorCode' => 'errorCode',
        'disconnectType' => 'disconnectType',
        'segmentType' => 'segmentType',
        'requestedRoutingUserIds' => 'requestedRoutingUserIds',
        'requestedRoutingSkillIds' => 'requestedRoutingSkillIds',
        'requestedLanguageId' => 'requestedLanguageId',
        'scoredAgents' => 'scoredAgents',
        'properties' => 'properties',
        'sourceConversationId' => 'sourceConversationId',
        'destinationConversationId' => 'destinationConversationId',
        'sourceSessionId' => 'sourceSessionId',
        'destinationSessionId' => 'destinationSessionId',
        'sipResponseCodes' => 'sipResponseCodes',
        'q850ResponseCodes' => 'q850ResponseCodes',
        'conference' => 'conference',
        'groupId' => 'groupId',
        'subject' => 'subject',
        'audioMuted' => 'audioMuted',
        'videoMuted' => 'videoMuted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'segmentStart' => 'setSegmentStart',
        'segmentEnd' => 'setSegmentEnd',
        'queueId' => 'setQueueId',
        'wrapUpCode' => 'setWrapUpCode',
        'wrapUpNote' => 'setWrapUpNote',
        'wrapUpTags' => 'setWrapUpTags',
        'errorCode' => 'setErrorCode',
        'disconnectType' => 'setDisconnectType',
        'segmentType' => 'setSegmentType',
        'requestedRoutingUserIds' => 'setRequestedRoutingUserIds',
        'requestedRoutingSkillIds' => 'setRequestedRoutingSkillIds',
        'requestedLanguageId' => 'setRequestedLanguageId',
        'scoredAgents' => 'setScoredAgents',
        'properties' => 'setProperties',
        'sourceConversationId' => 'setSourceConversationId',
        'destinationConversationId' => 'setDestinationConversationId',
        'sourceSessionId' => 'setSourceSessionId',
        'destinationSessionId' => 'setDestinationSessionId',
        'sipResponseCodes' => 'setSipResponseCodes',
        'q850ResponseCodes' => 'setQ850ResponseCodes',
        'conference' => 'setConference',
        'groupId' => 'setGroupId',
        'subject' => 'setSubject',
        'audioMuted' => 'setAudioMuted',
        'videoMuted' => 'setVideoMuted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'segmentStart' => 'getSegmentStart',
        'segmentEnd' => 'getSegmentEnd',
        'queueId' => 'getQueueId',
        'wrapUpCode' => 'getWrapUpCode',
        'wrapUpNote' => 'getWrapUpNote',
        'wrapUpTags' => 'getWrapUpTags',
        'errorCode' => 'getErrorCode',
        'disconnectType' => 'getDisconnectType',
        'segmentType' => 'getSegmentType',
        'requestedRoutingUserIds' => 'getRequestedRoutingUserIds',
        'requestedRoutingSkillIds' => 'getRequestedRoutingSkillIds',
        'requestedLanguageId' => 'getRequestedLanguageId',
        'scoredAgents' => 'getScoredAgents',
        'properties' => 'getProperties',
        'sourceConversationId' => 'getSourceConversationId',
        'destinationConversationId' => 'getDestinationConversationId',
        'sourceSessionId' => 'getSourceSessionId',
        'destinationSessionId' => 'getDestinationSessionId',
        'sipResponseCodes' => 'getSipResponseCodes',
        'q850ResponseCodes' => 'getQ850ResponseCodes',
        'conference' => 'getConference',
        'groupId' => 'getGroupId',
        'subject' => 'getSubject',
        'audioMuted' => 'getAudioMuted',
        'videoMuted' => 'getVideoMuted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DISCONNECT_TYPE_ENDPOINT = 'endpoint';
    const DISCONNECT_TYPE_CLIENT = 'client';
    const DISCONNECT_TYPE_SYSTEM = 'system';
    const DISCONNECT_TYPE_TRANSFER = 'transfer';
    const DISCONNECT_TYPE_ERROR = 'error';
    const DISCONNECT_TYPE_PEER = 'peer';
    const DISCONNECT_TYPE_OTHER = 'other';
    const DISCONNECT_TYPE_SPAM = 'spam';
    const DISCONNECT_TYPE_TRANSPORT_FAILURE = 'transportFailure';
    const DISCONNECT_TYPE_CONFERENCE_TRANSFER = 'conferenceTransfer';
    const DISCONNECT_TYPE_CONSULT_TRANSFER = 'consultTransfer';
    const DISCONNECT_TYPE_FORWARD_TRANSFER = 'forwardTransfer';
    const DISCONNECT_TYPE_TIMEOUT = 'timeout';
    const DISCONNECT_TYPE_NO_ANSWER_TRANSFER = 'noAnswerTransfer';
    const DISCONNECT_TYPE_NOT_AVAILABLE_TRANSFER = 'notAvailableTransfer';
    const DISCONNECT_TYPE_UNCALLABLE = 'uncallable';
    const SEGMENT_TYPE_UNKNOWN = 'unknown';
    const SEGMENT_TYPE_ALERT = 'alert';
    const SEGMENT_TYPE_SYSTEM = 'system';
    const SEGMENT_TYPE_DELAY = 'delay';
    const SEGMENT_TYPE_HOLD = 'hold';
    const SEGMENT_TYPE_INTERACT = 'interact';
    const SEGMENT_TYPE_IVR = 'ivr';
    const SEGMENT_TYPE_DIALING = 'dialing';
    const SEGMENT_TYPE_WRAPUP = 'wrapup';
    const SEGMENT_TYPE_VOICEMAIL = 'voicemail';
    const SEGMENT_TYPE_SCHEDULED = 'scheduled';
    const SEGMENT_TYPE_CONTACTING = 'contacting';
    const SEGMENT_TYPE_TRANSMITTING = 'transmitting';
    const SEGMENT_TYPE_CONVERTING = 'converting';
    const SEGMENT_TYPE_UPLOADING = 'uploading';
    const SEGMENT_TYPE_SHARING = 'sharing';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDisconnectTypeAllowableValues()
    {
        return [
            self::DISCONNECT_TYPE_ENDPOINT,
            self::DISCONNECT_TYPE_CLIENT,
            self::DISCONNECT_TYPE_SYSTEM,
            self::DISCONNECT_TYPE_TRANSFER,
            self::DISCONNECT_TYPE_ERROR,
            self::DISCONNECT_TYPE_PEER,
            self::DISCONNECT_TYPE_OTHER,
            self::DISCONNECT_TYPE_SPAM,
            self::DISCONNECT_TYPE_TRANSPORT_FAILURE,
            self::DISCONNECT_TYPE_CONFERENCE_TRANSFER,
            self::DISCONNECT_TYPE_CONSULT_TRANSFER,
            self::DISCONNECT_TYPE_FORWARD_TRANSFER,
            self::DISCONNECT_TYPE_TIMEOUT,
            self::DISCONNECT_TYPE_NO_ANSWER_TRANSFER,
            self::DISCONNECT_TYPE_NOT_AVAILABLE_TRANSFER,
            self::DISCONNECT_TYPE_UNCALLABLE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSegmentTypeAllowableValues()
    {
        return [
            self::SEGMENT_TYPE_UNKNOWN,
            self::SEGMENT_TYPE_ALERT,
            self::SEGMENT_TYPE_SYSTEM,
            self::SEGMENT_TYPE_DELAY,
            self::SEGMENT_TYPE_HOLD,
            self::SEGMENT_TYPE_INTERACT,
            self::SEGMENT_TYPE_IVR,
            self::SEGMENT_TYPE_DIALING,
            self::SEGMENT_TYPE_WRAPUP,
            self::SEGMENT_TYPE_VOICEMAIL,
            self::SEGMENT_TYPE_SCHEDULED,
            self::SEGMENT_TYPE_CONTACTING,
            self::SEGMENT_TYPE_TRANSMITTING,
            self::SEGMENT_TYPE_CONVERTING,
            self::SEGMENT_TYPE_UPLOADING,
            self::SEGMENT_TYPE_SHARING,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['segmentStart'] = isset($data['segmentStart']) ? $data['segmentStart'] : null;
        $this->container['segmentEnd'] = isset($data['segmentEnd']) ? $data['segmentEnd'] : null;
        $this->container['queueId'] = isset($data['queueId']) ? $data['queueId'] : null;
        $this->container['wrapUpCode'] = isset($data['wrapUpCode']) ? $data['wrapUpCode'] : null;
        $this->container['wrapUpNote'] = isset($data['wrapUpNote']) ? $data['wrapUpNote'] : null;
        $this->container['wrapUpTags'] = isset($data['wrapUpTags']) ? $data['wrapUpTags'] : null;
        $this->container['errorCode'] = isset($data['errorCode']) ? $data['errorCode'] : null;
        $this->container['disconnectType'] = isset($data['disconnectType']) ? $data['disconnectType'] : null;
        $this->container['segmentType'] = isset($data['segmentType']) ? $data['segmentType'] : null;
        $this->container['requestedRoutingUserIds'] = isset($data['requestedRoutingUserIds']) ? $data['requestedRoutingUserIds'] : null;
        $this->container['requestedRoutingSkillIds'] = isset($data['requestedRoutingSkillIds']) ? $data['requestedRoutingSkillIds'] : null;
        $this->container['requestedLanguageId'] = isset($data['requestedLanguageId']) ? $data['requestedLanguageId'] : null;
        $this->container['scoredAgents'] = isset($data['scoredAgents']) ? $data['scoredAgents'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['sourceConversationId'] = isset($data['sourceConversationId']) ? $data['sourceConversationId'] : null;
        $this->container['destinationConversationId'] = isset($data['destinationConversationId']) ? $data['destinationConversationId'] : null;
        $this->container['sourceSessionId'] = isset($data['sourceSessionId']) ? $data['sourceSessionId'] : null;
        $this->container['destinationSessionId'] = isset($data['destinationSessionId']) ? $data['destinationSessionId'] : null;
        $this->container['sipResponseCodes'] = isset($data['sipResponseCodes']) ? $data['sipResponseCodes'] : null;
        $this->container['q850ResponseCodes'] = isset($data['q850ResponseCodes']) ? $data['q850ResponseCodes'] : null;
        $this->container['conference'] = isset($data['conference']) ? $data['conference'] : null;
        $this->container['groupId'] = isset($data['groupId']) ? $data['groupId'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['audioMuted'] = isset($data['audioMuted']) ? $data['audioMuted'] : null;
        $this->container['videoMuted'] = isset($data['videoMuted']) ? $data['videoMuted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDisconnectTypeAllowableValues();
        if (!is_null($this->container['disconnectType']) && !in_array($this->container['disconnectType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'disconnectType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSegmentTypeAllowableValues();
        if (!is_null($this->container['segmentType']) && !in_array($this->container['segmentType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'segmentType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets segmentStart
     *
     * @return \DateTime
     */
    public function getSegmentStart()
    {
        return $this->container['segmentStart'];
    }

    /**
     * Sets segmentStart
     *
     * @param \DateTime $segmentStart The timestamp when this segment began. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setSegmentStart($segmentStart)
    {
        $this->container['segmentStart'] = $segmentStart;

        return $this;
    }

    /**
     * Gets segmentEnd
     *
     * @return \DateTime
     */
    public function getSegmentEnd()
    {
        return $this->container['segmentEnd'];
    }

    /**
     * Sets segmentEnd
     *
     * @param \DateTime $segmentEnd The timestamp when this segment ended. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
     *
     * @return $this
     */
    public function setSegmentEnd($segmentEnd)
    {
        $this->container['segmentEnd'] = $segmentEnd;

        return $this;
    }

    /**
     * Gets queueId
     *
     * @return string
     */
    public function getQueueId()
    {
        return $this->container['queueId'];
    }

    /**
     * Sets queueId
     *
     * @param string $queueId Queue identifier
     *
     * @return $this
     */
    public function setQueueId($queueId)
    {
        $this->container['queueId'] = $queueId;

        return $this;
    }

    /**
     * Gets wrapUpCode
     *
     * @return string
     */
    public function getWrapUpCode()
    {
        return $this->container['wrapUpCode'];
    }

    /**
     * Sets wrapUpCode
     *
     * @param string $wrapUpCode Wrapup Code id
     *
     * @return $this
     */
    public function setWrapUpCode($wrapUpCode)
    {
        $this->container['wrapUpCode'] = $wrapUpCode;

        return $this;
    }

    /**
     * Gets wrapUpNote
     *
     * @return string
     */
    public function getWrapUpNote()
    {
        return $this->container['wrapUpNote'];
    }

    /**
     * Sets wrapUpNote
     *
     * @param string $wrapUpNote Note entered by an agent during after-call work
     *
     * @return $this
     */
    public function setWrapUpNote($wrapUpNote)
    {
        $this->container['wrapUpNote'] = $wrapUpNote;

        return $this;
    }

    /**
     * Gets wrapUpTags
     *
     * @return string[]
     */
    public function getWrapUpTags()
    {
        return $this->container['wrapUpTags'];
    }

    /**
     * Sets wrapUpTags
     *
     * @param string[] $wrapUpTags wrapUpTags
     *
     * @return $this
     */
    public function setWrapUpTags($wrapUpTags)
    {
        $this->container['wrapUpTags'] = $wrapUpTags;

        return $this;
    }

    /**
     * Gets errorCode
     *
     * @return string
     */
    public function getErrorCode()
    {
        return $this->container['errorCode'];
    }

    /**
     * Sets errorCode
     *
     * @param string $errorCode errorCode
     *
     * @return $this
     */
    public function setErrorCode($errorCode)
    {
        $this->container['errorCode'] = $errorCode;

        return $this;
    }

    /**
     * Gets disconnectType
     *
     * @return string
     */
    public function getDisconnectType()
    {
        return $this->container['disconnectType'];
    }

    /**
     * Sets disconnectType
     *
     * @param string $disconnectType A description of the event that disconnected the segment
     *
     * @return $this
     */
    public function setDisconnectType($disconnectType)
    {
        $allowedValues = $this->getDisconnectTypeAllowableValues();
        if (!is_null($disconnectType) && !in_array($disconnectType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'disconnectType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['disconnectType'] = $disconnectType;

        return $this;
    }

    /**
     * Gets segmentType
     *
     * @return string
     */
    public function getSegmentType()
    {
        return $this->container['segmentType'];
    }

    /**
     * Sets segmentType
     *
     * @param string $segmentType The activity taking place for the participant in the segment
     *
     * @return $this
     */
    public function setSegmentType($segmentType)
    {
        $allowedValues = $this->getSegmentTypeAllowableValues();
        if (!is_null($segmentType) && !in_array($segmentType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'segmentType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['segmentType'] = $segmentType;

        return $this;
    }

    /**
     * Gets requestedRoutingUserIds
     *
     * @return string[]
     */
    public function getRequestedRoutingUserIds()
    {
        return $this->container['requestedRoutingUserIds'];
    }

    /**
     * Sets requestedRoutingUserIds
     *
     * @param string[] $requestedRoutingUserIds requestedRoutingUserIds
     *
     * @return $this
     */
    public function setRequestedRoutingUserIds($requestedRoutingUserIds)
    {
        $this->container['requestedRoutingUserIds'] = $requestedRoutingUserIds;

        return $this;
    }

    /**
     * Gets requestedRoutingSkillIds
     *
     * @return string[]
     */
    public function getRequestedRoutingSkillIds()
    {
        return $this->container['requestedRoutingSkillIds'];
    }

    /**
     * Sets requestedRoutingSkillIds
     *
     * @param string[] $requestedRoutingSkillIds requestedRoutingSkillIds
     *
     * @return $this
     */
    public function setRequestedRoutingSkillIds($requestedRoutingSkillIds)
    {
        $this->container['requestedRoutingSkillIds'] = $requestedRoutingSkillIds;

        return $this;
    }

    /**
     * Gets requestedLanguageId
     *
     * @return string
     */
    public function getRequestedLanguageId()
    {
        return $this->container['requestedLanguageId'];
    }

    /**
     * Sets requestedLanguageId
     *
     * @param string $requestedLanguageId A unique identifier for the language requested for an interaction.
     *
     * @return $this
     */
    public function setRequestedLanguageId($requestedLanguageId)
    {
        $this->container['requestedLanguageId'] = $requestedLanguageId;

        return $this;
    }

    /**
     * Gets scoredAgents
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsScoredAgent[]
     */
    public function getScoredAgents()
    {
        return $this->container['scoredAgents'];
    }

    /**
     * Sets scoredAgents
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsScoredAgent[] $scoredAgents scoredAgents
     *
     * @return $this
     */
    public function setScoredAgents($scoredAgents)
    {
        $this->container['scoredAgents'] = $scoredAgents;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \PureCloudPlatform\Client\V2\Model\AnalyticsProperty[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \PureCloudPlatform\Client\V2\Model\AnalyticsProperty[] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets sourceConversationId
     *
     * @return string
     */
    public function getSourceConversationId()
    {
        return $this->container['sourceConversationId'];
    }

    /**
     * Sets sourceConversationId
     *
     * @param string $sourceConversationId sourceConversationId
     *
     * @return $this
     */
    public function setSourceConversationId($sourceConversationId)
    {
        $this->container['sourceConversationId'] = $sourceConversationId;

        return $this;
    }

    /**
     * Gets destinationConversationId
     *
     * @return string
     */
    public function getDestinationConversationId()
    {
        return $this->container['destinationConversationId'];
    }

    /**
     * Sets destinationConversationId
     *
     * @param string $destinationConversationId destinationConversationId
     *
     * @return $this
     */
    public function setDestinationConversationId($destinationConversationId)
    {
        $this->container['destinationConversationId'] = $destinationConversationId;

        return $this;
    }

    /**
     * Gets sourceSessionId
     *
     * @return string
     */
    public function getSourceSessionId()
    {
        return $this->container['sourceSessionId'];
    }

    /**
     * Sets sourceSessionId
     *
     * @param string $sourceSessionId sourceSessionId
     *
     * @return $this
     */
    public function setSourceSessionId($sourceSessionId)
    {
        $this->container['sourceSessionId'] = $sourceSessionId;

        return $this;
    }

    /**
     * Gets destinationSessionId
     *
     * @return string
     */
    public function getDestinationSessionId()
    {
        return $this->container['destinationSessionId'];
    }

    /**
     * Sets destinationSessionId
     *
     * @param string $destinationSessionId destinationSessionId
     *
     * @return $this
     */
    public function setDestinationSessionId($destinationSessionId)
    {
        $this->container['destinationSessionId'] = $destinationSessionId;

        return $this;
    }

    /**
     * Gets sipResponseCodes
     *
     * @return int[]
     */
    public function getSipResponseCodes()
    {
        return $this->container['sipResponseCodes'];
    }

    /**
     * Sets sipResponseCodes
     *
     * @param int[] $sipResponseCodes sipResponseCodes
     *
     * @return $this
     */
    public function setSipResponseCodes($sipResponseCodes)
    {
        $this->container['sipResponseCodes'] = $sipResponseCodes;

        return $this;
    }

    /**
     * Gets q850ResponseCodes
     *
     * @return int[]
     */
    public function getQ850ResponseCodes()
    {
        return $this->container['q850ResponseCodes'];
    }

    /**
     * Sets q850ResponseCodes
     *
     * @param int[] $q850ResponseCodes q850ResponseCodes
     *
     * @return $this
     */
    public function setQ850ResponseCodes($q850ResponseCodes)
    {
        $this->container['q850ResponseCodes'] = $q850ResponseCodes;

        return $this;
    }

    /**
     * Gets conference
     *
     * @return bool
     */
    public function getConference()
    {
        return $this->container['conference'];
    }

    /**
     * Sets conference
     *
     * @param bool $conference Indicates whether the segment was a conference
     *
     * @return $this
     */
    public function setConference($conference)
    {
        $this->container['conference'] = $conference;

        return $this;
    }

    /**
     * Gets groupId
     *
     * @return string
     */
    public function getGroupId()
    {
        return $this->container['groupId'];
    }

    /**
     * Sets groupId
     *
     * @param string $groupId groupId
     *
     * @return $this
     */
    public function setGroupId($groupId)
    {
        $this->container['groupId'] = $groupId;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets audioMuted
     *
     * @return bool
     */
    public function getAudioMuted()
    {
        return $this->container['audioMuted'];
    }

    /**
     * Sets audioMuted
     *
     * @param bool $audioMuted audioMuted
     *
     * @return $this
     */
    public function setAudioMuted($audioMuted)
    {
        $this->container['audioMuted'] = $audioMuted;

        return $this;
    }

    /**
     * Gets videoMuted
     *
     * @return bool
     */
    public function getVideoMuted()
    {
        return $this->container['videoMuted'];
    }

    /**
     * Sets videoMuted
     *
     * @param bool $videoMuted videoMuted
     *
     * @return $this
     */
    public function setVideoMuted($videoMuted)
    {
        $this->container['videoMuted'] = $videoMuted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


